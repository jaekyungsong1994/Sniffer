
HelloWorld.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002004  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000b5ae  80002004  80002004  00002404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000d600  8000d600  0000da00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000008d0  8000d800  8000d800  0000dc00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000005d4  00000004  8000e0d0  0000e804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000660  000005e0  8000e6c0  0000ede0  2**5
                  ALLOC
  7 .comment      00000030  00000000  00000000  0000edd8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001300  00000000  00000000  0000ee08  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_pubnames 00002491  00000000  00000000  00010108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00038c9d  00000000  00000000  00012599  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00007f66  00000000  00000000  0004b236  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000176b5  00000000  00000000  0005319c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002d88  00000000  00000000  0006a854  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000095b9  00000000  00000000  0006d5dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000fa11  00000000  00000000  00076b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macinfo 01503b65  00000000  00000000  000865a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .stack        00001000  00007000  00007000  00000400  2**0
                  ALLOC
 18 .debug_ranges 00001348  00000000  00000000  0158a110  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe cf ea 20 	sub	pc,pc,-5600

Disassembly of section .text:

80002004 <flashc_set_wait_state>:
80002004:	fe 68 00 00 	mov	r8,-131072
}


void flashc_set_wait_state(unsigned int wait_state)
{
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80002008:	70 09       	ld.w	r9,r8[0x0]
	u_avr32_flashc_fcr.FCR.fws = wait_state;
8000200a:	f3 dc d0 c1 	bfins	r9,r12,0x6,0x1
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8000200e:	91 09       	st.w	r8[0x0],r9
}
80002010:	5e fc       	retal	r12
80002012:	d7 03       	nop

80002014 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
80002014:	d4 01       	pushm	lr
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80002016:	e0 68 8a 3f 	mov	r8,35391
8000201a:	ea 18 01 f7 	orh	r8,0x1f7
8000201e:	10 3c       	cp.w	r12,r8
80002020:	e0 88 00 06 	brls	8000202c <flashc_set_bus_freq+0x18>
		// Set 1 WS.
		flashc_set_wait_state(1);
80002024:	30 1c       	mov	r12,1
80002026:	f0 1f 00 04 	mcall	80002034 <flashc_set_bus_freq+0x20>
8000202a:	d8 02       	popm	pc
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
8000202c:	30 0c       	mov	r12,0
8000202e:	f0 1f 00 02 	mcall	80002034 <flashc_set_bus_freq+0x20>
80002032:	d8 02       	popm	pc
80002034:	80 00       	ld.sh	r0,r0[0x0]
80002036:	20 04       	sub	r4,0

80002038 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002038:	f8 08 16 05 	lsr	r8,r12,0x5
8000203c:	a9 78       	lsl	r8,0x9
8000203e:	e0 28 e0 00 	sub	r8,57344

	/* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_PULL_DOWN) {
80002042:	16 99       	mov	r9,r11
80002044:	e2 19 00 08 	andl	r9,0x8,COH
80002048:	c0 70       	breq	80002056 <gpio_configure_pin+0x1e>
		gpio_port->pders = 1 << (pin & 0x1F);
8000204a:	30 19       	mov	r9,1
8000204c:	f2 0c 09 49 	lsl	r9,r9,r12
80002050:	f1 49 00 84 	st.w	r8[132],r9
80002054:	c0 68       	rjmp	80002060 <gpio_configure_pin+0x28>
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
80002056:	30 19       	mov	r9,1
80002058:	f2 0c 09 49 	lsl	r9,r9,r12
8000205c:	f1 49 00 88 	st.w	r8[136],r9
	}

#endif
	if (flags & GPIO_PULL_UP) {
80002060:	16 99       	mov	r9,r11
80002062:	e2 19 00 04 	andl	r9,0x4,COH
80002066:	c0 70       	breq	80002074 <gpio_configure_pin+0x3c>
		gpio_port->puers = 1 << (pin & 0x1F);
80002068:	30 19       	mov	r9,1
8000206a:	f2 0c 09 49 	lsl	r9,r9,r12
8000206e:	f1 49 00 74 	st.w	r8[116],r9
80002072:	c0 68       	rjmp	8000207e <gpio_configure_pin+0x46>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002074:	30 19       	mov	r9,1
80002076:	f2 0c 09 49 	lsl	r9,r9,r12
8000207a:	f1 49 00 78 	st.w	r8[120],r9
	}

	/* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	if (flags & GPIO_OPEN_DRAIN) {
8000207e:	16 99       	mov	r9,r11
80002080:	e2 19 00 40 	andl	r9,0x40,COH
80002084:	c0 70       	breq	80002092 <gpio_configure_pin+0x5a>
		gpio_port->odmers = 1 << (pin & 0x1F);
80002086:	30 19       	mov	r9,1
80002088:	f2 0c 09 49 	lsl	r9,r9,r12
8000208c:	f1 49 00 e4 	st.w	r8[228],r9
80002090:	c0 68       	rjmp	8000209c <gpio_configure_pin+0x64>
	} else {
		gpio_port->odmerc = 1 << (pin & 0x1F);
80002092:	30 19       	mov	r9,1
80002094:	f2 0c 09 49 	lsl	r9,r9,r12
80002098:	f1 49 00 e8 	st.w	r8[232],r9
#endif

#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) ||	\
	defined(AVR32_GPIO_212_H_INCLUDED)
	/* Select drive strength */
	if (flags & GPIO_DRIVE_LOW) {
8000209c:	16 99       	mov	r9,r11
8000209e:	e2 19 00 10 	andl	r9,0x10,COH
800020a2:	c0 70       	breq	800020b0 <gpio_configure_pin+0x78>
		gpio_port->odcr0s = 1 << (pin & 0x1F);
800020a4:	30 19       	mov	r9,1
800020a6:	f2 0c 09 49 	lsl	r9,r9,r12
800020aa:	f1 49 01 04 	st.w	r8[260],r9
800020ae:	c0 68       	rjmp	800020ba <gpio_configure_pin+0x82>
	} else {
		gpio_port->odcr0c = 1 << (pin & 0x1F);
800020b0:	30 19       	mov	r9,1
800020b2:	f2 0c 09 49 	lsl	r9,r9,r12
800020b6:	f1 49 01 08 	st.w	r8[264],r9
	}

	if (flags & GPIO_DRIVE_HIGH) {
800020ba:	16 99       	mov	r9,r11
800020bc:	e2 19 00 20 	andl	r9,0x20,COH
800020c0:	c0 70       	breq	800020ce <gpio_configure_pin+0x96>
		gpio_port->odcr1s = 1 << (pin & 0x1F);
800020c2:	30 19       	mov	r9,1
800020c4:	f2 0c 09 49 	lsl	r9,r9,r12
800020c8:	f1 49 01 14 	st.w	r8[276],r9
800020cc:	c0 68       	rjmp	800020d8 <gpio_configure_pin+0xa0>
	} else {
		gpio_port->odcr1c = 1 << (pin & 0x1F);
800020ce:	30 19       	mov	r9,1
800020d0:	f2 0c 09 49 	lsl	r9,r9,r12
800020d4:	f1 49 01 18 	st.w	r8[280],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800020d8:	16 99       	mov	r9,r11
800020da:	e2 19 00 80 	andl	r9,0x80,COH
800020de:	c2 40       	breq	80002126 <gpio_configure_pin+0xee>
		if (flags & GPIO_BOTHEDGES) {
800020e0:	16 99       	mov	r9,r11
800020e2:	e2 19 01 80 	andl	r9,0x180,COH
800020e6:	c0 90       	breq	800020f8 <gpio_configure_pin+0xc0>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800020e8:	30 19       	mov	r9,1
800020ea:	f2 0c 09 49 	lsl	r9,r9,r12
800020ee:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800020f2:	f1 49 00 b8 	st.w	r8[184],r9
800020f6:	c1 88       	rjmp	80002126 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_RISING) {
800020f8:	16 99       	mov	r9,r11
800020fa:	e2 19 02 80 	andl	r9,0x280,COH
800020fe:	c0 90       	breq	80002110 <gpio_configure_pin+0xd8>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002100:	30 19       	mov	r9,1
80002102:	f2 0c 09 49 	lsl	r9,r9,r12
80002106:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000210a:	f1 49 00 b8 	st.w	r8[184],r9
8000210e:	c0 c8       	rjmp	80002126 <gpio_configure_pin+0xee>
		} else if (flags & GPIO_FALLING) {
80002110:	16 99       	mov	r9,r11
80002112:	e2 19 03 80 	andl	r9,0x380,COH
80002116:	c0 80       	breq	80002126 <gpio_configure_pin+0xee>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002118:	30 19       	mov	r9,1
8000211a:	f2 0c 09 49 	lsl	r9,r9,r12
8000211e:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002122:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80002126:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000212a:	c1 50       	breq	80002154 <gpio_configure_pin+0x11c>
		if (flags & GPIO_INIT_HIGH) {
8000212c:	e2 1b 00 02 	andl	r11,0x2,COH
80002130:	c0 70       	breq	8000213e <gpio_configure_pin+0x106>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002132:	30 19       	mov	r9,1
80002134:	f2 0c 09 49 	lsl	r9,r9,r12
80002138:	f1 49 00 54 	st.w	r8[84],r9
8000213c:	c0 68       	rjmp	80002148 <gpio_configure_pin+0x110>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
8000213e:	30 19       	mov	r9,1
80002140:	f2 0c 09 49 	lsl	r9,r9,r12
80002144:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80002148:	30 19       	mov	r9,1
8000214a:	f2 0c 09 49 	lsl	r9,r9,r12
8000214e:	f1 49 00 44 	st.w	r8[68],r9
80002152:	c0 68       	rjmp	8000215e <gpio_configure_pin+0x126>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002154:	30 19       	mov	r9,1
80002156:	f2 0c 09 49 	lsl	r9,r9,r12
8000215a:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000215e:	30 19       	mov	r9,1
80002160:	f2 0c 09 4c 	lsl	r12,r9,r12
80002164:	91 1c       	st.w	r8[0x4],r12
}
80002166:	5e fc       	retal	r12

80002168 <gpio_tgl_gpio_pin>:
 *
 * \param pin The pin number.
 */
void gpio_tgl_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002168:	f8 08 16 05 	lsr	r8,r12,0x5
8000216c:	a9 78       	lsl	r8,0x9
8000216e:	e0 28 e0 00 	sub	r8,57344
	
	/* Toggle the I/O line. */
	gpio_port->ovrt  = 1 << (pin & 0x1F);
80002172:	30 19       	mov	r9,1
80002174:	f2 0c 09 4c 	lsl	r12,r9,r12
80002178:	f1 4c 00 5c 	st.w	r8[92],r12
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
8000217c:	f1 4c 00 44 	st.w	r8[68],r12
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002180:	91 1c       	st.w	r8[0x4],r12
}
80002182:	5e fc       	retal	r12

80002184 <tc_init_waveform>:


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
80002184:	76 09       	ld.w	r9,r11[0x0]
80002186:	58 29       	cp.w	r9,2
80002188:	e0 88 00 03 	brls	8000218e <tc_init_waveform+0xa>
8000218c:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
8000218e:	76 18       	ld.w	r8,r11[0x4]
80002190:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80002194:	af ba       	sbr	r10,0xf
80002196:	10 9b       	mov	r11,r8
80002198:	e6 1b c0 00 	andh	r11,0xc000,COH
8000219c:	16 4a       	or	r10,r11
8000219e:	10 9b       	mov	r11,r8
800021a0:	e6 1b 30 00 	andh	r11,0x3000,COH
800021a4:	16 4a       	or	r10,r11
800021a6:	10 9b       	mov	r11,r8
800021a8:	e6 1b 0c 00 	andh	r11,0xc00,COH
800021ac:	16 4a       	or	r10,r11
800021ae:	10 9b       	mov	r11,r8
800021b0:	e6 1b 03 00 	andh	r11,0x300,COH
800021b4:	16 4a       	or	r10,r11
800021b6:	10 9b       	mov	r11,r8
800021b8:	e6 1b 00 c0 	andh	r11,0xc0,COH
800021bc:	16 4a       	or	r10,r11
800021be:	10 9b       	mov	r11,r8
800021c0:	e6 1b 00 30 	andh	r11,0x30,COH
800021c4:	16 4a       	or	r10,r11
800021c6:	10 9b       	mov	r11,r8
800021c8:	e6 1b 00 0c 	andh	r11,0xc,COH
800021cc:	16 4a       	or	r10,r11
800021ce:	10 9b       	mov	r11,r8
800021d0:	e6 1b 00 03 	andh	r11,0x3,COH
800021d4:	16 4a       	or	r10,r11
800021d6:	10 9b       	mov	r11,r8
800021d8:	e2 1b 60 00 	andl	r11,0x6000,COH
800021dc:	16 4a       	or	r10,r11
800021de:	f7 d8 c1 81 	bfextu	r11,r8,0xc,0x1
800021e2:	f5 eb 10 ca 	or	r10,r10,r11<<0xc
800021e6:	10 9b       	mov	r11,r8
800021e8:	e2 1b 0c 00 	andl	r11,0xc00,COH
800021ec:	16 4a       	or	r10,r11
800021ee:	10 9b       	mov	r11,r8
800021f0:	e2 1b 03 00 	andl	r11,0x300,COH
800021f4:	16 4a       	or	r10,r11
800021f6:	f7 d8 c0 e1 	bfextu	r11,r8,0x7,0x1
800021fa:	f5 eb 10 7a 	or	r10,r10,r11<<0x7
800021fe:	f7 d8 c0 c1 	bfextu	r11,r8,0x6,0x1
80002202:	f5 eb 10 6a 	or	r10,r10,r11<<0x6
80002206:	10 9b       	mov	r11,r8
80002208:	e2 1b 00 30 	andl	r11,0x30,COH
8000220c:	16 4a       	or	r10,r11
8000220e:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002212:	f5 e8 10 38 	or	r8,r10,r8<<0x3
80002216:	a5 69       	lsl	r9,0x4
80002218:	2f f9       	sub	r9,-1
8000221a:	f8 09 09 28 	st.w	r12[r9<<0x2],r8
8000221e:	5e fd       	retal	0

80002220 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002220:	58 2b       	cp.w	r11,2
80002222:	e0 88 00 03 	brls	80002228 <tc_start+0x8>
80002226:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
80002228:	a7 6b       	lsl	r11,0x6
8000222a:	16 0c       	add	r12,r11
8000222c:	30 58       	mov	r8,5
8000222e:	99 08       	st.w	r12[0x0],r8
80002230:	5e fd       	retal	0

80002232 <tc_read_sr>:


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002232:	58 2b       	cp.w	r11,2
80002234:	e0 88 00 03 	brls	8000223a <tc_read_sr+0x8>
80002238:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  return tc->channel[channel].sr;
8000223a:	a7 6b       	lsl	r11,0x6
8000223c:	2e 0b       	sub	r11,-32
8000223e:	16 0c       	add	r12,r11
80002240:	78 0c       	ld.w	r12,r12[0x0]
}
80002242:	5e fc       	retal	r12

80002244 <tc_write_rc>:


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002244:	58 2b       	cp.w	r11,2
80002246:	e0 88 00 03 	brls	8000224c <tc_write_rc+0x8>
8000224a:	5e fe       	retal	-1
    return TC_INVALID_ARGUMENT;

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
8000224c:	f6 08 15 04 	lsl	r8,r11,0x4
80002250:	2f f8       	sub	r8,-1
80002252:	f8 08 03 28 	ld.w	r8,r12[r8<<0x2]
80002256:	e2 18 80 00 	andl	r8,0x8000,COH
8000225a:	c0 c0       	breq	80002272 <tc_write_rc+0x2e>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
8000225c:	a7 6b       	lsl	r11,0x6
8000225e:	16 0c       	add	r12,r11
80002260:	2e 4c       	sub	r12,-28
80002262:	78 08       	ld.w	r8,r12[0x0]
80002264:	f3 da c0 10 	bfextu	r9,r10,0x0,0x10
80002268:	e0 18 00 00 	andl	r8,0x0
8000226c:	f3 e8 10 08 	or	r8,r9,r8
80002270:	99 08       	st.w	r12[0x0],r8

  return value;
80002272:	f9 da c0 10 	bfextu	r12,r10,0x0,0x10
}
80002276:	5e fc       	retal	r12

80002278 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80002278:	eb cd 40 fc 	pushm	r2-r7,lr
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
8000227c:	e1 b9 00 00 	mfsr	r9,0x0

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80002280:	58 2b       	cp.w	r11,2
80002282:	e0 88 00 04 	brls	8000228a <tc_configure_interrupts+0x12>
80002286:	e3 cf c0 fc 	ldm	sp++,r2-r7,pc,r12=-1
	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
	return !(flags & AVR32_SR_GM_MASK);
8000228a:	ee 19 00 01 	eorh	r9,0x1
8000228e:	f3 d9 c2 01 	bfextu	r9,r9,0x10,0x1
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80002292:	74 08       	ld.w	r8,r10[0x0]
80002294:	ef d8 c0 e1 	bfextu	r7,r8,0x7,0x1
80002298:	fd d8 c0 c1 	bfextu	lr,r8,0x6,0x1
8000229c:	a7 6e       	lsl	lr,0x6
8000229e:	fd e7 10 7e 	or	lr,lr,r7<<0x7
800022a2:	ef d8 c0 01 	bfextu	r7,r8,0x0,0x1
800022a6:	0e 4e       	or	lr,r7
800022a8:	ef d8 c0 a1 	bfextu	r7,r8,0x5,0x1
800022ac:	fd e7 10 5e 	or	lr,lr,r7<<0x5
800022b0:	ef d8 c0 81 	bfextu	r7,r8,0x4,0x1
800022b4:	fd e7 10 4e 	or	lr,lr,r7<<0x4
800022b8:	ef d8 c0 61 	bfextu	r7,r8,0x3,0x1
800022bc:	fd e7 10 3e 	or	lr,lr,r7<<0x3
800022c0:	ef d8 c0 41 	bfextu	r7,r8,0x2,0x1
800022c4:	fd e7 10 2e 	or	lr,lr,r7<<0x2
800022c8:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800022cc:	fd e8 10 18 	or	r8,lr,r8<<0x1
800022d0:	f6 0e 15 06 	lsl	lr,r11,0x6
800022d4:	f8 0e 00 0e 	add	lr,r12,lr
800022d8:	2d ce       	sub	lr,-36
800022da:	9d 08       	st.w	lr[0x0],r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800022dc:	58 09       	cp.w	r9,0
800022de:	c0 20       	breq	800022e2 <tc_configure_interrupts+0x6a>
800022e0:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800022e2:	74 08       	ld.w	r8,r10[0x0]
800022e4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800022e8:	e0 65 00 80 	mov	r5,128
800022ec:	f9 b5 01 00 	movne	r5,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
800022f0:	74 08       	ld.w	r8,r10[0x0]
800022f2:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
800022f6:	f9 b4 00 40 	moveq	r4,64
800022fa:	f9 b4 01 00 	movne	r4,0
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
800022fe:	74 08       	ld.w	r8,r10[0x0]
80002300:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80002304:	f9 b3 00 20 	moveq	r3,32
80002308:	f9 b3 01 00 	movne	r3,0
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
8000230c:	74 08       	ld.w	r8,r10[0x0]
8000230e:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80002312:	f9 b2 00 10 	moveq	r2,16
80002316:	f9 b2 01 00 	movne	r2,0
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
8000231a:	74 08       	ld.w	r8,r10[0x0]
8000231c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80002320:	f9 b6 00 08 	moveq	r6,8
80002324:	f9 b6 01 00 	movne	r6,0
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80002328:	74 08       	ld.w	r8,r10[0x0]
8000232a:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000232e:	f9 b7 00 04 	moveq	r7,4
80002332:	f9 b7 01 00 	movne	r7,0
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80002336:	74 08       	ld.w	r8,r10[0x0]
80002338:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
8000233c:	f9 be 00 02 	moveq	lr,2
80002340:	f9 be 01 00 	movne	lr,0
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80002344:	74 08       	ld.w	r8,r10[0x0]
80002346:	ec 18 00 01 	eorl	r8,0x1
8000234a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000234e:	eb e8 10 08 	or	r8,r5,r8
80002352:	08 48       	or	r8,r4
80002354:	06 48       	or	r8,r3
80002356:	04 48       	or	r8,r2
80002358:	0c 48       	or	r8,r6
8000235a:	0e 48       	or	r8,r7
8000235c:	1c 48       	or	r8,lr
8000235e:	f6 0a 15 06 	lsl	r10,r11,0x6
80002362:	f8 0a 00 0a 	add	r10,r12,r10
80002366:	2d 8a       	sub	r10,-40
80002368:	95 08       	st.w	r10[0x0],r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
8000236a:	a7 6b       	lsl	r11,0x6
8000236c:	2e 0b       	sub	r11,-32
8000236e:	16 0c       	add	r12,r11
80002370:	78 08       	ld.w	r8,r12[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80002372:	58 09       	cp.w	r9,0
80002374:	c0 31       	brne	8000237a <tc_configure_interrupts+0x102>
80002376:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0
8000237a:	d5 03       	csrf	0x10
8000237c:	e3 cf 80 fc 	ldm	sp++,r2-r7,pc,r12=0

80002380 <udd_is_high_speed>:
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
#endif
}
80002380:	5e fd       	retal	0

80002382 <udd_set_address>:


void udd_set_address(uint8_t address)
{
	udd_disable_address();
80002382:	fe 68 10 00 	mov	r8,-126976
80002386:	70 09       	ld.w	r9,r8[0x0]
80002388:	a7 d9       	cbr	r9,0x7
8000238a:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
8000238c:	70 09       	ld.w	r9,r8[0x0]
8000238e:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80002392:	e0 19 ff 80 	andl	r9,0xff80
80002396:	f9 e9 10 09 	or	r9,r12,r9
8000239a:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
8000239c:	70 09       	ld.w	r9,r8[0x0]
8000239e:	a7 b9       	sbr	r9,0x7
800023a0:	91 09       	st.w	r8[0x0],r9
}
800023a2:	5e fc       	retal	r12

800023a4 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
	return udd_get_configured_address();
800023a4:	fe 68 10 00 	mov	r8,-126976
800023a8:	70 0c       	ld.w	r12,r8[0x0]
}
800023aa:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
800023ae:	5e fc       	retal	r12

800023b0 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
	return udd_frame_number();
800023b0:	fe 68 10 20 	mov	r8,-126944
800023b4:	70 0c       	ld.w	r12,r8[0x0]
}
800023b6:	f9 dc c0 6b 	bfextu	r12,r12,0x3,0xb
800023ba:	5e fc       	retal	r12

800023bc <udd_get_micro_frame_number>:
#ifdef USB_DEVICE_HS_SUPPORT
	return udd_micro_frame_number();
#else
	return 0;
#endif
}
800023bc:	5e fd       	retal	0
800023be:	d7 03       	nop

800023c0 <udd_set_setup_payload>:
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
	udd_g_ctrlreq.payload = payload;
800023c0:	48 28       	lddpc	r8,800023c8 <udd_set_setup_payload+0x8>
800023c2:	91 2c       	st.w	r8[0x8],r12
	udd_g_ctrlreq.payload_size = payload_size;
800023c4:	b0 6b       	st.h	r8[0xc],r11
}
800023c6:	5e fc       	retal	r12
800023c8:	00 00       	add	r0,r0
800023ca:	0a cc       	st.b	r5++,r12

800023cc <udd_ep_is_halted>:
}


bool udd_ep_is_halted(udd_ep_id_t ep)
{
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
800023cc:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
800023d0:	a3 68       	lsl	r8,0x2
800023d2:	e0 38 ee 40 	sub	r8,126528
800023d6:	70 0c       	ld.w	r12,r8[0x0]
}
800023d8:	f9 dc c2 61 	bfextu	r12,r12,0x13,0x1
800023dc:	5e fc       	retal	r12
800023de:	d7 03       	nop

800023e0 <udd_ep_clear_halt>:
	return true;
}


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
800023e0:	d4 01       	pushm	lr
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800023e2:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep) {
800023e6:	30 38       	mov	r8,3
800023e8:	f0 0c 18 00 	cp.b	r12,r8
800023ec:	e0 88 00 03 	brls	800023f2 <udd_ep_clear_halt+0x12>
800023f0:	d8 0a       	popm	pc,r12=0
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];

	if (Is_udd_endpoint_stall_requested(ep)) {
800023f2:	f8 08 15 02 	lsl	r8,r12,0x2
800023f6:	fe 6a 11 c0 	mov	r10,-126528
800023fa:	f0 0a 00 09 	add	r9,r8,r10
800023fe:	72 09       	ld.w	r9,r9[0x0]
80002400:	e6 19 00 08 	andh	r9,0x8,COH
80002404:	c2 b0       	breq	8000245a <udd_ep_clear_halt+0x7a>
		// Remove stall request
		udd_disable_stall_handshake(ep);
80002406:	fe 6a 12 20 	mov	r10,-126432
8000240a:	f0 0a 00 09 	add	r9,r8,r10
8000240e:	e8 6a 00 00 	mov	r10,524288
80002412:	93 0a       	st.w	r9[0x0],r10
		if (Is_udd_stall(ep)) {
80002414:	fe 6a 11 30 	mov	r10,-126672
80002418:	f0 0a 00 09 	add	r9,r8,r10
8000241c:	72 09       	ld.w	r9,r9[0x0]
8000241e:	e2 19 00 40 	andl	r9,0x40,COH
80002422:	c0 c0       	breq	8000243a <udd_ep_clear_halt+0x5a>
			udd_ack_stall(ep);
80002424:	fe 6a 11 60 	mov	r10,-126624
80002428:	f0 0a 00 09 	add	r9,r8,r10
8000242c:	34 0a       	mov	r10,64
8000242e:	93 0a       	st.w	r9[0x0],r10
			// A packet has been stalled, then reset data toggle
			udd_reset_data_toggle(ep);
80002430:	e0 38 ee 10 	sub	r8,126480
80002434:	e4 69 00 00 	mov	r9,262144
80002438:	91 09       	st.w	r8[0x0],r9

	ep &= USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep) {
		return false;
	}
	ptr_job = &udd_ep_job[ep - 1];
8000243a:	20 1c       	sub	r12,1
8000243c:	f8 0c 00 2c 	add	r12,r12,r12<<0x2
80002440:	48 78       	lddpc	r8,8000245c <udd_ep_clear_halt+0x7c>
80002442:	f0 0c 00 2c 	add	r12,r8,r12<<0x2
			udd_reset_data_toggle(ep);
		}

		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80002446:	78 08       	ld.w	r8,r12[0x0]
80002448:	58 08       	cp.w	r8,0
8000244a:	c0 84       	brge	8000245a <udd_ep_clear_halt+0x7a>
			ptr_job->busy = false;
8000244c:	30 09       	mov	r9,0
8000244e:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
80002452:	99 08       	st.w	r12[0x0],r8
			ptr_job->call_nohalt();
80002454:	78 48       	ld.w	r8,r12[0x10]
80002456:	5d 18       	icall	r8
80002458:	da 0a       	popm	pc,r12=1
8000245a:	da 0a       	popm	pc,r12=1
8000245c:	00 00       	add	r0,r0
8000245e:	05 e4       	ld.ub	r4,r2[0x6]

80002460 <udd_ctrl_init>:
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
80002460:	30 19       	mov	r9,1
80002462:	fe 68 12 20 	mov	r8,-126432
80002466:	91 09       	st.w	r8[0x0],r9
	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
80002468:	30 29       	mov	r9,2
8000246a:	fe 68 11 60 	mov	r8,-126624
8000246e:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80002470:	48 49       	lddpc	r9,80002480 <udd_ctrl_init+0x20>
80002472:	30 08       	mov	r8,0
80002474:	93 48       	st.w	r9[0x10],r8
	udd_g_ctrlreq.over_under_run = NULL;
80002476:	93 58       	st.w	r9[0x14],r8
	udd_g_ctrlreq.payload_size = 0;
80002478:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
8000247a:	48 39       	lddpc	r9,80002484 <udd_ctrl_init+0x24>
8000247c:	93 08       	st.w	r9[0x0],r8
}
8000247e:	5e fc       	retal	r12
80002480:	00 00       	add	r0,r0
80002482:	0a cc       	st.b	r5++,r12
80002484:	00 00       	add	r0,r0
80002486:	06 a4       	st.w	r3++,r4

80002488 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80002488:	30 59       	mov	r9,5
8000248a:	48 58       	lddpc	r8,8000249c <udd_ctrl_stall_data+0x14>
8000248c:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
8000248e:	e8 69 00 00 	mov	r9,524288
80002492:	fe 68 11 f0 	mov	r8,-126480
80002496:	91 09       	st.w	r8[0x0],r9
}
80002498:	5e fc       	retal	r12
8000249a:	00 00       	add	r0,r0
8000249c:	00 00       	add	r0,r0
8000249e:	06 a4       	st.w	r3++,r4

800024a0 <udd_ctrl_endofrequest>:
	cpu_irq_restore(flags);
}


static void udd_ctrl_endofrequest(void)
{
800024a0:	d4 01       	pushm	lr
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
800024a2:	48 48       	lddpc	r8,800024b0 <udd_ctrl_endofrequest+0x10>
800024a4:	70 48       	ld.w	r8,r8[0x10]
800024a6:	58 08       	cp.w	r8,0
800024a8:	c0 20       	breq	800024ac <udd_ctrl_endofrequest+0xc>
		udd_g_ctrlreq.callback();
800024aa:	5d 18       	icall	r8
800024ac:	d8 02       	popm	pc
800024ae:	00 00       	add	r0,r0
800024b0:	00 00       	add	r0,r0
800024b2:	0a cc       	st.b	r5++,r12

800024b4 <udd_ep_abort>:
	return true;
}


void udd_ep_abort(udd_ep_id_t ep)
{
800024b4:	d4 01       	pushm	lr
800024b6:	20 1d       	sub	sp,4
	irqflags_t flags;
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
800024b8:	f5 dc c0 04 	bfextu	r10,r12,0x0,0x4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800024bc:	e1 b8 00 00 	mfsr	r8,0x0
800024c0:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800024c2:	d3 03       	ssrf	0x10

	return flags;
800024c4:	40 08       	lddsp	r8,sp[0x0]

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep);
800024c6:	e0 6b 10 00 	mov	r11,4096
800024ca:	f6 0a 09 4b 	lsl	r11,r11,r10
800024ce:	fe 69 10 00 	mov	r9,-126976
800024d2:	93 5b       	st.w	r9[0x14],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800024d4:	e6 18 00 01 	andh	r8,0x1,COH
800024d8:	c0 21       	brne	800024dc <udd_ep_abort+0x28>
      cpu_irq_enable();
800024da:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// Stop transfer
	udd_enable_busy_bank0(ep);
800024dc:	f4 0b 15 02 	lsl	r11,r10,0x2
800024e0:	fe 69 11 f0 	mov	r9,-126480
800024e4:	f6 09 00 08 	add	r8,r11,r9
800024e8:	fc 19 01 00 	movh	r9,0x100
800024ec:	91 09       	st.w	r8[0x0],r9

	// Job complete then call callback
	ptr_job = &udd_ep_job[ep - 1];
800024ee:	f4 c9 00 01 	sub	r9,r10,1
800024f2:	f2 09 00 29 	add	r9,r9,r9<<0x2
800024f6:	48 d8       	lddpc	r8,80002528 <udd_ep_abort+0x74>
800024f8:	f0 09 00 29 	add	r9,r8,r9<<0x2
	if (!ptr_job->busy) {
800024fc:	72 08       	ld.w	r8,r9[0x0]
800024fe:	58 08       	cp.w	r8,0
80002500:	c1 24       	brge	80002524 <udd_ep_abort+0x70>
		return;
	}
	ptr_job->busy = false;
80002502:	30 0c       	mov	r12,0
80002504:	f1 dc d3 e1 	bfins	r8,r12,0x1f,0x1
80002508:	93 08       	st.w	r9[0x0],r8
	if (NULL != ptr_job->call_trans) {
8000250a:	72 48       	ld.w	r8,r9[0x10]
8000250c:	58 08       	cp.w	r8,0
8000250e:	c0 b0       	breq	80002524 <udd_ep_abort+0x70>
		if (Is_udd_endpoint_in(ep)) {
80002510:	e0 3b ef 00 	sub	r11,126720
80002514:	76 0b       	ld.w	r11,r11[0x0]
80002516:	e2 1b 01 00 	andl	r11,0x100,COH
8000251a:	c0 20       	breq	8000251e <udd_ep_abort+0x6a>
			ep |= USB_EP_DIR_IN;
8000251c:	a7 ba       	sbr	r10,0x7
		}
		// It can be a Transfer or stall callback
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
8000251e:	72 3b       	ld.w	r11,r9[0xc]
80002520:	30 1c       	mov	r12,1
80002522:	5d 18       	icall	r8
	}
}
80002524:	2f fd       	sub	sp,-4
80002526:	d8 02       	popm	pc
80002528:	00 00       	add	r0,r0
8000252a:	05 e4       	ld.ub	r4,r2[0x6]

8000252c <udd_ep_set_halt>:
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
}


bool udd_ep_set_halt(udd_ep_id_t ep)
{
8000252c:	d4 01       	pushm	lr
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
8000252e:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4

	if (USB_DEVICE_MAX_EP < ep_index) {
80002532:	30 39       	mov	r9,3
80002534:	f2 08 18 00 	cp.b	r8,r9
80002538:	e0 88 00 03 	brls	8000253e <udd_ep_set_halt+0x12>
8000253c:	d8 0a       	popm	pc,r12=0
		return false;
	}

	// Stall endpoint
	udd_enable_stall_handshake(ep_index);
8000253e:	a3 68       	lsl	r8,0x2
80002540:	e0 38 ee 10 	sub	r8,126480
80002544:	e8 69 00 00 	mov	r9,524288
80002548:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort(ep);
8000254a:	f0 1f 00 02 	mcall	80002550 <udd_ep_set_halt+0x24>
8000254e:	da 0a       	popm	pc,r12=1
80002550:	80 00       	ld.sh	r0,r0[0x0]
80002552:	24 b4       	sub	r4,75

80002554 <udd_ep_free>:
	return true;
}


void udd_ep_free(udd_ep_id_t ep)
{
80002554:	eb cd 40 80 	pushm	r7,lr
80002558:	18 97       	mov	r7,r12
	udd_ep_abort(ep);
8000255a:	f0 1f 00 07 	mcall	80002574 <udd_ep_free+0x20>
#if( defined UDC_RAM_ACCESS_ERROR_EVENT )
	if( Is_udd_ram_access_error(ep & 0x7F) ){
		UDC_RAM_ACCESS_ERROR_EVENT();
	}
#endif
	udd_disable_endpoint(ep & 0x7F);
8000255e:	fe 68 10 00 	mov	r8,-126976
80002562:	70 79       	ld.w	r9,r8[0x1c]
80002564:	30 1a       	mov	r10,1
80002566:	f4 07 09 47 	lsl	r7,r10,r7
8000256a:	5c d7       	com	r7
8000256c:	12 67       	and	r7,r9
8000256e:	91 77       	st.w	r8[0x1c],r7
}
80002570:	e3 cd 80 80 	ldm	sp++,r7,pc
80002574:	80 00       	ld.sh	r0,r0[0x0]
80002576:	24 b4       	sub	r4,75

80002578 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
80002578:	20 1d       	sub	sp,4
	if (!b_idle && udd_b_idle) {
8000257a:	58 0c       	cp.w	r12,0
8000257c:	c1 d1       	brne	800025b6 <udd_sleep_mode+0x3e>
8000257e:	49 e8       	lddpc	r8,800025f4 <udd_sleep_mode+0x7c>
80002580:	11 89       	ld.ub	r9,r8[0x0]
80002582:	30 08       	mov	r8,0
80002584:	f0 09 18 00 	cp.b	r9,r8
80002588:	c3 20       	breq	800025ec <udd_sleep_mode+0x74>
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
8000258a:	49 c8       	lddpc	r8,800025f8 <udd_sleep_mode+0x80>
8000258c:	11 99       	ld.ub	r9,r8[0x1]
8000258e:	30 08       	mov	r8,0
80002590:	f0 09 18 00 	cp.b	r9,r8
80002594:	c0 21       	brne	80002598 <udd_sleep_mode+0x20>
80002596:	c0 08       	rjmp	80002596 <udd_sleep_mode+0x1e>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002598:	e1 b8 00 00 	mfsr	r8,0x0
8000259c:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000259e:	d3 03       	ssrf	0x10

	return flags;
800025a0:	40 09       	lddsp	r9,sp[0x0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
800025a2:	49 68       	lddpc	r8,800025f8 <udd_sleep_mode+0x80>
800025a4:	11 9a       	ld.ub	r10,r8[0x1]
800025a6:	20 1a       	sub	r10,1
800025a8:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800025aa:	12 98       	mov	r8,r9
800025ac:	e6 18 00 01 	andh	r8,0x1,COH
800025b0:	c0 21       	brne	800025b4 <udd_sleep_mode+0x3c>
      cpu_irq_enable();
800025b2:	d5 03       	csrf	0x10
   }

	barrier();
800025b4:	c1 c8       	rjmp	800025ec <udd_sleep_mode+0x74>
		sleepmgr_unlock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	if (b_idle && !udd_b_idle) {
800025b6:	49 08       	lddpc	r8,800025f4 <udd_sleep_mode+0x7c>
800025b8:	11 89       	ld.ub	r9,r8[0x0]
800025ba:	30 08       	mov	r8,0
800025bc:	f0 09 18 00 	cp.b	r9,r8
800025c0:	c1 61       	brne	800025ec <udd_sleep_mode+0x74>
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
800025c2:	48 e8       	lddpc	r8,800025f8 <udd_sleep_mode+0x80>
800025c4:	11 99       	ld.ub	r9,r8[0x1]
800025c6:	3f f8       	mov	r8,-1
800025c8:	f0 09 18 00 	cp.b	r9,r8
800025cc:	c0 21       	brne	800025d0 <udd_sleep_mode+0x58>
800025ce:	c0 08       	rjmp	800025ce <udd_sleep_mode+0x56>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800025d0:	e1 b8 00 00 	mfsr	r8,0x0
800025d4:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800025d6:	d3 03       	ssrf	0x10

	return flags;
800025d8:	40 09       	lddsp	r9,sp[0x0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
800025da:	48 88       	lddpc	r8,800025f8 <udd_sleep_mode+0x80>
800025dc:	11 9a       	ld.ub	r10,r8[0x1]
800025de:	2f fa       	sub	r10,-1
800025e0:	b0 9a       	st.b	r8[0x1],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800025e2:	12 98       	mov	r8,r9
800025e4:	e6 18 00 01 	andh	r8,0x1,COH
800025e8:	c0 21       	brne	800025ec <udd_sleep_mode+0x74>
      cpu_irq_enable();
800025ea:	d5 03       	csrf	0x10
		sleepmgr_lock_mode(USBC_SLEEP_MODE_USB_IDLE);
	}
	udd_b_idle = b_idle;
800025ec:	48 28       	lddpc	r8,800025f4 <udd_sleep_mode+0x7c>
800025ee:	b0 8c       	st.b	r8[0x0],r12
}
800025f0:	2f fd       	sub	sp,-4
800025f2:	5e fc       	retal	r12
800025f4:	00 00       	add	r0,r0
800025f6:	06 a0       	st.w	r3++,r0
800025f8:	00 00       	add	r0,r0
800025fa:	0b 24       	ld.uh	r4,r5++

800025fc <udd_detach>:
	cpu_irq_restore(flags);
}


void udd_detach(void)
{
800025fc:	d4 01       	pushm	lr
	otg_unfreeze_clock();
800025fe:	fe 68 18 00 	mov	r8,-124928
80002602:	70 09       	ld.w	r9,r8[0x0]
80002604:	af c9       	cbr	r9,0xe
80002606:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80002608:	fe 69 10 00 	mov	r9,-126976
8000260c:	72 0a       	ld.w	r10,r9[0x0]
8000260e:	a9 aa       	sbr	r10,0x8
80002610:	93 0a       	st.w	r9[0x0],r10
	otg_freeze_clock();
80002612:	70 09       	ld.w	r9,r8[0x0]
80002614:	af a9       	sbr	r9,0xe
80002616:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80002618:	30 0c       	mov	r12,0
8000261a:	f0 1f 00 02 	mcall	80002620 <udd_detach+0x24>
}
8000261e:	d8 02       	popm	pc
80002620:	80 00       	ld.sh	r0,r0[0x0]
80002622:	25 78       	sub	r8,87

80002624 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80002624:	eb cd 40 80 	pushm	r7,lr
80002628:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000262a:	e1 b8 00 00 	mfsr	r8,0x0
8000262e:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002630:	d3 03       	ssrf	0x10

	return flags;
80002632:	40 07       	lddsp	r7,sp[0x0]
	irqflags_t flags;
	flags = cpu_irq_save();

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80002634:	30 1c       	mov	r12,1
80002636:	f0 1f 00 19 	mcall	80002698 <udd_attach+0x74>
	otg_unfreeze_clock();
8000263a:	fe 68 18 00 	mov	r8,-124928
8000263e:	70 09       	ld.w	r9,r8[0x0]
80002640:	af c9       	cbr	r9,0xe
80002642:	91 09       	st.w	r8[0x0],r9
	while (!Is_otg_clock_usable());
80002644:	fe 68 18 04 	mov	r8,-124924
80002648:	70 09       	ld.w	r9,r8[0x0]
8000264a:	e2 19 40 00 	andl	r9,0x4000,COH
8000264e:	cf d0       	breq	80002648 <udd_attach+0x24>

	// Authorize attach if Vbus is present
	udd_attach_device();
80002650:	fe 68 10 00 	mov	r8,-126976
80002654:	70 09       	ld.w	r9,r8[0x0]
80002656:	a9 c9       	cbr	r9,0x8
80002658:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
8000265a:	fe 68 10 18 	mov	r8,-126952
8000265e:	30 8c       	mov	r12,8
80002660:	91 0c       	st.w	r8[0x0],r12
	udd_enable_suspend_interrupt();
80002662:	30 1a       	mov	r10,1
80002664:	91 0a       	st.w	r8[0x0],r10
	udd_enable_wake_up_interrupt();
80002666:	31 09       	mov	r9,16
80002668:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
8000266a:	30 4b       	mov	r11,4
8000266c:	91 0b       	st.w	r8[0x0],r11

	// Reset following interrupts flag
	udd_ack_reset();
8000266e:	fe 68 10 08 	mov	r8,-126968
80002672:	91 0c       	st.w	r8[0x0],r12
	udd_ack_sof();
80002674:	91 0b       	st.w	r8[0x0],r11

	// The first suspend interrupt must be forced
	udd_raise_suspend();
80002676:	fe 6b 10 0c 	mov	r11,-126964
8000267a:	97 0a       	st.w	r11[0x0],r10
	udd_ack_wake_up();
8000267c:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
8000267e:	fe 68 18 00 	mov	r8,-124928
80002682:	70 09       	ld.w	r9,r8[0x0]
80002684:	af a9       	sbr	r9,0xe
80002686:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002688:	e6 17 00 01 	andh	r7,0x1,COH
8000268c:	c0 21       	brne	80002690 <udd_attach+0x6c>
      cpu_irq_enable();
8000268e:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
80002690:	2f fd       	sub	sp,-4
80002692:	e3 cd 80 80 	ldm	sp++,r7,pc
80002696:	00 00       	add	r0,r0
80002698:	80 00       	ld.sh	r0,r0[0x0]
8000269a:	25 78       	sub	r8,87

8000269c <udd_ctrl_send_zlp_in>:
	udd_enable_stall_handshake(0);
}


static void udd_ctrl_send_zlp_in(void)
{
8000269c:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
8000269e:	30 39       	mov	r9,3
800026a0:	48 f8       	lddpc	r8,800026dc <udd_ctrl_send_zlp_in+0x40>
800026a2:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	udd_udesc_rst_buf0_ctn(0);
800026a4:	48 f8       	lddpc	r8,800026e0 <udd_ctrl_send_zlp_in+0x44>
800026a6:	70 19       	ld.w	r9,r8[0x4]
800026a8:	30 0a       	mov	r10,0
800026aa:	f3 da d0 0f 	bfins	r9,r10,0x0,0xf
800026ae:	91 19       	st.w	r8[0x4],r9

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800026b0:	e1 b8 00 00 	mfsr	r8,0x0
800026b4:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800026b6:	d3 03       	ssrf	0x10

	return flags;
800026b8:	40 0b       	lddsp	r11,sp[0x0]

	flags = cpu_irq_save();

	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
800026ba:	fe 6a 11 60 	mov	r10,-126624
800026be:	30 19       	mov	r9,1
800026c0:	95 09       	st.w	r10[0x0],r9
	udd_enable_in_send_interrupt(0);
800026c2:	fe 68 11 f0 	mov	r8,-126480
800026c6:	91 09       	st.w	r8[0x0],r9

	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
800026c8:	30 89       	mov	r9,8
800026ca:	95 09       	st.w	r10[0x0],r9
	udd_enable_nak_out_interrupt(0);
800026cc:	91 09       	st.w	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800026ce:	16 98       	mov	r8,r11
800026d0:	e6 18 00 01 	andh	r8,0x1,COH
800026d4:	c0 21       	brne	800026d8 <udd_ctrl_send_zlp_in+0x3c>
      cpu_irq_enable();
800026d6:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800026d8:	2f fd       	sub	sp,-4
800026da:	5e fc       	retal	r12
800026dc:	00 00       	add	r0,r0
800026de:	06 a4       	st.w	r3++,r4
800026e0:	00 00       	add	r0,r0
800026e2:	06 20       	rsub	r0,r3

800026e4 <udd_ep_trans_done>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_trans_done(udd_ep_id_t ep)
{
800026e4:	d4 31       	pushm	r0-r7,lr
800026e6:	20 2d       	sub	sp,8
800026e8:	18 96       	mov	r6,r12
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
800026ea:	f1 dc c0 04 	bfextu	r8,r12,0x0,0x4
	ep_size = udd_get_endpoint_size(ep_num);
800026ee:	f0 00 15 02 	lsl	r0,r8,0x2
800026f2:	fe 6c 11 00 	mov	r12,-126720
800026f6:	e0 0c 00 09 	add	r9,r0,r12
800026fa:	72 01       	ld.w	r1,r9[0x0]

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
800026fc:	f0 c5 00 01 	sub	r5,r8,1
80002700:	ea 05 00 27 	add	r7,r5,r5<<0x2
80002704:	fe f9 02 dc 	ld.w	r9,pc[732]
80002708:	f2 07 00 27 	add	r7,r9,r7<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000270c:	e1 b9 00 00 	mfsr	r9,0x0
80002710:	50 19       	stdsp	sp[0x4],r9
	cpu_irq_disable();
80002712:	d3 03       	ssrf	0x10

	return flags;
80002714:	40 19       	lddsp	r9,sp[0x4]

	// Disable interrupt of endpoint
	flags = cpu_irq_save();
	udd_disable_endpoint_interrupt(ep_num);
80002716:	e0 64 10 00 	mov	r4,4096
8000271a:	e8 08 09 44 	lsl	r4,r4,r8
8000271e:	fe 6a 10 00 	mov	r10,-126976
80002722:	95 54       	st.w	r10[0x14],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002724:	e6 19 00 01 	andh	r9,0x1,COH
80002728:	c0 21       	brne	8000272c <udd_ep_trans_done+0x48>
      cpu_irq_enable();
8000272a:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (!ptr_job->busy) {
8000272c:	6e 09       	ld.w	r9,r7[0x0]
8000272e:	58 09       	cp.w	r9,0
80002730:	e0 84 01 55 	brge	800029da <udd_ep_trans_done+0x2f6>
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
	ep_size = udd_get_endpoint_size(ep_num);
80002734:	e3 d1 c0 83 	bfextu	r1,r1,0x4,0x3
80002738:	30 89       	mov	r9,8
8000273a:	f2 01 09 41 	lsl	r1,r9,r1
8000273e:	5c 81       	casts.h	r1

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
	}

	if (USB_EP_DIR_IN == (ep & USB_EP_DIR_IN)) {
80002740:	30 09       	mov	r9,0
80002742:	f2 06 18 00 	cp.b	r6,r9
80002746:	e0 84 00 96 	brge	80002872 <udd_ep_trans_done+0x18e>
		// Transfer complete on IN
		nb_trans = udd_udesc_get_buf0_size(ep_num);
8000274a:	f0 0a 15 01 	lsl	r10,r8,0x1
8000274e:	a3 78       	lsl	r8,0x3
80002750:	2f f8       	sub	r8,-1
80002752:	fe f9 02 92 	ld.w	r9,pc[658]
80002756:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
8000275a:	f3 d9 c2 0f 	bfextu	r9,r9,0x10,0xf

		// Lock emission of new IN packet
		udd_enable_busy_bank0(ep_num);
8000275e:	fe 68 11 f0 	mov	r8,-126480
80002762:	e0 08 00 0b 	add	r11,r0,r8
80002766:	fc 18 01 00 	movh	r8,0x100
8000276a:	97 08       	st.w	r11[0x0],r8

		// Ack interrupt
		udd_ack_in_send(ep_num);
8000276c:	fe 6c 11 60 	mov	r12,-126624
80002770:	e0 0c 00 08 	add	r8,r0,r12
80002774:	30 1c       	mov	r12,1
80002776:	91 0c       	st.w	r8[0x0],r12

		if (0 == nb_trans) {
80002778:	58 09       	cp.w	r9,0
8000277a:	c1 21       	brne	8000279e <udd_ep_trans_done+0xba>
			if (0 == udd_nb_busy_bank(ep_num)) {
8000277c:	fe 6c 11 30 	mov	r12,-126672
80002780:	e0 0c 00 08 	add	r8,r0,r12
80002784:	70 08       	ld.w	r8,r8[0x0]
80002786:	f1 d8 c1 82 	bfextu	r8,r8,0xc,0x2
8000278a:	c0 a1       	brne	8000279e <udd_ep_trans_done+0xba>
				// All byte are transfered than take nb byte requested
				nb_trans = udd_udesc_get_buf0_ctn(ep_num);
8000278c:	f4 09 15 02 	lsl	r9,r10,0x2
80002790:	2f f9       	sub	r9,-1
80002792:	fe f8 02 52 	ld.w	r8,pc[594]
80002796:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000279a:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
			}
		}
		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
8000279e:	6e 38       	ld.w	r8,r7[0xc]
800027a0:	10 09       	add	r9,r8
800027a2:	8f 39       	st.w	r7[0xc],r9

		// Need to send other data
		if ((ptr_job->nb_trans != ptr_job->buf_size)
800027a4:	6e 28       	ld.w	r8,r7[0x8]
800027a6:	10 39       	cp.w	r9,r8
800027a8:	c0 61       	brne	800027b4 <udd_ep_trans_done+0xd0>
				|| ptr_job->b_shortpacket) {
800027aa:	6e 0c       	ld.w	r12,r7[0x0]
800027ac:	e6 1c 40 00 	andh	r12,0x4000,COH
800027b0:	e0 80 01 09 	breq	800029c2 <udd_ep_trans_done+0x2de>
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
800027b4:	f0 09 01 09 	sub	r9,r8,r9
800027b8:	f9 d9 b0 10 	bfexts	r12,r9,0x0,0x10
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
800027bc:	30 08       	mov	r8,0
800027be:	f0 0c 19 00 	cp.h	r12,r8
800027c2:	c1 84       	brge	800027f2 <udd_ep_trans_done+0x10e>
				// The USB hardware support a maximum
				// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS -
800027c4:	f3 d1 c0 10 	bfextu	r9,r1,0x0,0x10
800027c8:	e0 68 7f ff 	mov	r8,32767
800027cc:	f0 09 0c 08 	divs	r8,r8,r9
800027d0:	e0 6c 7f ff 	mov	r12,32767
800027d4:	12 1c       	sub	r12,r9
800027d6:	5c 8c       	casts.h	r12
						(UDD_ENDPOINT_MAX_TRANS % ep_size);
				udd_udesc_set_buf0_autozlp(ep_num, false);
800027d8:	fe f8 02 0c 	ld.w	r8,pc[524]
800027dc:	f4 09 15 02 	lsl	r9,r10,0x2
800027e0:	2f f9       	sub	r9,-1
800027e2:	f0 09 03 26 	ld.w	r6,r8[r9<<0x2]
800027e6:	30 05       	mov	r5,0
800027e8:	ed d5 d3 e1 	bfins	r6,r5,0x1f,0x1
800027ec:	f0 09 09 26 	st.w	r8[r9<<0x2],r6
800027f0:	c1 28       	rjmp	80002814 <udd_ep_trans_done+0x130>
			} else {
				// Need ZLP, if requested and last packet is not a short packet
				udd_udesc_set_buf0_autozlp(ep_num, ptr_job->b_shortpacket);
800027f2:	6e 08       	ld.w	r8,r7[0x0]
800027f4:	e7 d8 c3 c1 	bfextu	r3,r8,0x1e,0x1
800027f8:	4f b9       	lddpc	r9,800029e4 <udd_ep_trans_done+0x300>
800027fa:	f4 06 15 02 	lsl	r6,r10,0x2
800027fe:	2f f6       	sub	r6,-1
80002800:	f2 06 03 25 	ld.w	r5,r9[r6<<0x2]
80002804:	eb d3 d3 e1 	bfins	r5,r3,0x1f,0x1
80002808:	f2 06 09 25 	st.w	r9[r6<<0x2],r5
				ptr_job->b_shortpacket = false; // No need to request another ZLP
8000280c:	30 09       	mov	r9,0
8000280e:	f1 d9 d3 c1 	bfins	r8,r9,0x1e,0x1
80002812:	8f 08       	st.w	r7[0x0],r8
			}

			udd_udesc_set_buf0_ctn(ep_num, next_trans);
80002814:	4f 48       	lddpc	r8,800029e4 <udd_ep_trans_done+0x300>
80002816:	f4 09 15 02 	lsl	r9,r10,0x2
8000281a:	2f f9       	sub	r9,-1
8000281c:	f0 09 03 26 	ld.w	r6,r8[r9<<0x2]
80002820:	ed dc d0 0f 	bfins	r6,r12,0x0,0xf
80002824:	f0 09 09 26 	st.w	r8[r9<<0x2],r6
			udd_udesc_rst_buf0_size(ep_num);
80002828:	f0 09 03 2c 	ld.w	r12,r8[r9<<0x2]
8000282c:	30 06       	mov	r6,0
8000282e:	f9 d6 d2 0f 	bfins	r12,r6,0x10,0xf
80002832:	f0 09 09 2c 	st.w	r8[r9<<0x2],r12

			// Link the user buffer directly on USB hardware DMA
			udd_udesc_set_buf0_addr(ep_num,
80002836:	6e 1c       	ld.w	r12,r7[0x4]
80002838:	6e 39       	ld.w	r9,r7[0xc]
8000283a:	f8 09 00 09 	add	r9,r12,r9
8000283e:	a5 6a       	lsl	r10,0x4
80002840:	14 08       	add	r8,r10
80002842:	91 09       	st.w	r8[0x0],r9
					&ptr_job->buf[ptr_job->nb_trans]);

			// Start transfer
			udd_ack_fifocon(ep_num);
80002844:	e0 30 ed e0 	sub	r0,126432
80002848:	e0 68 40 00 	mov	r8,16384
8000284c:	81 08       	st.w	r0[0x0],r8
			udd_disable_busy_bank0(ep_num);
8000284e:	fc 18 01 00 	movh	r8,0x100
80002852:	81 08       	st.w	r0[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002854:	e1 b8 00 00 	mfsr	r8,0x0
80002858:	50 18       	stdsp	sp[0x4],r8
	cpu_irq_disable();
8000285a:	d3 03       	ssrf	0x10

	return flags;
8000285c:	40 18       	lddsp	r8,sp[0x4]

			// Enable interrupt
			flags = cpu_irq_save();
			udd_enable_in_send_interrupt(ep_num);
8000285e:	30 19       	mov	r9,1
80002860:	97 09       	st.w	r11[0x0],r9
			udd_enable_endpoint_interrupt(ep_num);
80002862:	fe 69 10 00 	mov	r9,-126976
80002866:	93 64       	st.w	r9[0x18],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002868:	e6 18 00 01 	andh	r8,0x1,COH
8000286c:	c0 21       	brne	80002870 <udd_ep_trans_done+0x18c>
      cpu_irq_enable();
8000286e:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
80002870:	cb 58       	rjmp	800029da <udd_ep_trans_done+0x2f6>
		}
	} else {
		// Transfer complete on OUT
		nb_trans = udd_udesc_get_buf0_ctn(ep_num);
80002872:	f0 02 15 01 	lsl	r2,r8,0x1
80002876:	a3 78       	lsl	r8,0x3
80002878:	2f f8       	sub	r8,-1
8000287a:	4d b9       	lddpc	r9,800029e4 <udd_ep_trans_done+0x300>
8000287c:	f2 08 03 23 	ld.w	r3,r9[r8<<0x2]
80002880:	e7 d3 c0 0f 	bfextu	r3,r3,0x0,0xf

		// Lock reception of new OUT packet
		udd_enable_busy_bank0(ep_num);
80002884:	fe 6a 11 f0 	mov	r10,-126480
80002888:	e0 0a 00 0a 	add	r10,r0,r10
8000288c:	50 0a       	stdsp	sp[0x0],r10
8000288e:	fc 18 01 00 	movh	r8,0x100
80002892:	95 08       	st.w	r10[0x0],r8

		// Ack interrupt
		udd_ack_out_received(ep_num);
80002894:	fe 69 11 60 	mov	r9,-126624
80002898:	e0 09 00 08 	add	r8,r0,r9
8000289c:	30 29       	mov	r9,2
8000289e:	91 09       	st.w	r8[0x0],r9
		udd_ack_fifocon(ep_num);
800028a0:	e0 30 ed e0 	sub	r0,126432
800028a4:	e0 68 40 00 	mov	r8,16384
800028a8:	81 08       	st.w	r0[0x0],r8

		// Can be necessary to copy data receive from cache buffer to user buffer
		if (ptr_job->b_use_out_cache_buffer) {
800028aa:	6e 08       	ld.w	r8,r7[0x0]
800028ac:	e6 18 20 00 	andh	r8,0x2000,COH
800028b0:	c1 00       	breq	800028d0 <udd_ep_trans_done+0x1ec>
			memcpy(&ptr_job->buf[ptr_job->nb_trans],
800028b2:	6e 1c       	ld.w	r12,r7[0x4]
800028b4:	6e 39       	ld.w	r9,r7[0xc]
800028b6:	f7 d1 c0 10 	bfextu	r11,r1,0x0,0x10
800028ba:	6e 28       	ld.w	r8,r7[0x8]
800028bc:	f0 0b 0d 0a 	divu	r10,r8,r11
800028c0:	ea 08 15 06 	lsl	r8,r5,0x6
800028c4:	16 9a       	mov	r10,r11
800028c6:	4c 9b       	lddpc	r11,800029e8 <udd_ep_trans_done+0x304>
800028c8:	10 0b       	add	r11,r8
800028ca:	12 0c       	add	r12,r9
800028cc:	f0 1f 00 48 	mcall	800029ec <udd_ep_trans_done+0x308>
					udd_ep_out_cache_buffer[ep_num - 1],
					ptr_job->buf_size % ep_size);
		}

		// Update number of data transfered
		ptr_job->nb_trans += nb_trans;
800028d0:	6e 38       	ld.w	r8,r7[0xc]
800028d2:	e6 08 00 08 	add	r8,r3,r8
800028d6:	8f 38       	st.w	r7[0xc],r8
		if (ptr_job->nb_trans > ptr_job->buf_size) {
800028d8:	6e 29       	ld.w	r9,r7[0x8]
			ptr_job->nb_trans = ptr_job->buf_size;
800028da:	12 38       	cp.w	r8,r9
800028dc:	ef f9 ba 03 	st.whi	r7[0xc],r9
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
800028e0:	e4 09 15 02 	lsl	r9,r2,0x2
800028e4:	2f f9       	sub	r9,-1
800028e6:	4c 08       	lddpc	r8,800029e4 <udd_ep_trans_done+0x300>
800028e8:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800028ec:	f1 d8 c2 0f 	bfextu	r8,r8,0x10,0xf
800028f0:	e6 08 19 00 	cp.h	r8,r3
800028f4:	c6 71       	brne	800029c2 <udd_ep_trans_done+0x2de>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
800028f6:	6e 38       	ld.w	r8,r7[0xc]
800028f8:	6e 29       	ld.w	r9,r7[0x8]
			ptr_job->nb_trans = ptr_job->buf_size;
		}

		// If all previous data requested are received and user buffer not full
		// then need to receive other data
		if ((nb_trans == udd_udesc_get_buf0_size(ep_num))
800028fa:	12 38       	cp.w	r8,r9
800028fc:	c6 30       	breq	800029c2 <udd_ep_trans_done+0x2de>
			&& (ptr_job->nb_trans != ptr_job->buf_size)) {
			next_trans = ptr_job->buf_size - ptr_job->nb_trans;
800028fe:	f2 08 01 08 	sub	r8,r9,r8
80002902:	5c 88       	casts.h	r8
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80002904:	30 09       	mov	r9,0
80002906:	f2 08 19 00 	cp.h	r8,r9
8000290a:	c0 c4       	brge	80002922 <udd_ep_trans_done+0x23e>
				// The USB hardware support a maximum transfer size
				// of UDD_ENDPOINT_MAX_TRANS Bytes
				next_trans = UDD_ENDPOINT_MAX_TRANS
8000290c:	f3 d1 c0 10 	bfextu	r9,r1,0x0,0x10
80002910:	e0 68 7f ff 	mov	r8,32767
80002914:	f0 09 0c 08 	divs	r8,r8,r9
80002918:	e0 68 7f ff 	mov	r8,32767
8000291c:	12 18       	sub	r8,r9
8000291e:	5c 88       	casts.h	r8
80002920:	c0 98       	rjmp	80002932 <udd_ep_trans_done+0x24e>
						- (UDD_ENDPOINT_MAX_TRANS % ep_size);
			} else {
				next_trans -= next_trans % ep_size;
80002922:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80002926:	f7 d1 c0 10 	bfextu	r11,r1,0x0,0x10
8000292a:	f2 0b 0d 0a 	divu	r10,r9,r11
8000292e:	16 18       	sub	r8,r11
80002930:	5c 88       	casts.h	r8
			}

			udd_udesc_rst_buf0_ctn(ep_num);
80002932:	4a d9       	lddpc	r9,800029e4 <udd_ep_trans_done+0x300>
80002934:	e4 0a 15 02 	lsl	r10,r2,0x2
80002938:	2f fa       	sub	r10,-1
8000293a:	f2 0a 03 2b 	ld.w	r11,r9[r10<<0x2]
8000293e:	30 0c       	mov	r12,0
80002940:	f7 dc d0 0f 	bfins	r11,r12,0x0,0xf
80002944:	f2 0a 09 2b 	st.w	r9[r10<<0x2],r11
			if (next_trans < ep_size) {
80002948:	e2 08 19 00 	cp.h	r8,r1
8000294c:	c1 72       	brcc	8000297a <udd_ep_trans_done+0x296>
				// Use the cache buffer for Bulk or Interrupt size endpoint
				ptr_job->b_use_out_cache_buffer = true;
8000294e:	6e 08       	ld.w	r8,r7[0x0]
80002950:	30 19       	mov	r9,1
80002952:	f1 d9 d3 a1 	bfins	r8,r9,0x1d,0x1
80002956:	8f 08       	st.w	r7[0x0],r8
				udd_udesc_set_buf0_addr(ep_num,
80002958:	a7 65       	lsl	r5,0x6
8000295a:	4a 48       	lddpc	r8,800029e8 <udd_ep_trans_done+0x304>
8000295c:	10 05       	add	r5,r8
8000295e:	4a 28       	lddpc	r8,800029e4 <udd_ep_trans_done+0x300>
80002960:	e4 09 15 04 	lsl	r9,r2,0x4
80002964:	f0 09 00 09 	add	r9,r8,r9
80002968:	93 05       	st.w	r9[0x0],r5
						udd_ep_out_cache_buffer[ep_num-1]);
				udd_udesc_set_buf0_size(ep_num, ep_size);
8000296a:	14 92       	mov	r2,r10
8000296c:	f0 0a 03 29 	ld.w	r9,r8[r10<<0x2]
80002970:	f3 d1 d2 0f 	bfins	r9,r1,0x10,0xf
80002974:	f0 0a 09 29 	st.w	r8[r10<<0x2],r9
80002978:	c1 28       	rjmp	8000299c <udd_ep_trans_done+0x2b8>
			} else {
				// Link the user buffer directly on USB hardware DMA
				udd_udesc_set_buf0_addr(ep_num, &ptr_job->buf[ptr_job->nb_trans]);
8000297a:	6e 1b       	ld.w	r11,r7[0x4]
8000297c:	6e 39       	ld.w	r9,r7[0xc]
8000297e:	12 0b       	add	r11,r9
80002980:	49 99       	lddpc	r9,800029e4 <udd_ep_trans_done+0x300>
80002982:	e4 0a 15 04 	lsl	r10,r2,0x4
80002986:	f2 0a 00 0a 	add	r10,r9,r10
8000298a:	95 0b       	st.w	r10[0x0],r11
				udd_udesc_set_buf0_size(ep_num, next_trans);
8000298c:	a3 62       	lsl	r2,0x2
8000298e:	2f f2       	sub	r2,-1
80002990:	f2 02 03 2a 	ld.w	r10,r9[r2<<0x2]
80002994:	f5 d8 d2 0f 	bfins	r10,r8,0x10,0xf
80002998:	f2 02 09 2a 	st.w	r9[r2<<0x2],r10
			}
			// Start transfer
			udd_disable_busy_bank0(ep_num);
8000299c:	fc 18 01 00 	movh	r8,0x100
800029a0:	81 08       	st.w	r0[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800029a2:	e1 b8 00 00 	mfsr	r8,0x0
800029a6:	50 18       	stdsp	sp[0x4],r8
	cpu_irq_disable();
800029a8:	d3 03       	ssrf	0x10

	return flags;
800029aa:	40 18       	lddsp	r8,sp[0x4]

			// Enable interrupt
			flags = cpu_irq_save();
			udd_enable_out_received_interrupt(ep_num);
800029ac:	30 29       	mov	r9,2
800029ae:	40 0c       	lddsp	r12,sp[0x0]
800029b0:	99 09       	st.w	r12[0x0],r9
			udd_enable_endpoint_interrupt(ep_num);
800029b2:	fe 69 10 00 	mov	r9,-126976
800029b6:	93 64       	st.w	r9[0x18],r4
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800029b8:	e6 18 00 01 	andh	r8,0x1,COH
800029bc:	c0 21       	brne	800029c0 <udd_ep_trans_done+0x2dc>
      cpu_irq_enable();
800029be:	d5 03       	csrf	0x10
			cpu_irq_restore(flags);
			return;
800029c0:	c0 d8       	rjmp	800029da <udd_ep_trans_done+0x2f6>
		}
	}

	// Job complete then call callback
	ptr_job->busy = false;
800029c2:	6e 08       	ld.w	r8,r7[0x0]
800029c4:	30 09       	mov	r9,0
800029c6:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
800029ca:	8f 08       	st.w	r7[0x0],r8
	if (NULL != ptr_job->call_trans) {
800029cc:	6e 48       	ld.w	r8,r7[0x10]
800029ce:	58 08       	cp.w	r8,0
800029d0:	c0 50       	breq	800029da <udd_ep_trans_done+0x2f6>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
800029d2:	0c 9a       	mov	r10,r6
800029d4:	6e 3b       	ld.w	r11,r7[0xc]
800029d6:	12 9c       	mov	r12,r9
800029d8:	5d 18       	icall	r8
	}
	return;
}
800029da:	2f ed       	sub	sp,-8
800029dc:	d8 32       	popm	r0-r7,pc
800029de:	00 00       	add	r0,r0
800029e0:	00 00       	add	r0,r0
800029e2:	05 e4       	ld.ub	r4,r2[0x6]
800029e4:	00 00       	add	r0,r0
800029e6:	06 20       	rsub	r0,r3
800029e8:	00 00       	add	r0,r0
800029ea:	0a 0c       	add	r12,r5
800029ec:	80 00       	ld.sh	r0,r0[0x0]
800029ee:	46 ec       	lddsp	r12,sp[0x1b8]

800029f0 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
800029f0:	eb cd 40 f8 	pushm	r3-r7,lr
800029f4:	20 1d       	sub	sp,4
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
800029f6:	fd dc c0 04 	bfextu	lr,r12,0x0,0x4
	if (USB_DEVICE_MAX_EP < ep_num) {
800029fa:	30 37       	mov	r7,3
800029fc:	ee 0e 18 00 	cp.b	lr,r7
80002a00:	e0 8b 00 6b 	brhi	80002ad6 <udd_ep_run+0xe6>
		return false;
	}
	if ((!Is_udd_endpoint_enabled(ep_num))
80002a04:	fe 67 10 00 	mov	r7,-126976
80002a08:	6e 76       	ld.w	r6,r7[0x1c]
80002a0a:	1c 95       	mov	r5,lr
80002a0c:	30 17       	mov	r7,1
80002a0e:	ee 0e 09 47 	lsl	r7,r7,lr
80002a12:	0c 67       	and	r7,r6
80002a14:	c6 10       	breq	80002ad6 <udd_ep_run+0xe6>
			|| Is_udd_endpoint_stall_requested(ep_num)) {
80002a16:	fc 07 15 02 	lsl	r7,lr,0x2
80002a1a:	fe 64 11 c0 	mov	r4,-126528
80002a1e:	ee 04 00 06 	add	r6,r7,r4
80002a22:	6c 06       	ld.w	r6,r6[0x0]

	ep_num = ep & USB_EP_ADDR_MASK;
	if (USB_DEVICE_MAX_EP < ep_num) {
		return false;
	}
	if ((!Is_udd_endpoint_enabled(ep_num))
80002a24:	e6 16 00 08 	andh	r6,0x8,COH
80002a28:	c5 71       	brne	80002ad6 <udd_ep_run+0xe6>
			|| Is_udd_endpoint_stall_requested(ep_num)) {
		return false; // Endpoint is halted
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep_num - 1];
80002a2a:	20 1e       	sub	lr,1
80002a2c:	fc 0e 00 2e 	add	lr,lr,lr<<0x2
80002a30:	4a c6       	lddpc	r6,80002ae0 <udd_ep_run+0xf0>
80002a32:	ec 0e 00 2e 	add	lr,r6,lr<<0x2

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002a36:	e1 b6 00 00 	mfsr	r6,0x0
80002a3a:	50 06       	stdsp	sp[0x0],r6
	cpu_irq_disable();
80002a3c:	d3 03       	ssrf	0x10

	return flags;
80002a3e:	40 04       	lddsp	r4,sp[0x0]

	flags = cpu_irq_save();
	if (ptr_job->busy == true) {
80002a40:	7c 06       	ld.w	r6,lr[0x0]
80002a42:	58 06       	cp.w	r6,0
80002a44:	c0 74       	brge	80002a52 <udd_ep_run+0x62>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002a46:	e6 14 00 01 	andh	r4,0x1,COH
80002a4a:	c0 21       	brne	80002a4e <udd_ep_run+0x5e>
      cpu_irq_enable();
80002a4c:	d5 03       	csrf	0x10
   }

	barrier();
80002a4e:	30 0c       	mov	r12,0
		cpu_irq_restore(flags);
		return false; // Job already on going
80002a50:	c4 48       	rjmp	80002ad8 <udd_ep_run+0xe8>
	}
	ptr_job->busy = true;
80002a52:	7c 06       	ld.w	r6,lr[0x0]
80002a54:	30 13       	mov	r3,1
80002a56:	ed d3 d3 e1 	bfins	r6,r3,0x1f,0x1
80002a5a:	9d 06       	st.w	lr[0x0],r6
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002a5c:	e6 14 00 01 	andh	r4,0x1,COH
80002a60:	c0 21       	brne	80002a64 <udd_ep_run+0x74>
      cpu_irq_enable();
80002a62:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80002a64:	9d 1a       	st.w	lr[0x4],r10
	ptr_job->buf_size = buf_size;
80002a66:	9d 29       	st.w	lr[0x8],r9
	ptr_job->nb_trans = 0;
80002a68:	30 0a       	mov	r10,0
80002a6a:	9d 3a       	st.w	lr[0xc],r10
	ptr_job->call_trans = callback;
80002a6c:	9d 48       	st.w	lr[0x10],r8
	ptr_job->b_shortpacket = b_shortpacket;
80002a6e:	7c 08       	ld.w	r8,lr[0x0]
80002a70:	f1 db d3 c1 	bfins	r8,r11,0x1e,0x1
	ptr_job->b_use_out_cache_buffer = false;
80002a74:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80002a78:	9d 08       	st.w	lr[0x0],r8

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
80002a7a:	f4 0c 18 00 	cp.b	r12,r10
80002a7e:	c1 85       	brlt	80002aae <udd_ep_run+0xbe>
			&& (AVR32_USBC_PTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
80002a80:	e0 37 ef 00 	sub	r7,126720
80002a84:	6e 08       	ld.w	r8,r7[0x0]
	ptr_job->nb_trans = 0;
	ptr_job->call_trans = callback;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->b_use_out_cache_buffer = false;

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
80002a86:	f1 d8 c1 62 	bfextu	r8,r8,0xb,0x2
80002a8a:	58 18       	cp.w	r8,1
80002a8c:	c1 11       	brne	80002aae <udd_ep_run+0xbe>
			&& (AVR32_USBC_PTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
			&& (0 != (buf_size % udd_get_endpoint_size(ep_num)))) {
80002a8e:	6e 08       	ld.w	r8,r7[0x0]
	ptr_job->nb_trans = 0;
	ptr_job->call_trans = callback;
	ptr_job->b_shortpacket = b_shortpacket;
	ptr_job->b_use_out_cache_buffer = false;

	if ( (USB_EP_DIR_IN != (ep & USB_EP_DIR_IN))
80002a90:	f1 d8 c0 83 	bfextu	r8,r8,0x4,0x3
80002a94:	30 8a       	mov	r10,8
80002a96:	f4 08 09 48 	lsl	r8,r10,r8
80002a9a:	20 18       	sub	r8,1
80002a9c:	f1 e9 00 09 	and	r9,r8,r9
80002aa0:	c0 70       	breq	80002aae <udd_ep_run+0xbe>
			&& (AVR32_USBC_PTYPE_ISOCHRONOUS == udd_get_endpoint_type(ep_num))
			&& (0 != (buf_size % udd_get_endpoint_size(ep_num)))) {
		// The user must use a buffer size modulo endpoint size
		// for an isochronous IN endpoint
		ptr_job->busy = false;
80002aa2:	7c 08       	ld.w	r8,lr[0x0]
80002aa4:	30 0c       	mov	r12,0
80002aa6:	f1 dc d3 e1 	bfins	r8,r12,0x1f,0x1
80002aaa:	9d 08       	st.w	lr[0x0],r8
		return false;
80002aac:	c1 68       	rjmp	80002ad8 <udd_ep_run+0xe8>
	}

	// Initialize value to simulate a empty transfer
	udd_udesc_rst_buf0_ctn(ep_num);
80002aae:	48 e8       	lddpc	r8,80002ae4 <udd_ep_run+0xf4>
80002ab0:	a3 75       	lsl	r5,0x3
80002ab2:	2f f5       	sub	r5,-1
80002ab4:	f0 05 03 29 	ld.w	r9,r8[r5<<0x2]
80002ab8:	30 0a       	mov	r10,0
80002aba:	f3 da d0 0f 	bfins	r9,r10,0x0,0xf
80002abe:	f0 05 09 29 	st.w	r8[r5<<0x2],r9
	udd_udesc_rst_buf0_size(ep_num);
80002ac2:	f0 05 03 29 	ld.w	r9,r8[r5<<0x2]
80002ac6:	f3 da d2 0f 	bfins	r9,r10,0x10,0xf
80002aca:	f0 05 09 29 	st.w	r8[r5<<0x2],r9

	// Request next transfer
	udd_ep_trans_done(ep);
80002ace:	f0 1f 00 07 	mcall	80002ae8 <udd_ep_run+0xf8>
80002ad2:	30 1c       	mov	r12,1
	return true;
80002ad4:	c0 28       	rjmp	80002ad8 <udd_ep_run+0xe8>
80002ad6:	30 0c       	mov	r12,0
}
80002ad8:	2f fd       	sub	sp,-4
80002ada:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80002ade:	00 00       	add	r0,r0
80002ae0:	00 00       	add	r0,r0
80002ae2:	05 e4       	ld.ub	r4,r2[0x6]
80002ae4:	00 00       	add	r0,r0
80002ae6:	06 20       	rsub	r0,r3
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	26 e4       	sub	r4,110

80002aec <udd_ctrl_in_sent>:
	}
}


static void udd_ctrl_in_sent(void)
{
80002aec:	eb cd 40 e0 	pushm	r5-r7,lr
80002af0:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002af2:	e1 b8 00 00 	mfsr	r8,0x0
80002af6:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002af8:	d3 03       	ssrf	0x10

	return flags;
80002afa:	40 08       	lddsp	r8,sp[0x0]
	static bool b_shortpacket = false;
	uint16_t nb_remain;
	irqflags_t flags;

	flags = cpu_irq_save();
	udd_disable_in_send_interrupt(0);
80002afc:	30 1a       	mov	r10,1
80002afe:	fe 69 12 20 	mov	r9,-126432
80002b02:	93 0a       	st.w	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002b04:	e6 18 00 01 	andh	r8,0x1,COH
80002b08:	c0 21       	brne	80002b0c <udd_ctrl_in_sent+0x20>
      cpu_irq_enable();
80002b0a:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80002b0c:	4c 08       	lddpc	r8,80002c0c <udd_ctrl_in_sent+0x120>
80002b0e:	70 08       	ld.w	r8,r8[0x0]
80002b10:	58 38       	cp.w	r8,3
80002b12:	c0 61       	brne	80002b1e <udd_ctrl_in_sent+0x32>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80002b14:	f0 1f 00 3f 	mcall	80002c10 <udd_ctrl_in_sent+0x124>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002b18:	f0 1f 00 3f 	mcall	80002c14 <udd_ctrl_in_sent+0x128>
		return;
80002b1c:	c7 58       	rjmp	80002c06 <udd_ctrl_in_sent+0x11a>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
80002b1e:	4b f8       	lddpc	r8,80002c18 <udd_ctrl_in_sent+0x12c>
80002b20:	90 08       	ld.sh	r8,r8[0x0]
80002b22:	4b f9       	lddpc	r9,80002c1c <udd_ctrl_in_sent+0x130>
80002b24:	92 67       	ld.sh	r7,r9[0xc]
80002b26:	10 17       	sub	r7,r8
80002b28:	5c 87       	casts.h	r7
	if (0 == nb_remain) {
80002b2a:	c3 11       	brne	80002b8c <udd_ctrl_in_sent+0xa0>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80002b2c:	4b d9       	lddpc	r9,80002c20 <udd_ctrl_in_sent+0x134>
80002b2e:	92 0a       	ld.sh	r10,r9[0x0]
80002b30:	f4 08 00 08 	add	r8,r10,r8
80002b34:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80002b36:	4b a9       	lddpc	r9,80002c1c <udd_ctrl_in_sent+0x130>
80002b38:	92 39       	ld.sh	r9,r9[0x6]
80002b3a:	f0 09 19 00 	cp.h	r9,r8
80002b3e:	c0 70       	breq	80002b4c <udd_ctrl_in_sent+0x60>
80002b40:	4b 98       	lddpc	r8,80002c24 <udd_ctrl_in_sent+0x138>
80002b42:	11 89       	ld.ub	r9,r8[0x0]
80002b44:	30 08       	mov	r8,0
80002b46:	f0 09 18 00 	cp.b	r9,r8
80002b4a:	c1 60       	breq	80002b76 <udd_ctrl_in_sent+0x8a>

static void udd_ctrl_send_zlp_out(void)
{
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002b4c:	30 49       	mov	r9,4
80002b4e:	4b 08       	lddpc	r8,80002c0c <udd_ctrl_in_sent+0x120>
80002b50:	91 09       	st.w	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002b52:	e1 b8 00 00 	mfsr	r8,0x0
80002b56:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002b58:	d3 03       	ssrf	0x10

	return flags;
80002b5a:	40 09       	lddsp	r9,sp[0x0]

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
	udd_ack_nak_in(0);
80002b5c:	31 08       	mov	r8,16
80002b5e:	fe 6a 11 60 	mov	r10,-126624
80002b62:	95 08       	st.w	r10[0x0],r8
	udd_enable_nak_in_interrupt(0);
80002b64:	fe 6a 11 f0 	mov	r10,-126480
80002b68:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002b6a:	12 98       	mov	r8,r9
80002b6c:	e6 18 00 01 	andh	r8,0x1,COH
80002b70:	c0 21       	brne	80002b74 <udd_ctrl_in_sent+0x88>
      cpu_irq_enable();
80002b72:	d5 03       	csrf	0x10
				|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
			return;
80002b74:	c4 98       	rjmp	80002c06 <udd_ctrl_in_sent+0x11a>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
80002b76:	4a a8       	lddpc	r8,80002c1c <udd_ctrl_in_sent+0x130>
80002b78:	70 5c       	ld.w	r12,r8[0x14]
80002b7a:	58 0c       	cp.w	r12,0
80002b7c:	c1 20       	breq	80002ba0 <udd_ctrl_in_sent+0xb4>
80002b7e:	5d 1c       	icall	r12
80002b80:	c1 00       	breq	80002ba0 <udd_ctrl_in_sent+0xb4>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0, this allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
80002b82:	30 09       	mov	r9,0
80002b84:	4a 58       	lddpc	r8,80002c18 <udd_ctrl_in_sent+0x12c>
80002b86:	b0 09       	st.h	r8[0x0],r9
			nb_remain = udd_g_ctrlreq.payload_size;
80002b88:	4a 58       	lddpc	r8,80002c1c <udd_ctrl_in_sent+0x130>
80002b8a:	90 67       	ld.sh	r7,r8[0xc]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
80002b8c:	33 f8       	mov	r8,63
80002b8e:	f0 07 19 00 	cp.h	r7,r8
80002b92:	e0 88 00 07 	brls	80002ba0 <udd_ctrl_in_sent+0xb4>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
		b_shortpacket = false;
80002b96:	30 09       	mov	r9,0
80002b98:	4a 38       	lddpc	r8,80002c24 <udd_ctrl_in_sent+0x138>
80002b9a:	b0 89       	st.b	r8[0x0],r9
80002b9c:	34 07       	mov	r7,64
80002b9e:	c0 48       	rjmp	80002ba6 <udd_ctrl_in_sent+0xba>
	} else {
		b_shortpacket = true;
80002ba0:	30 19       	mov	r9,1
80002ba2:	4a 18       	lddpc	r8,80002c24 <udd_ctrl_in_sent+0x138>
80002ba4:	b0 89       	st.b	r8[0x0],r9

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ba6:	e1 b8 00 00 	mfsr	r8,0x0
80002baa:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002bac:	d3 03       	ssrf	0x10

	return flags;
80002bae:	40 06       	lddsp	r6,sp[0x0]
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
	if (Is_udd_out_received(0)) {
80002bb0:	fe 68 11 30 	mov	r8,-126672
80002bb4:	70 08       	ld.w	r8,r8[0x0]
80002bb6:	e2 18 00 02 	andl	r8,0x2,COH
80002bba:	c0 90       	breq	80002bcc <udd_ctrl_in_sent+0xe0>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002bbc:	e6 16 00 01 	andh	r6,0x1,COH
80002bc0:	c0 21       	brne	80002bc4 <udd_ctrl_in_sent+0xd8>
      cpu_irq_enable();
80002bc2:	d5 03       	csrf	0x10
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80002bc4:	30 49       	mov	r9,4
80002bc6:	49 28       	lddpc	r8,80002c0c <udd_ctrl_in_sent+0x120>
80002bc8:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
80002bca:	c1 e8       	rjmp	80002c06 <udd_ctrl_in_sent+0x11a>
	}
	// Write quickly the IN data
	memcpy(udd_ctrl_buffer,
80002bcc:	49 35       	lddpc	r5,80002c18 <udd_ctrl_in_sent+0x12c>
80002bce:	8a 88       	ld.uh	r8,r5[0x0]
80002bd0:	49 39       	lddpc	r9,80002c1c <udd_ctrl_in_sent+0x130>
80002bd2:	72 2b       	ld.w	r11,r9[0x8]
80002bd4:	0e 9a       	mov	r10,r7
80002bd6:	5c 7a       	castu.h	r10
80002bd8:	10 0b       	add	r11,r8
80002bda:	49 4c       	lddpc	r12,80002c28 <udd_ctrl_in_sent+0x13c>
80002bdc:	f0 1f 00 14 	mcall	80002c2c <udd_ctrl_in_sent+0x140>
			udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,
			nb_remain);
	udd_ctrl_payload_nb_trans += nb_remain;
80002be0:	8a 08       	ld.sh	r8,r5[0x0]
80002be2:	0e 08       	add	r8,r7
80002be4:	aa 08       	st.h	r5[0x0],r8
	udd_udesc_set_buf0_ctn(0, nb_remain);
80002be6:	49 38       	lddpc	r8,80002c30 <udd_ctrl_in_sent+0x144>
80002be8:	70 19       	ld.w	r9,r8[0x4]
80002bea:	f3 d7 d0 0f 	bfins	r9,r7,0x0,0xf
80002bee:	91 19       	st.w	r8[0x4],r9

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80002bf0:	30 18       	mov	r8,1
80002bf2:	fe 69 11 60 	mov	r9,-126624
80002bf6:	93 08       	st.w	r9[0x0],r8
	udd_enable_in_send_interrupt(0);
80002bf8:	fe 69 11 f0 	mov	r9,-126480
80002bfc:	93 08       	st.w	r9[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002bfe:	e6 16 00 01 	andh	r6,0x1,COH
80002c02:	c0 21       	brne	80002c06 <udd_ctrl_in_sent+0x11a>
      cpu_irq_enable();
80002c04:	d5 03       	csrf	0x10

	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
}
80002c06:	2f fd       	sub	sp,-4
80002c08:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80002c0c:	00 00       	add	r0,r0
80002c0e:	06 a4       	st.w	r3++,r4
80002c10:	80 00       	ld.sh	r0,r0[0x0]
80002c12:	24 a0       	sub	r0,74
80002c14:	80 00       	ld.sh	r0,r0[0x0]
80002c16:	24 60       	sub	r0,70
80002c18:	00 00       	add	r0,r0
80002c1a:	06 a2       	st.w	r3++,r2
80002c1c:	00 00       	add	r0,r0
80002c1e:	0a cc       	st.b	r5++,r12
80002c20:	00 00       	add	r0,r0
80002c22:	05 e2       	ld.ub	r2,r2[0x6]
80002c24:	00 00       	add	r0,r0
80002c26:	05 e0       	ld.ub	r0,r2[0x6]
80002c28:	00 00       	add	r0,r0
80002c2a:	0a e4       	st.h	--r5,r4
80002c2c:	80 00       	ld.sh	r0,r0[0x0]
80002c2e:	46 ec       	lddsp	r12,sp[0x1b8]
80002c30:	00 00       	add	r0,r0
80002c32:	06 20       	rsub	r0,r3

80002c34 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80002c34:	eb cd 40 e0 	pushm	r5-r7,lr
	uint8_t ep_addr = ep & USB_EP_ADDR_MASK;
80002c38:	f3 dc c0 04 	bfextu	r9,r12,0x0,0x4
	if (Is_udd_endpoint_enabled(ep_addr)) {
80002c3c:	fe 68 10 00 	mov	r8,-126976
80002c40:	70 7e       	ld.w	lr,r8[0x1c]
80002c42:	30 18       	mov	r8,1
80002c44:	f0 09 09 48 	lsl	r8,r8,r9
80002c48:	f1 ee 00 0e 	and	lr,r8,lr
80002c4c:	c0 30       	breq	80002c52 <udd_ep_alloc+0x1e>
80002c4e:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
	// Check endpoint type
	Assert(((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_ISOCHRONOUS)
			|| ((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_BULK)
			|| ((bmAttributes & USB_EP_TYPE_MASK) == USB_EP_TYPE_INTERRUPT));

	udd_configure_endpoint(ep_addr, bmAttributes,
80002c52:	a3 69       	lsl	r9,0x2
80002c54:	fe 67 11 00 	mov	r7,-126720
80002c58:	f2 07 00 0e 	add	lr,r9,r7
80002c5c:	7c 06       	ld.w	r6,lr[0x0]
80002c5e:	30 07       	mov	r7,0
80002c60:	e0 65 01 00 	mov	r5,256
80002c64:	f8 07 18 00 	cp.b	r7,r12
80002c68:	ea 07 17 90 	movgt	r7,r5
80002c6c:	f9 b7 0a 00 	movle	r7,0
80002c70:	5c 7a       	castu.h	r10
80002c72:	30 8c       	mov	r12,8
80002c74:	f4 0c 0c 4c 	max	r12,r10,r12
80002c78:	e0 65 04 00 	mov	r5,1024
80002c7c:	f8 05 0d 4c 	min	r12,r12,r5
80002c80:	a1 7c       	lsl	r12,0x1
80002c82:	58 1c       	cp.w	r12,1
80002c84:	c0 31       	brne	80002c8a <udd_ep_alloc+0x56>
80002c86:	3c 0a       	mov	r10,-64
80002c88:	c0 f8       	rjmp	80002ca6 <udd_ep_alloc+0x72>
80002c8a:	30 8c       	mov	r12,8
80002c8c:	f4 0c 0c 4a 	max	r10,r10,r12
80002c90:	e0 6c 04 00 	mov	r12,1024
80002c94:	f4 0c 0d 4a 	min	r10,r10,r12
80002c98:	a1 7a       	lsl	r10,0x1
80002c9a:	20 1a       	sub	r10,1
80002c9c:	f4 0a 12 00 	clz	r10,r10
80002ca0:	f4 0a 11 1c 	rsub	r10,r10,28
80002ca4:	a5 6a       	lsl	r10,0x4
80002ca6:	ab 7b       	lsl	r11,0xb
80002ca8:	e2 1b 18 00 	andl	r11,0x1800,COH
80002cac:	ef eb 10 0c 	or	r12,r7,r11
80002cb0:	14 4c       	or	r12,r10
80002cb2:	e2 1c 19 74 	andl	r12,0x1974,COH
80002cb6:	0c 9a       	mov	r10,r6
80002cb8:	e0 1a e6 8b 	andl	r10,0xe68b
80002cbc:	f9 ea 10 0a 	or	r10,r12,r10
80002cc0:	9d 0a       	st.w	lr[0x0],r10
			((ep & USB_EP_DIR_IN) ? 1 : 0),
			MaxEndpointSize, AVR32_USBC_UECFG0_EPBK_SINGLE);

	udd_enable_busy_bank0(ep_addr);
80002cc2:	e0 39 ee 10 	sub	r9,126480
80002cc6:	fc 1a 01 00 	movh	r10,0x100
80002cca:	93 0a       	st.w	r9[0x0],r10
	udd_enable_endpoint(ep_addr);
80002ccc:	fe 69 10 00 	mov	r9,-126976
80002cd0:	72 7a       	ld.w	r10,r9[0x1c]
80002cd2:	14 48       	or	r8,r10
80002cd4:	93 78       	st.w	r9[0x1c],r8
80002cd6:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80002cda:	d7 03       	nop

80002cdc <udd_enable>:
#endif
}


void udd_enable(void)
{
80002cdc:	eb cd 40 c0 	pushm	r6-r7,lr
80002ce0:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002ce2:	e1 b8 00 00 	mfsr	r8,0x0
80002ce6:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002ce8:	d3 03       	ssrf	0x10

	return flags;
80002cea:	40 06       	lddsp	r6,sp[0x0]
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80002cec:	f0 1f 00 3c 	mcall	80002ddc <udd_enable+0x100>

	// Here, only the device mode is possible,
	// USBC interrupt is linked to UDD interrupt
	irq_register_handler(
80002cf0:	30 0a       	mov	r10,0
80002cf2:	e0 6b 01 00 	mov	r11,256
80002cf6:	4b bc       	lddpc	r12,80002de0 <udd_enable+0x104>
80002cf8:	f0 1f 00 3b 	mcall	80002de4 <udd_enable+0x108>
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
80002cfc:	fe 78 04 00 	mov	r8,-64512
80002d00:	f0 f9 01 88 	ld.w	r9,r8[392]
80002d04:	a1 a9       	sbr	r9,0x0
80002d06:	f1 49 01 88 	st.w	r8[392],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
#else
	// ID pin not used then force device mode
	otg_disable_id_pin();
80002d0a:	fe 68 18 00 	mov	r8,-124928
80002d0e:	70 09       	ld.w	r9,r8[0x0]
80002d10:	b9 c9       	cbr	r9,0x18
80002d12:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
80002d14:	70 09       	ld.w	r9,r8[0x0]
80002d16:	b9 b9       	sbr	r9,0x19
80002d18:	91 09       	st.w	r8[0x0],r9
#endif

	// Enable USB hardware
	otg_enable_pad();
80002d1a:	70 09       	ld.w	r9,r8[0x0]
80002d1c:	ad a9       	sbr	r9,0xc
80002d1e:	91 09       	st.w	r8[0x0],r9
	otg_enable();
80002d20:	70 09       	ld.w	r9,r8[0x0]
80002d22:	af b9       	sbr	r9,0xf
80002d24:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
80002d26:	70 09       	ld.w	r9,r8[0x0]
80002d28:	af c9       	cbr	r9,0xe
80002d2a:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
80002d2c:	70 08       	ld.w	r8,r8[0x0]

	memset((uint8_t *) udd_g_ep_table, 0, sizeof(udd_g_ep_table));
80002d2e:	4a f7       	lddpc	r7,80002de8 <udd_enable+0x10c>
80002d30:	e0 6a 00 80 	mov	r10,128
80002d34:	30 0b       	mov	r11,0
80002d36:	0e 9c       	mov	r12,r7
80002d38:	f0 1f 00 2d 	mcall	80002dec <udd_enable+0x110>
	otg_register_desc_tab(udd_g_ep_table);
80002d3c:	fe 68 10 00 	mov	r8,-126976
80002d40:	f0 f9 08 30 	ld.w	r9,r8[2096]
80002d44:	f1 47 08 30 	st.w	r8[2096],r7
	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	{
		uint8_t i;
		for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
			udd_ep_job[i].busy = false;
80002d48:	4a a9       	lddpc	r9,80002df0 <udd_enable+0x114>
80002d4a:	72 0b       	ld.w	r11,r9[0x0]
80002d4c:	30 0a       	mov	r10,0
80002d4e:	f7 da d3 e1 	bfins	r11,r10,0x1f,0x1
80002d52:	93 0b       	st.w	r9[0x0],r11
80002d54:	72 5b       	ld.w	r11,r9[0x14]
80002d56:	f7 da d3 e1 	bfins	r11,r10,0x1f,0x1
80002d5a:	93 5b       	st.w	r9[0x14],r11
80002d5c:	72 ab       	ld.w	r11,r9[0x28]
80002d5e:	f7 da d3 e1 	bfins	r11,r10,0x1f,0x1
80002d62:	93 ab       	st.w	r9[0x28],r11

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80002d64:	70 09       	ld.w	r9,r8[0x0]
80002d66:	ad c9       	cbr	r9,0xc
80002d68:	91 09       	st.w	r8[0x0],r9
#   ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#   else
	udd_high_speed_disable();
80002d6a:	70 09       	ld.w	r9,r8[0x0]
80002d6c:	e8 19 0c 00 	orl	r9,0xc00
80002d70:	91 09       	st.w	r8[0x0],r9
#   endif
#endif
	otg_ack_vbus_transition();
80002d72:	30 29       	mov	r9,2
80002d74:	fe 68 18 08 	mov	r8,-124920
80002d78:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80002d7a:	fe 68 18 04 	mov	r8,-124924
80002d7e:	70 08       	ld.w	r8,r8[0x0]
80002d80:	e2 18 08 00 	andl	r8,0x800,COH
80002d84:	c0 40       	breq	80002d8c <udd_enable+0xb0>
		otg_raise_vbus_transition();
80002d86:	fe 68 18 0c 	mov	r8,-124916
80002d8a:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80002d8c:	fe 68 18 00 	mov	r8,-124928
80002d90:	70 09       	ld.w	r9,r8[0x0]
80002d92:	a1 b9       	sbr	r9,0x1
80002d94:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80002d96:	70 09       	ld.w	r9,r8[0x0]
80002d98:	af a9       	sbr	r9,0xe
80002d9a:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80002d9c:	30 09       	mov	r9,0
80002d9e:	49 68       	lddpc	r8,80002df4 <udd_enable+0x118>
80002da0:	b0 89       	st.b	r8[0x0],r9
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
80002da2:	49 68       	lddpc	r8,80002df8 <udd_enable+0x11c>
80002da4:	11 c9       	ld.ub	r9,r8[0x4]
80002da6:	3f f8       	mov	r8,-1
80002da8:	f0 09 18 00 	cp.b	r9,r8
80002dac:	c0 21       	brne	80002db0 <udd_enable+0xd4>
80002dae:	c0 08       	rjmp	80002dae <udd_enable+0xd2>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002db0:	e1 b8 00 00 	mfsr	r8,0x0
80002db4:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80002db6:	d3 03       	ssrf	0x10

	return flags;
80002db8:	40 09       	lddsp	r9,sp[0x0]
	}

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
80002dba:	49 08       	lddpc	r8,80002df8 <udd_enable+0x11c>
80002dbc:	11 ca       	ld.ub	r10,r8[0x4]
80002dbe:	2f fa       	sub	r10,-1
80002dc0:	b0 ca       	st.b	r8[0x4],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002dc2:	12 98       	mov	r8,r9
80002dc4:	e6 18 00 01 	andh	r8,0x1,COH
80002dc8:	c0 21       	brne	80002dcc <udd_enable+0xf0>
      cpu_irq_enable();
80002dca:	d5 03       	csrf	0x10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002dcc:	e6 16 00 01 	andh	r6,0x1,COH
80002dd0:	c0 21       	brne	80002dd4 <udd_enable+0xf8>
      cpu_irq_enable();
80002dd2:	d5 03       	csrf	0x10
	udd_attach();
#  endif	
#endif	

	cpu_irq_restore(flags);
}
80002dd4:	2f fd       	sub	sp,-4
80002dd6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002dda:	00 00       	add	r0,r0
80002ddc:	80 00       	ld.sh	r0,r0[0x0]
80002dde:	34 24       	mov	r4,66
80002de0:	80 00       	ld.sh	r0,r0[0x0]
80002de2:	2d fc       	sub	r12,-33
80002de4:	80 00       	ld.sh	r0,r0[0x0]
80002de6:	34 d4       	mov	r4,77
80002de8:	00 00       	add	r0,r0
80002dea:	06 20       	rsub	r0,r3
80002dec:	80 00       	ld.sh	r0,r0[0x0]
80002dee:	48 34       	lddpc	r4,80002df8 <udd_enable+0x11c>
80002df0:	00 00       	add	r0,r0
80002df2:	05 e4       	ld.ub	r4,r2[0x6]
80002df4:	00 00       	add	r0,r0
80002df6:	06 a0       	st.w	r3++,r0
80002df8:	00 00       	add	r0,r0
80002dfa:	0b 24       	ld.uh	r4,r5++

80002dfc <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
#   else
ISR(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
#   endif
#endif
{
80002dfc:	eb cd 40 80 	pushm	r7,lr
80002e00:	20 1d       	sub	sp,4
	if (Is_udd_sof()) {
80002e02:	fe 68 10 04 	mov	r8,-126972
80002e06:	70 08       	ld.w	r8,r8[0x0]
80002e08:	e2 18 00 04 	andl	r8,0x4,COH
80002e0c:	c0 90       	breq	80002e1e <udd_interrupt+0x22>
		udd_ack_sof();
80002e0e:	30 49       	mov	r9,4
80002e10:	fe 68 10 08 	mov	r8,-126968
80002e14:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
80002e16:	f0 1f 01 3e 	mcall	8000330c <udd_interrupt+0x510>
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
80002e1a:	e0 8f 02 68 	bral	800032ea <udd_interrupt+0x4ee>


static bool udd_ctrl_interrupt(void)
{

	if (!Is_udd_endpoint_interrupt(0)) {
80002e1e:	fe 68 10 00 	mov	r8,-126976
80002e22:	70 18       	ld.w	r8,r8[0x4]
80002e24:	e2 18 10 00 	andl	r8,0x1000,COH
80002e28:	e0 80 01 79 	breq	8000311a <udd_interrupt+0x31e>
		return false; // No interrupt events on control endpoint
	}

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80002e2c:	fe 68 12 20 	mov	r8,-126432
80002e30:	31 09       	mov	r9,16
80002e32:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80002e34:	30 89       	mov	r9,8
80002e36:	91 09       	st.w	r8[0x0],r9

	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80002e38:	fe 68 11 30 	mov	r8,-126672
80002e3c:	70 08       	ld.w	r8,r8[0x0]
80002e3e:	e2 18 00 04 	andl	r8,0x4,COH
80002e42:	c7 80       	breq	80002f32 <udd_interrupt+0x136>

static void udd_ctrl_setup_received(void)
{
	irqflags_t flags;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
80002e44:	fe f8 04 cc 	ld.w	r8,pc[1228]
80002e48:	70 08       	ld.w	r8,r8[0x0]
80002e4a:	58 08       	cp.w	r8,0
80002e4c:	c0 50       	breq	80002e56 <udd_interrupt+0x5a>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
80002e4e:	f0 1f 01 32 	mcall	80003314 <udd_interrupt+0x518>

		// Reinitializes control endpoint management
		udd_ctrl_init();
80002e52:	f0 1f 01 32 	mcall	80003318 <udd_interrupt+0x51c>
	}
	// Fill setup request structure
	if (8 != udd_udesc_get_buf0_ctn(0)) {
80002e56:	fe f8 04 c6 	ld.w	r8,pc[1222]
80002e5a:	70 18       	ld.w	r8,r8[0x4]
80002e5c:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80002e60:	58 88       	cp.w	r8,8
80002e62:	c0 90       	breq	80002e74 <udd_interrupt+0x78>
		udd_ctrl_stall_data();
80002e64:	f0 1f 01 2f 	mcall	80003320 <udd_interrupt+0x524>
		udd_ack_setup_received(0);
80002e68:	30 49       	mov	r9,4
80002e6a:	fe 68 11 60 	mov	r8,-126624
80002e6e:	91 09       	st.w	r8[0x0],r9
80002e70:	e0 8f 02 3d 	bral	800032ea <udd_interrupt+0x4ee>
		return; // Error data number doesn't correspond to SETUP packet
	}
	memcpy((uint8_t *) & udd_g_ctrlreq.req, udd_ctrl_buffer, 8);
80002e74:	fe f7 04 b0 	ld.w	r7,pc[1200]
80002e78:	30 8a       	mov	r10,8
80002e7a:	fe fb 04 ae 	ld.w	r11,pc[1198]
80002e7e:	0e 9c       	mov	r12,r7
80002e80:	f0 1f 01 2b 	mcall	8000332c <udd_interrupt+0x530>

	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
80002e84:	8e 18       	ld.sh	r8,r7[0x2]
80002e86:	5c c8       	swap.bh	r8
80002e88:	ae 18       	st.h	r7[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
80002e8a:	8e 28       	ld.sh	r8,r7[0x4]
80002e8c:	5c c8       	swap.bh	r8
80002e8e:	ae 28       	st.h	r7[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80002e90:	8e 38       	ld.sh	r8,r7[0x6]
80002e92:	5c c8       	swap.bh	r8
80002e94:	ae 38       	st.h	r7[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
80002e96:	f0 1f 01 27 	mcall	80003330 <udd_interrupt+0x534>
80002e9a:	c0 91       	brne	80002eac <udd_interrupt+0xb0>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
80002e9c:	f0 1f 01 21 	mcall	80003320 <udd_interrupt+0x524>
		udd_ack_setup_received(0);
80002ea0:	30 49       	mov	r9,4
80002ea2:	fe 68 11 60 	mov	r8,-126624
80002ea6:	91 09       	st.w	r8[0x0],r9
80002ea8:	e0 8f 02 21 	bral	800032ea <udd_interrupt+0x4ee>
		return;
	}
	udd_ack_setup_received(0);
80002eac:	30 49       	mov	r9,4
80002eae:	fe 68 11 60 	mov	r8,-126624
80002eb2:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
80002eb4:	fe f8 04 70 	ld.w	r8,pc[1136]
80002eb8:	11 89       	ld.ub	r9,r8[0x0]
80002eba:	30 08       	mov	r8,0
80002ebc:	f0 09 18 00 	cp.b	r9,r8
80002ec0:	c1 04       	brge	80002ee0 <udd_interrupt+0xe4>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002ec2:	30 08       	mov	r8,0
80002ec4:	fe f9 04 70 	ld.w	r9,pc[1136]
80002ec8:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002eca:	fe f9 04 6e 	ld.w	r9,pc[1134]
80002ece:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
80002ed0:	30 29       	mov	r9,2
80002ed2:	fe f8 04 3e 	ld.w	r8,pc[1086]
80002ed6:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
80002ed8:	f0 1f 01 19 	mcall	8000333c <udd_interrupt+0x540>
80002edc:	e0 8f 02 07 	bral	800032ea <udd_interrupt+0x4ee>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
80002ee0:	fe f8 04 44 	ld.w	r8,pc[1092]
80002ee4:	90 39       	ld.sh	r9,r8[0x6]
80002ee6:	30 08       	mov	r8,0
80002ee8:	f0 09 19 00 	cp.h	r9,r8
80002eec:	c0 51       	brne	80002ef6 <udd_interrupt+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
80002eee:	f0 1f 01 15 	mcall	80003340 <udd_interrupt+0x544>
80002ef2:	e0 8f 01 fc 	bral	800032ea <udd_interrupt+0x4ee>
			return;
		}

		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80002ef6:	30 08       	mov	r8,0
80002ef8:	fe f9 04 3c 	ld.w	r9,pc[1084]
80002efc:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
80002efe:	fe f9 04 3a 	ld.w	r9,pc[1082]
80002f02:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
80002f04:	30 19       	mov	r9,1
80002f06:	fe f8 04 0a 	ld.w	r8,pc[1034]
80002f0a:	91 09       	st.w	r8[0x0],r9

		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
80002f0c:	31 08       	mov	r8,16
80002f0e:	fe 69 11 60 	mov	r9,-126624
80002f12:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80002f14:	e1 b9 00 00 	mfsr	r9,0x0
80002f18:	50 09       	stdsp	sp[0x0],r9
	cpu_irq_disable();
80002f1a:	d3 03       	ssrf	0x10

	return flags;
80002f1c:	40 09       	lddsp	r9,sp[0x0]
		flags = cpu_irq_save();
		udd_enable_nak_in_interrupt(0);
80002f1e:	fe 6a 11 f0 	mov	r10,-126480
80002f22:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80002f24:	12 98       	mov	r8,r9
80002f26:	e6 18 00 01 	andh	r8,0x1,COH
80002f2a:	c0 21       	brne	80002f2e <udd_interrupt+0x132>
      cpu_irq_enable();
80002f2c:	d5 03       	csrf	0x10
   }

	barrier();
80002f2e:	e0 8f 01 de 	bral	800032ea <udd_interrupt+0x4ee>
	if (Is_udd_setup_received(0)) {
		// SETUP packet received
		udd_ctrl_setup_received();
		return true;
	}
	if (Is_udd_out_received(0)) {
80002f32:	fe 68 11 30 	mov	r8,-126672
80002f36:	70 08       	ld.w	r8,r8[0x0]
80002f38:	e2 18 00 02 	andl	r8,0x2,COH
80002f3c:	e0 80 00 a1 	breq	8000307e <udd_interrupt+0x282>
static void udd_ctrl_out_received(void)
{
	irqflags_t flags;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
80002f40:	fe f8 03 d0 	ld.w	r8,pc[976]
80002f44:	70 08       	ld.w	r8,r8[0x0]
80002f46:	58 18       	cp.w	r8,1
80002f48:	c1 10       	breq	80002f6a <udd_interrupt+0x16e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state) ||
80002f4a:	58 28       	cp.w	r8,2
80002f4c:	5f 09       	sreq	r9
80002f4e:	58 48       	cp.w	r8,4
80002f50:	5f 08       	sreq	r8
80002f52:	f3 e8 10 08 	or	r8,r9,r8
80002f56:	c0 40       	breq	80002f5e <udd_interrupt+0x162>
				(UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
80002f58:	f0 1f 00 ef 	mcall	80003314 <udd_interrupt+0x518>
80002f5c:	c0 38       	rjmp	80002f62 <udd_interrupt+0x166>
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
80002f5e:	f0 1f 00 f1 	mcall	80003320 <udd_interrupt+0x524>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
80002f62:	f0 1f 00 ee 	mcall	80003318 <udd_interrupt+0x51c>
80002f66:	e0 8f 01 c2 	bral	800032ea <udd_interrupt+0x4ee>
		return;
	}
	// Read data received during OUT phase
	nb_data = udd_udesc_get_buf0_ctn(0);
80002f6a:	fe f8 03 b2 	ld.w	r8,pc[946]
80002f6e:	70 17       	ld.w	r7,r8[0x4]
80002f70:	ef d7 c0 0f 	bfextu	r7,r7,0x0,0xf
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80002f74:	fe f8 03 b0 	ld.w	r8,pc[944]
80002f78:	90 69       	ld.sh	r9,r8[0xc]
80002f7a:	fe f8 03 be 	ld.w	r8,pc[958]
80002f7e:	90 08       	ld.sh	r8,r8[0x0]
80002f80:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80002f84:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80002f88:	ee 0a 00 0a 	add	r10,r7,r10
80002f8c:	14 3b       	cp.w	r11,r10
80002f8e:	c0 44       	brge	80002f96 <udd_interrupt+0x19a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80002f90:	10 19       	sub	r9,r8
80002f92:	ef d9 b0 10 	bfexts	r7,r9,0x0,0x10
				udd_ctrl_payload_nb_trans;
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans),
80002f96:	5c 78       	castu.h	r8
80002f98:	fe f9 03 8c 	ld.w	r9,pc[908]
80002f9c:	72 2c       	ld.w	r12,r9[0x8]
80002f9e:	0e 9a       	mov	r10,r7
80002fa0:	5c 7a       	castu.h	r10
80002fa2:	fe fb 03 86 	ld.w	r11,pc[902]
80002fa6:	10 0c       	add	r12,r8
80002fa8:	f0 1f 00 e1 	mcall	8000332c <udd_interrupt+0x530>
			udd_ctrl_buffer, nb_data);
	udd_ctrl_payload_nb_trans += nb_data;
80002fac:	fe f9 03 8c 	ld.w	r9,pc[908]
80002fb0:	92 08       	ld.sh	r8,r9[0x0]
80002fb2:	0e 08       	add	r8,r7
80002fb4:	5c 88       	casts.h	r8
80002fb6:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) ||
80002fb8:	34 09       	mov	r9,64
80002fba:	f2 07 19 00 	cp.h	r7,r9
80002fbe:	c0 e1       	brne	80002fda <udd_interrupt+0x1de>
80002fc0:	fe f9 03 64 	ld.w	r9,pc[868]
80002fc4:	92 ba       	ld.uh	r10,r9[0x6]
80002fc6:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80002fca:	fe f9 03 6a 	ld.w	r9,pc[874]
80002fce:	92 89       	ld.uh	r9,r9[0x0]
80002fd0:	f6 09 00 09 	add	r9,r11,r9
80002fd4:	12 3a       	cp.w	r10,r9
80002fd6:	e0 89 00 1a 	brgt	8000300a <udd_interrupt+0x20e>
			(udd_g_ctrlreq.req.wLength <=
			(udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
80002fda:	fe f9 03 4a 	ld.w	r9,pc[842]
80002fde:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
80002fe0:	72 5c       	ld.w	r12,r9[0x14]
80002fe2:	58 0c       	cp.w	r12,0
80002fe4:	c0 b0       	breq	80002ffa <udd_interrupt+0x1fe>
			if (!udd_g_ctrlreq.over_under_run()) {
80002fe6:	5d 1c       	icall	r12
80002fe8:	c0 91       	brne	80002ffa <udd_interrupt+0x1fe>
				// Stall ZLP
				udd_ctrl_stall_data();
80002fea:	f0 1f 00 ce 	mcall	80003320 <udd_interrupt+0x524>

				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
80002fee:	30 29       	mov	r9,2
80002ff0:	fe 68 11 60 	mov	r8,-126624
80002ff4:	91 09       	st.w	r8[0x0],r9
80002ff6:	e0 8f 01 7a 	bral	800032ea <udd_interrupt+0x4ee>
				return;
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
80002ffa:	30 29       	mov	r9,2
80002ffc:	fe 68 11 60 	mov	r8,-126624
80003000:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80003002:	f0 1f 00 d0 	mcall	80003340 <udd_interrupt+0x544>
80003006:	e0 8f 01 72 	bral	800032ea <udd_interrupt+0x4ee>
		return;
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
8000300a:	fe f9 03 1a 	ld.w	r9,pc[794]
8000300e:	92 69       	ld.sh	r9,r9[0xc]
80003010:	f0 09 19 00 	cp.h	r9,r8
80003014:	c2 11       	brne	80003056 <udd_interrupt+0x25a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80003016:	fe f8 03 0e 	ld.w	r8,pc[782]
8000301a:	70 5c       	ld.w	r12,r8[0x14]
8000301c:	58 0c       	cp.w	r12,0
8000301e:	c0 81       	brne	8000302e <udd_interrupt+0x232>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
80003020:	f0 1f 00 c0 	mcall	80003320 <udd_interrupt+0x524>

			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003024:	30 29       	mov	r9,2
80003026:	fe 68 11 60 	mov	r8,-126624
8000302a:	91 09       	st.w	r8[0x0],r9
8000302c:	c5 f9       	rjmp	800032ea <udd_interrupt+0x4ee>
			return;
		}
		if (!udd_g_ctrlreq.over_under_run()) {
8000302e:	5d 1c       	icall	r12
80003030:	c0 81       	brne	80003040 <udd_interrupt+0x244>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80003032:	f0 1f 00 bc 	mcall	80003320 <udd_interrupt+0x524>

			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80003036:	30 29       	mov	r9,2
80003038:	fe 68 11 60 	mov	r8,-126624
8000303c:	91 09       	st.w	r8[0x0],r9
8000303e:	c5 69       	rjmp	800032ea <udd_interrupt+0x4ee>
			return;
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80003040:	fe f9 02 f4 	ld.w	r9,pc[756]
80003044:	fe f8 02 f4 	ld.w	r8,pc[756]
80003048:	90 0b       	ld.sh	r11,r8[0x0]
8000304a:	92 0a       	ld.sh	r10,r9[0x0]
8000304c:	f6 0a 00 0a 	add	r10,r11,r10
80003050:	b2 0a       	st.h	r9[0x0],r10

		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80003052:	30 09       	mov	r9,0
80003054:	b0 09       	st.h	r8[0x0],r9
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80003056:	fe 69 11 60 	mov	r9,-126624
8000305a:	30 28       	mov	r8,2
8000305c:	93 08       	st.w	r9[0x0],r8

	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
8000305e:	31 08       	mov	r8,16
80003060:	93 08       	st.w	r9[0x0],r8

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003062:	e1 b9 00 00 	mfsr	r9,0x0
80003066:	50 09       	stdsp	sp[0x0],r9
	cpu_irq_disable();
80003068:	d3 03       	ssrf	0x10

	return flags;
8000306a:	40 09       	lddsp	r9,sp[0x0]
	flags = cpu_irq_save();
	udd_enable_nak_in_interrupt(0);
8000306c:	fe 6a 11 f0 	mov	r10,-126480
80003070:	95 08       	st.w	r10[0x0],r8
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003072:	12 98       	mov	r8,r9
80003074:	e6 18 00 01 	andh	r8,0x1,COH
80003078:	c0 21       	brne	8000307c <udd_interrupt+0x280>
      cpu_irq_enable();
8000307a:	d5 03       	csrf	0x10
   }

	barrier();
8000307c:	c3 79       	rjmp	800032ea <udd_interrupt+0x4ee>
	if (Is_udd_out_received(0)) {
		// OUT packet received
		udd_ctrl_out_received();
		return true;
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
8000307e:	fe 68 11 30 	mov	r8,-126672
80003082:	70 08       	ld.w	r8,r8[0x0]
80003084:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003088:	c0 a0       	breq	8000309c <udd_interrupt+0x2a0>
8000308a:	fe 68 11 c0 	mov	r8,-126528
8000308e:	70 08       	ld.w	r8,r8[0x0]
80003090:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003094:	c0 40       	breq	8000309c <udd_interrupt+0x2a0>
		// IN packet sent
		udd_ctrl_in_sent();
80003096:	f0 1f 00 aa 	mcall	8000333c <udd_interrupt+0x540>
8000309a:	c2 89       	rjmp	800032ea <udd_interrupt+0x4ee>
		return true;
	}
	if (Is_udd_nak_out(0)) {
8000309c:	fe 68 11 30 	mov	r8,-126672
800030a0:	70 08       	ld.w	r8,r8[0x0]
800030a2:	e2 18 00 08 	andl	r8,0x8,COH
800030a6:	c1 80       	breq	800030d6 <udd_interrupt+0x2da>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
800030a8:	30 89       	mov	r9,8
800030aa:	fe 68 11 60 	mov	r8,-126624
800030ae:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0)) {
800030b0:	fe 68 11 30 	mov	r8,-126672
800030b4:	70 08       	ld.w	r8,r8[0x0]
800030b6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030ba:	e0 81 01 18 	brne	800032ea <udd_interrupt+0x4ee>
	}

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
800030be:	fe f8 02 52 	ld.w	r8,pc[594]
800030c2:	70 08       	ld.w	r8,r8[0x0]
800030c4:	58 38       	cp.w	r8,3
800030c6:	e0 81 01 12 	brne	800032ea <udd_interrupt+0x4ee>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
800030ca:	e8 69 00 00 	mov	r9,524288
800030ce:	fe 68 11 f0 	mov	r8,-126480
800030d2:	91 09       	st.w	r8[0x0],r9
800030d4:	c0 b9       	rjmp	800032ea <udd_interrupt+0x4ee>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
		udd_ctrl_overflow();
		return true;
	}
	if (Is_udd_nak_in(0)) {
800030d6:	fe 68 11 30 	mov	r8,-126672
800030da:	70 08       	ld.w	r8,r8[0x0]
800030dc:	e2 18 00 10 	andl	r8,0x10,COH
800030e0:	c1 d0       	breq	8000311a <udd_interrupt+0x31e>
		// Underflow on IN packet
		udd_ack_nak_in(0);
800030e2:	31 09       	mov	r9,16
800030e4:	fe 68 11 60 	mov	r8,-126624
800030e8:	91 09       	st.w	r8[0x0],r9
}


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
800030ea:	fe 68 11 30 	mov	r8,-126672
800030ee:	70 08       	ld.w	r8,r8[0x0]
800030f0:	e2 18 00 02 	andl	r8,0x2,COH
800030f4:	e0 81 00 fb 	brne	800032ea <udd_interrupt+0x4ee>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
800030f8:	fe f8 02 18 	ld.w	r8,pc[536]
800030fc:	70 08       	ld.w	r8,r8[0x0]
800030fe:	58 18       	cp.w	r8,1
80003100:	c0 41       	brne	80003108 <udd_interrupt+0x30c>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80003102:	f0 1f 00 90 	mcall	80003340 <udd_interrupt+0x544>
80003106:	cf 28       	rjmp	800032ea <udd_interrupt+0x4ee>

	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80003108:	58 48       	cp.w	r8,4
8000310a:	e0 81 00 f0 	brne	800032ea <udd_interrupt+0x4ee>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
8000310e:	e8 69 00 00 	mov	r9,524288
80003112:	fe 68 11 f0 	mov	r8,-126480
80003116:	91 09       	st.w	r8[0x0],r9
80003118:	ce 98       	rjmp	800032ea <udd_interrupt+0x4ee>
8000311a:	30 08       	mov	r8,0
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
8000311c:	fe 6b 10 00 	mov	r11,-126976
80003120:	e0 67 10 00 	mov	r7,4096
		udd_ctrl_send_zlp_in();

	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80003124:	f0 cc ff ff 	sub	r12,r8,-1
80003128:	5c 5c       	castu.b	r12
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
8000312a:	76 4a       	ld.w	r10,r11[0x10]
#   ifdef FREERTOS_USED
#      include "FreeRTOS.h"
#      include "task.h"
ISR_FREERTOS(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
#   else
ISR(udd_interrupt, AVR32_USBC_IRQ_GROUP, UDD_USB_INT_LEVEL)
8000312c:	2f f8       	sub	r8,-1
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
8000312e:	ee 08 09 49 	lsl	r9,r7,r8
80003132:	f3 ea 00 0a 	and	r10,r9,r10
80003136:	c0 40       	breq	8000313e <udd_interrupt+0x342>
				|| !Is_udd_endpoint_interrupt(ep)) {
80003138:	76 1a       	ld.w	r10,r11[0x4]
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		if (!Is_udd_endpoint_interrupt_enabled(ep)
8000313a:	14 69       	and	r9,r10
8000313c:	c0 41       	brne	80003144 <udd_interrupt+0x348>
static bool udd_ep_interrupt(void)
{
	udd_ep_id_t ep, ep_addr;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000313e:	58 38       	cp.w	r8,3
80003140:	cf 21       	brne	80003124 <udd_interrupt+0x328>
80003142:	cd c8       	rjmp	800032fa <udd_interrupt+0x4fe>
		if (!Is_udd_endpoint_interrupt_enabled(ep)
				|| !Is_udd_endpoint_interrupt(ep)) {
			continue;
		}
		ep_addr = Is_udd_endpoint_in(ep) ? (ep | USB_EP_DIR_IN) : ep;
80003144:	f8 08 15 02 	lsl	r8,r12,0x2
80003148:	e0 38 ef 00 	sub	r8,126720
8000314c:	70 08       	ld.w	r8,r8[0x0]
8000314e:	e2 18 01 00 	andl	r8,0x100,COH
80003152:	c0 20       	breq	80003156 <udd_interrupt+0x35a>
80003154:	a7 bc       	sbr	r12,0x7
		udd_ep_trans_done(ep_addr);
80003156:	f0 1f 00 7c 	mcall	80003344 <udd_interrupt+0x548>
8000315a:	cc 88       	rjmp	800032ea <udd_interrupt+0x4ee>
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
		udd_ack_reset();
8000315c:	30 87       	mov	r7,8
8000315e:	fe 68 10 08 	mov	r8,-126968
80003162:	91 07       	st.w	r8[0x0],r7
#if (USB_DEVICE_MAX_EP != 0)
		// For each endpoint, kill job
		{
			uint8_t i;
			for (i = 1; i <= USB_DEVICE_MAX_EP; i++) {
				udd_ep_abort(i);
80003164:	30 1c       	mov	r12,1
80003166:	f0 1f 00 79 	mcall	80003348 <udd_interrupt+0x54c>
8000316a:	30 2c       	mov	r12,2
8000316c:	f0 1f 00 77 	mcall	80003348 <udd_interrupt+0x54c>
80003170:	30 3c       	mov	r12,3
80003172:	f0 1f 00 76 	mcall	80003348 <udd_interrupt+0x54c>
			}
		}
#endif
		// Reset USB Device Stack Core
		udc_reset();
80003176:	f0 1f 00 76 	mcall	8000334c <udd_interrupt+0x550>
static void udd_reset_ep_ctrl(void)
{
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
8000317a:	fe 68 10 00 	mov	r8,-126976
8000317e:	70 09       	ld.w	r9,r8[0x0]
80003180:	e0 19 ff 80 	andl	r9,0xff80
80003184:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80003186:	70 09       	ld.w	r9,r8[0x0]
80003188:	a7 b9       	sbr	r9,0x7
8000318a:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
8000318c:	fe 68 11 00 	mov	r8,-126720
80003190:	70 09       	ld.w	r9,r8[0x0]
80003192:	34 08       	mov	r8,64
80003194:	f0 07 0c 47 	max	r7,r8,r7
80003198:	e0 68 04 00 	mov	r8,1024
8000319c:	ee 08 0d 47 	min	r7,r7,r8
800031a0:	a1 77       	lsl	r7,0x1
800031a2:	58 17       	cp.w	r7,1
800031a4:	c0 41       	brne	800031ac <udd_interrupt+0x3b0>
800031a6:	e0 68 19 40 	mov	r8,6464
800031aa:	c1 28       	rjmp	800031ce <udd_interrupt+0x3d2>
800031ac:	30 8a       	mov	r10,8
800031ae:	34 08       	mov	r8,64
800031b0:	f0 0a 0c 48 	max	r8,r8,r10
800031b4:	e0 6a 04 00 	mov	r10,1024
800031b8:	f0 0a 0d 48 	min	r8,r8,r10
800031bc:	a1 78       	lsl	r8,0x1
800031be:	20 18       	sub	r8,1
800031c0:	f0 08 12 00 	clz	r8,r8
800031c4:	f0 08 11 1c 	rsub	r8,r8,28
800031c8:	a5 68       	lsl	r8,0x4
800031ca:	e2 18 19 74 	andl	r8,0x1974,COH
800031ce:	e0 19 e6 8b 	andl	r9,0xe68b
800031d2:	f1 e9 10 09 	or	r9,r8,r9
800031d6:	fe 68 11 00 	mov	r8,-126720
800031da:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBC_UECFG0_EPBK_SINGLE);

	// Use internal buffer for endpoint control
	udd_udesc_set_buf0_addr(0, udd_ctrl_buffer);
800031dc:	4d 08       	lddpc	r8,8000331c <udd_interrupt+0x520>
800031de:	4d 39       	lddpc	r9,80003328 <udd_interrupt+0x52c>
800031e0:	91 09       	st.w	r8[0x0],r9

	// don't use multipacket on endpoint control
	udd_udesc_rst_buf0_size(0);
800031e2:	70 19       	ld.w	r9,r8[0x4]
800031e4:	30 0a       	mov	r10,0
800031e6:	f3 da d2 0f 	bfins	r9,r10,0x10,0xf
800031ea:	91 19       	st.w	r8[0x4],r9
	udd_enable_endpoint(0);
800031ec:	fe 68 10 00 	mov	r8,-126976
800031f0:	70 79       	ld.w	r9,r8[0x1c]
800031f2:	a1 a9       	sbr	r9,0x0
800031f4:	91 79       	st.w	r8[0x1c],r9
	udd_disable_busy_bank0(0);
800031f6:	fc 1a 01 00 	movh	r10,0x100
800031fa:	fe 69 12 20 	mov	r9,-126432
800031fe:	93 0a       	st.w	r9[0x0],r10

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003200:	e1 b9 00 00 	mfsr	r9,0x0
80003204:	50 09       	stdsp	sp[0x0],r9
	cpu_irq_disable();
80003206:	d3 03       	ssrf	0x10

	return flags;
80003208:	40 0a       	lddsp	r10,sp[0x0]
	flags = cpu_irq_save();
	udd_enable_setup_received_interrupt(0);
8000320a:	fe 69 11 f0 	mov	r9,-126480
8000320e:	30 4b       	mov	r11,4
80003210:	93 0b       	st.w	r9[0x0],r11
	udd_enable_out_received_interrupt(0);
80003212:	30 2b       	mov	r11,2
80003214:	93 0b       	st.w	r9[0x0],r11
	udd_enable_endpoint_interrupt(0);
80003216:	e0 69 10 00 	mov	r9,4096
8000321a:	91 69       	st.w	r8[0x18],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000321c:	14 98       	mov	r8,r10
8000321e:	e6 18 00 01 	andh	r8,0x1,COH
80003222:	c0 21       	brne	80003226 <udd_interrupt+0x42a>
      cpu_irq_enable();
80003224:	d5 03       	csrf	0x10
		// Reset USB Device Stack Core
		udc_reset();
		// Reset endpoint control
		udd_reset_ep_ctrl();
		// Reset endpoint control management
		udd_ctrl_init();
80003226:	f0 1f 00 3d 	mcall	80003318 <udd_interrupt+0x51c>
		goto udd_interrupt_end;
8000322a:	c6 08       	rjmp	800032ea <udd_interrupt+0x4ee>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
8000322c:	fe 68 10 10 	mov	r8,-126960
80003230:	70 08       	ld.w	r8,r8[0x0]
80003232:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003236:	c1 b0       	breq	8000326c <udd_interrupt+0x470>
80003238:	fe 68 10 04 	mov	r8,-126972
8000323c:	70 08       	ld.w	r8,r8[0x0]
8000323e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003242:	c1 50       	breq	8000326c <udd_interrupt+0x470>
		otg_unfreeze_clock();
80003244:	fe 68 18 00 	mov	r8,-124928
80003248:	70 09       	ld.w	r9,r8[0x0]
8000324a:	af c9       	cbr	r9,0xe
8000324c:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatically acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000324e:	30 1a       	mov	r10,1
80003250:	fe 69 10 14 	mov	r9,-126956
80003254:	93 0a       	st.w	r9[0x0],r10
		udd_enable_wake_up_interrupt();
80003256:	31 0a       	mov	r10,16
80003258:	fe 69 10 18 	mov	r9,-126952
8000325c:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
8000325e:	70 09       	ld.w	r9,r8[0x0]
80003260:	af a9       	sbr	r9,0xe
80003262:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80003264:	30 0c       	mov	r12,0
80003266:	f0 1f 00 3b 	mcall	80003350 <udd_interrupt+0x554>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
8000326a:	c4 08       	rjmp	800032ea <udd_interrupt+0x4ee>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
8000326c:	fe 68 10 10 	mov	r8,-126960
80003270:	70 08       	ld.w	r8,r8[0x0]
80003272:	e2 18 00 10 	andl	r8,0x10,COH
80003276:	c1 d0       	breq	800032b0 <udd_interrupt+0x4b4>
80003278:	fe 68 10 04 	mov	r8,-126972
8000327c:	70 08       	ld.w	r8,r8[0x0]
8000327e:	e2 18 00 10 	andl	r8,0x10,COH
80003282:	c1 70       	breq	800032b0 <udd_interrupt+0x4b4>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
80003284:	fe 68 18 00 	mov	r8,-124928
80003288:	70 09       	ld.w	r9,r8[0x0]
8000328a:	af c9       	cbr	r9,0xe
8000328c:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
8000328e:	fe 69 18 04 	mov	r9,-124924
80003292:	72 08       	ld.w	r8,r9[0x0]
80003294:	e2 18 40 00 	andl	r8,0x4000,COH
80003298:	cf d0       	breq	80003292 <udd_interrupt+0x496>

		// The wakeup interrupt is automatically acked when a suspend occur
		udd_disable_wake_up_interrupt();
8000329a:	31 09       	mov	r9,16
8000329c:	fe 68 10 14 	mov	r8,-126956
800032a0:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
800032a2:	30 1c       	mov	r12,1
800032a4:	fe 68 10 18 	mov	r8,-126952
800032a8:	91 0c       	st.w	r8[0x0],r12
		udd_sleep_mode(true); // Enter in IDLE mode
800032aa:	f0 1f 00 2a 	mcall	80003350 <udd_interrupt+0x554>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
800032ae:	c1 e8       	rjmp	800032ea <udd_interrupt+0x4ee>
	}

	if (Is_otg_vbus_transition()) {
800032b0:	fe 68 18 04 	mov	r8,-124924
800032b4:	70 08       	ld.w	r8,r8[0x0]
800032b6:	e2 18 00 02 	andl	r8,0x2,COH
800032ba:	c1 80       	breq	800032ea <udd_interrupt+0x4ee>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
800032bc:	fe 68 18 00 	mov	r8,-124928
800032c0:	70 09       	ld.w	r9,r8[0x0]
800032c2:	af c9       	cbr	r9,0xe
800032c4:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
800032c6:	30 2a       	mov	r10,2
800032c8:	fe 69 18 08 	mov	r9,-124920
800032cc:	93 0a       	st.w	r9[0x0],r10
		otg_freeze_clock();
800032ce:	70 09       	ld.w	r9,r8[0x0]
800032d0:	af a9       	sbr	r9,0xe
800032d2:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
800032d4:	fe 68 18 04 	mov	r8,-124924
800032d8:	70 08       	ld.w	r8,r8[0x0]
800032da:	e2 18 08 00 	andl	r8,0x800,COH
800032de:	c0 40       	breq	800032e6 <udd_interrupt+0x4ea>
			udd_attach();
800032e0:	f0 1f 00 1d 	mcall	80003354 <udd_interrupt+0x558>
800032e4:	c0 38       	rjmp	800032ea <udd_interrupt+0x4ee>
		} else {
			udd_detach();
800032e6:	f0 1f 00 1d 	mcall	80003358 <udd_interrupt+0x55c>
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
800032ea:	fe 68 10 00 	mov	r8,-126976
800032ee:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
800032f2:	2f fd       	sub	sp,-4
800032f4:	e3 cd 40 80 	ldm	sp++,r7,lr
800032f8:	d6 03       	rete
		goto udd_interrupt_end;
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
800032fa:	fe 68 10 04 	mov	r8,-126972
800032fe:	70 08       	ld.w	r8,r8[0x0]
80003300:	e2 18 00 08 	andl	r8,0x8,COH
80003304:	fe 91 ff 2c 	brne	8000315c <udd_interrupt+0x360>
80003308:	c9 2b       	rjmp	8000322c <udd_interrupt+0x430>
8000330a:	00 00       	add	r0,r0
8000330c:	80 00       	ld.sh	r0,r0[0x0]
8000330e:	3c 60       	mov	r0,-58
80003310:	00 00       	add	r0,r0
80003312:	06 a4       	st.w	r3++,r4
80003314:	80 00       	ld.sh	r0,r0[0x0]
80003316:	24 a0       	sub	r0,74
80003318:	80 00       	ld.sh	r0,r0[0x0]
8000331a:	24 60       	sub	r0,70
8000331c:	00 00       	add	r0,r0
8000331e:	06 20       	rsub	r0,r3
80003320:	80 00       	ld.sh	r0,r0[0x0]
80003322:	24 88       	sub	r8,72
80003324:	00 00       	add	r0,r0
80003326:	0a cc       	st.b	r5++,r12
80003328:	00 00       	add	r0,r0
8000332a:	0a e4       	st.h	--r5,r4
8000332c:	80 00       	ld.sh	r0,r0[0x0]
8000332e:	46 ec       	lddsp	r12,sp[0x1b8]
80003330:	80 00       	ld.sh	r0,r0[0x0]
80003332:	3e e0       	mov	r0,-18
80003334:	00 00       	add	r0,r0
80003336:	05 e2       	ld.ub	r2,r2[0x6]
80003338:	00 00       	add	r0,r0
8000333a:	06 a2       	st.w	r3++,r2
8000333c:	80 00       	ld.sh	r0,r0[0x0]
8000333e:	2a ec       	sub	r12,-82
80003340:	80 00       	ld.sh	r0,r0[0x0]
80003342:	26 9c       	sub	r12,105
80003344:	80 00       	ld.sh	r0,r0[0x0]
80003346:	26 e4       	sub	r4,110
80003348:	80 00       	ld.sh	r0,r0[0x0]
8000334a:	24 b4       	sub	r4,75
8000334c:	80 00       	ld.sh	r0,r0[0x0]
8000334e:	3e 80       	mov	r0,-24
80003350:	80 00       	ld.sh	r0,r0[0x0]
80003352:	25 78       	sub	r8,87
80003354:	80 00       	ld.sh	r0,r0[0x0]
80003356:	26 24       	sub	r4,98
80003358:	80 00       	ld.sh	r0,r0[0x0]
8000335a:	25 fc       	sub	r12,95

8000335c <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
8000335c:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000335e:	e1 b8 00 00 	mfsr	r8,0x0
80003362:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80003364:	d3 03       	ssrf	0x10

	return flags;
80003366:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
80003368:	fe 78 08 00 	mov	r8,-63488
8000336c:	32 4a       	mov	r10,36
8000336e:	ea 1a aa 00 	orh	r10,0xaa00
80003372:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.oscctrl[0] =
80003374:	e0 7a 0c 07 	mov	r10,68615
80003378:	91 9a       	st.w	r8[0x24],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000337a:	12 98       	mov	r8,r9
8000337c:	e6 18 00 01 	andh	r8,0x1,COH
80003380:	c0 21       	brne	80003384 <osc_priv_enable_osc0+0x28>
      cpu_irq_enable();
80003382:	d5 03       	csrf	0x10
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
}
80003384:	2f fd       	sub	sp,-4
80003386:	5e fc       	retal	r12

80003388 <pll_enable>:
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
	cpu_irq_restore(flags);
}

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
80003388:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000338a:	e1 b8 00 00 	mfsr	r8,0x0
8000338e:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80003390:	d3 03       	ssrf	0x10

	return flags;
80003392:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
80003394:	2f 9b       	sub	r11,-7
80003396:	f6 0a 15 02 	lsl	r10,r11,0x2
8000339a:	ea 1a aa 00 	orh	r10,0xaa00
8000339e:	fe 78 08 00 	mov	r8,-63488
800033a2:	91 6a       	st.w	r8[0x18],r10
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
800033a4:	78 0a       	ld.w	r10,r12[0x0]
800033a6:	a1 aa       	sbr	r10,0x0
800033a8:	f0 0b 09 2a 	st.w	r8[r11<<0x2],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800033ac:	12 98       	mov	r8,r9
800033ae:	e6 18 00 01 	andh	r8,0x1,COH
800033b2:	c0 21       	brne	800033b6 <pll_enable+0x2e>
      cpu_irq_enable();
800033b4:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800033b6:	2f fd       	sub	sp,-4
800033b8:	5e fc       	retal	r12

800033ba <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
800033ba:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033bc:	e1 b8 00 00 	mfsr	r8,0x0
800033c0:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800033c2:	d3 03       	ssrf	0x10

	return flags;
800033c4:	40 09       	lddsp	r9,sp[0x0]
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC120M);

	flags = cpu_irq_save();
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
800033c6:	fe 78 04 00 	mov	r8,-64512
800033ca:	fc 1a aa 00 	movh	r10,0xaa00
800033ce:	f1 4a 00 58 	st.w	r8[88],r10
	AVR32_PM.mcctrl = src;
800033d2:	91 0c       	st.w	r8[0x0],r12
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800033d4:	12 98       	mov	r8,r9
800033d6:	e6 18 00 01 	andh	r8,0x1,COH
800033da:	c0 21       	brne	800033de <sysclk_set_source+0x24>
      cpu_irq_enable();
800033dc:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
}
800033de:	2f fd       	sub	sp,-4
800033e0:	5e fc       	retal	r12

800033e2 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
800033e2:	d4 01       	pushm	lr
800033e4:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800033e6:	e1 b8 00 00 	mfsr	r8,0x0
800033ea:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800033ec:	d3 03       	ssrf	0x10

	return flags;
800033ee:	40 09       	lddsp	r9,sp[0x0]
	uint32_t   mask;

	flags = cpu_irq_save();

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
800033f0:	a3 6c       	lsl	r12,0x2
800033f2:	fe 7a 04 20 	mov	r10,-64480
800033f6:	f8 0a 00 08 	add	r8,r12,r10
800033fa:	70 0a       	ld.w	r10,r8[0x0]
	mask |= 1U << module_index;
800033fc:	30 1e       	mov	lr,1
800033fe:	fc 0b 09 4b 	lsl	r11,lr,r11
80003402:	14 4b       	or	r11,r10
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
80003404:	32 0a       	mov	r10,32
80003406:	ea 1a aa 00 	orh	r10,0xaa00
8000340a:	14 0c       	add	r12,r10
8000340c:	fe 7a 04 00 	mov	r10,-64512
80003410:	f5 4c 00 58 	st.w	r10[88],r12
	*(&AVR32_PM.cpumask + bus_id) = mask;
80003414:	91 0b       	st.w	r8[0x0],r11
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003416:	12 98       	mov	r8,r9
80003418:	e6 18 00 01 	andh	r8,0x1,COH
8000341c:	c0 21       	brne	80003420 <sysclk_priv_enable_module+0x3e>
      cpu_irq_enable();
8000341e:	d5 03       	csrf	0x10

	cpu_irq_restore(flags);
}
80003420:	2f fd       	sub	sp,-4
80003422:	d8 02       	popm	pc

80003424 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
80003424:	d4 01       	pushm	lr
80003426:	20 1d       	sub	sp,4

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
80003428:	fe 78 08 00 	mov	r8,-63488
8000342c:	70 58       	ld.w	r8,r8[0x14]

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000342e:	e2 18 00 10 	andl	r8,0x10,COH
80003432:	c2 81       	brne	80003482 <sysclk_enable_usb+0x5e>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80003434:	fe 78 08 00 	mov	r8,-63488
80003438:	70 58       	ld.w	r8,r8[0x14]

static inline void pll_enable_source(enum pll_source src)
{
	switch (src) {
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000343a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000343e:	c0 91       	brne	80003450 <sysclk_enable_usb+0x2c>
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
80003440:	f0 1f 00 15 	mcall	80003494 <sysclk_enable_usb+0x70>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
80003444:	fe 79 08 00 	mov	r9,-63488
80003448:	72 58       	ld.w	r8,r9[0x14]
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
8000344a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000344e:	cf d0       	breq	80003448 <sysclk_enable_usb+0x24>
static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
80003450:	31 08       	mov	r8,16
80003452:	a3 b8       	sbr	r8,0x3
80003454:	50 08       	stdsp	sp[0x0],r8
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
80003456:	10 99       	mov	r9,r8
80003458:	ea 19 3f 00 	orh	r9,0x3f00
8000345c:	e8 19 01 00 	orl	r9,0x100
80003460:	30 88       	mov	r8,8
80003462:	20 18       	sub	r8,1
80003464:	f3 e8 11 08 	or	r8,r9,r8<<0x10
80003468:	fa cc ff fc 	sub	r12,sp,-4
8000346c:	18 d8       	st.w	--r12,r8
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
8000346e:	30 0b       	mov	r11,0
80003470:	1a 9c       	mov	r12,sp
80003472:	f0 1f 00 0a 	mcall	80003498 <sysclk_enable_usb+0x74>

static inline bool pll_is_locked(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
80003476:	fe 79 08 00 	mov	r9,-63488
8000347a:	72 58       	ld.w	r8,r9[0x14]
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
8000347c:	e2 18 00 10 	andl	r8,0x10,COH
80003480:	cf d0       	breq	8000347a <sysclk_enable_usb+0x56>
}

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80003482:	e0 69 05 01 	mov	r9,1281
80003486:	fe 78 08 00 	mov	r8,-63488
8000348a:	f1 49 00 64 	st.w	r8[100],r9
	genclk_enable_config(AVR32_USBC_GCLK_NUM, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
}
8000348e:	2f fd       	sub	sp,-4
80003490:	d8 02       	popm	pc
80003492:	00 00       	add	r0,r0
80003494:	80 00       	ld.sh	r0,r0[0x0]
80003496:	33 5c       	mov	r12,53
80003498:	80 00       	ld.sh	r0,r0[0x0]
8000349a:	33 88       	mov	r8,56

8000349c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000349c:	d4 01       	pushm	lr
static inline void osc_enable(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8000349e:	f0 1f 00 0a 	mcall	800034c4 <sysclk_init+0x28>
static inline bool osc_is_ready(uint8_t id)
{
	switch (id) {
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
800034a2:	fe 78 08 00 	mov	r8,-63488
800034a6:	70 59       	ld.w	r9,r8[0x14]
800034a8:	f3 d9 c0 01 	bfextu	r9,r9,0x0,0x1
800034ac:	cf d0       	breq	800034a6 <sysclk_init+0xa>
#ifdef BOARD_OSC0_HZ
	case SYSCLK_SRC_OSC0:
		osc_enable(OSC_ID_OSC0);
		osc_wait_ready(OSC_ID_OSC0);
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(BOARD_OSC0_HZ);
800034ae:	e0 6c 1b 00 	mov	r12,6912
800034b2:	ea 1c 00 b7 	orh	r12,0xb7
800034b6:	f0 1f 00 05 	mcall	800034c8 <sysclk_init+0x2c>
		sysclk_set_source(SYSCLK_SRC_OSC0);
800034ba:	30 1c       	mov	r12,1
800034bc:	f0 1f 00 04 	mcall	800034cc <sysclk_init+0x30>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800034c0:	d8 02       	popm	pc
800034c2:	00 00       	add	r0,r0
800034c4:	80 00       	ld.sh	r0,r0[0x0]
800034c6:	33 5c       	mov	r12,53
800034c8:	80 00       	ld.sh	r0,r0[0x0]
800034ca:	20 14       	sub	r4,1
800034cc:	80 00       	ld.sh	r0,r0[0x0]
800034ce:	33 ba       	mov	r10,59

800034d0 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
800034d0:	c0 08       	rjmp	800034d0 <_unhandled_interrupt>
800034d2:	d7 03       	nop

800034d4 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800034d4:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800034d8:	49 99       	lddpc	r9,8000353c <INTC_register_interrupt+0x68>
800034da:	f2 08 00 39 	add	r9,r9,r8<<0x3
800034de:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
800034e2:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800034e4:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800034e8:	58 0a       	cp.w	r10,0
800034ea:	c0 91       	brne	800034fc <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800034ec:	49 59       	lddpc	r9,80003540 <INTC_register_interrupt+0x6c>
800034ee:	49 6a       	lddpc	r10,80003544 <INTC_register_interrupt+0x70>
800034f0:	12 1a       	sub	r10,r9
800034f2:	fe 79 00 00 	mov	r9,-65536
800034f6:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
800034fa:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
800034fc:	58 1a       	cp.w	r10,1
800034fe:	c0 a1       	brne	80003512 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80003500:	49 09       	lddpc	r9,80003540 <INTC_register_interrupt+0x6c>
80003502:	49 2a       	lddpc	r10,80003548 <INTC_register_interrupt+0x74>
80003504:	12 1a       	sub	r10,r9
80003506:	bf aa       	sbr	r10,0x1e
80003508:	fe 79 00 00 	mov	r9,-65536
8000350c:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003510:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80003512:	58 2a       	cp.w	r10,2
80003514:	c0 a1       	brne	80003528 <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80003516:	48 b9       	lddpc	r9,80003540 <INTC_register_interrupt+0x6c>
80003518:	48 da       	lddpc	r10,8000354c <INTC_register_interrupt+0x78>
8000351a:	12 1a       	sub	r10,r9
8000351c:	bf ba       	sbr	r10,0x1f
8000351e:	fe 79 00 00 	mov	r9,-65536
80003522:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80003526:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80003528:	48 69       	lddpc	r9,80003540 <INTC_register_interrupt+0x6c>
8000352a:	48 aa       	lddpc	r10,80003550 <INTC_register_interrupt+0x7c>
8000352c:	12 1a       	sub	r10,r9
8000352e:	ea 1a c0 00 	orh	r10,0xc000
80003532:	fe 79 00 00 	mov	r9,-65536
80003536:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000353a:	5e fc       	retal	r12
8000353c:	80 00       	ld.sh	r0,r0[0x0]
8000353e:	d8 00       	acall	0x80
80003540:	80 00       	ld.sh	r0,r0[0x0]
80003542:	d6 00       	acall	0x60
80003544:	80 00       	ld.sh	r0,r0[0x0]
80003546:	d7 04       	*unknown*
80003548:	80 00       	ld.sh	r0,r0[0x0]
8000354a:	d7 12       	popm	r0-r3,r11-r12,lr
8000354c:	80 00       	ld.sh	r0,r0[0x0]
8000354e:	d7 20       	acall	0x72
80003550:	80 00       	ld.sh	r0,r0[0x0]
80003552:	d7 2e       	*unknown*

80003554 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
80003554:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
80003556:	49 18       	lddpc	r8,80003598 <INTC_init_interrupts+0x44>
80003558:	e3 b8 00 01 	mtsr	0x4,r8
8000355c:	49 0e       	lddpc	lr,8000359c <INTC_init_interrupts+0x48>
8000355e:	30 07       	mov	r7,0
80003560:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003562:	49 0c       	lddpc	r12,800035a0 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003564:	49 05       	lddpc	r5,800035a4 <INTC_init_interrupts+0x50>
80003566:	10 15       	sub	r5,r8
80003568:	fe 76 00 00 	mov	r6,-65536
8000356c:	c1 18       	rjmp	8000358e <INTC_init_interrupts+0x3a>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000356e:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80003570:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80003572:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80003574:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80003578:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000357a:	10 3a       	cp.w	r10,r8
8000357c:	fe 9b ff fc 	brhi	80003574 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80003580:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80003584:	2f f7       	sub	r7,-1
80003586:	2f 8e       	sub	lr,-8
80003588:	e0 47 00 2f 	cp.w	r7,47
8000358c:	c0 50       	breq	80003596 <INTC_init_interrupts+0x42>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
8000358e:	7c 08       	ld.w	r8,lr[0x0]
80003590:	58 08       	cp.w	r8,0
80003592:	ce e1       	brne	8000356e <INTC_init_interrupts+0x1a>
80003594:	cf 6b       	rjmp	80003580 <INTC_init_interrupts+0x2c>
80003596:	d8 22       	popm	r4-r7,pc
80003598:	80 00       	ld.sh	r0,r0[0x0]
8000359a:	d6 00       	acall	0x60
8000359c:	80 00       	ld.sh	r0,r0[0x0]
8000359e:	d8 00       	acall	0x80
800035a0:	80 00       	ld.sh	r0,r0[0x0]
800035a2:	34 d0       	mov	r0,77
800035a4:	80 00       	ld.sh	r0,r0[0x0]
800035a6:	d7 04       	*unknown*

800035a8 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800035a8:	fe 78 00 00 	mov	r8,-65536
800035ac:	e0 69 00 83 	mov	r9,131
800035b0:	f2 0c 01 0c 	sub	r12,r9,r12
800035b4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800035b8:	f2 ca ff c0 	sub	r10,r9,-64
800035bc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800035c0:	58 08       	cp.w	r8,0
800035c2:	c0 21       	brne	800035c6 <_get_interrupt_handler+0x1e>
800035c4:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
800035c6:	f0 08 12 00 	clz	r8,r8
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800035ca:	48 5a       	lddpc	r10,800035dc <_get_interrupt_handler+0x34>
800035cc:	f4 09 00 39 	add	r9,r10,r9<<0x3
800035d0:	f0 08 11 1f 	rsub	r8,r8,31
800035d4:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800035d6:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800035da:	5e fc       	retal	r12
800035dc:	80 00       	ld.sh	r0,r0[0x0]
800035de:	d8 00       	acall	0x80

800035e0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
800035e0:	e0 6d 80 00 	mov	sp,32768

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
800035e4:	48 e0       	lddpc	r0,8000361c <udata_clear_loop_end+0x6>
800035e6:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
800035ea:	d5 53       	csrf	0x15
  lda.w   r1, _edata
800035ec:	30 40       	mov	r0,4
  cp      r0, r1
800035ee:	e0 61 05 d8 	mov	r1,1496
  brhs    idata_load_loop_end
  lda.w   r2, _data_lma
800035f2:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
800035f4:	c0 62       	brcc	80003600 <idata_load_loop_end>
  st.d    r0++, r4
800035f6:	48 b2       	lddpc	r2,80003620 <udata_clear_loop_end+0xa>

800035f8 <idata_load_loop>:
  cp      r0, r1
800035f8:	a5 05       	ld.d	r4,r2++
  brlo    idata_load_loop
800035fa:	a1 24       	st.d	r0++,r4
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800035fc:	02 30       	cp.w	r0,r1
  lda.w   r1, _end
800035fe:	cf d3       	brcs	800035f8 <idata_load_loop>

80003600 <idata_load_loop_end>:
  cp      r0, r1
80003600:	e0 60 05 d8 	mov	r0,1496
  brhs    udata_clear_loop_end
  mov     r2, 0
80003604:	e0 61 0c 40 	mov	r1,3136
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80003608:	02 30       	cp.w	r0,r1
  cp      r0, r1
8000360a:	c0 62       	brcc	80003616 <udata_clear_loop_end>
  brlo    udata_clear_loop
8000360c:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000360e:	30 03       	mov	r3,0

80003610 <udata_clear_loop>:
80003610:	a1 22       	st.d	r0++,r2
80003612:	02 30       	cp.w	r0,r1
80003614:	cf e3       	brcs	80003610 <udata_clear_loop>

80003616 <udata_clear_loop_end>:
80003616:	fe cf f0 5a 	sub	pc,pc,-4006
8000361a:	d7 03       	nop
8000361c:	80 00       	ld.sh	r0,r0[0x0]
8000361e:	d6 00       	acall	0x60
80003620:	80 00       	ld.sh	r0,r0[0x0]
80003622:	e0 d0 5e fc 	satsub.w	r0,r0,24316

80003624 <board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
80003624:	5e fc       	retal	r12
80003626:	d7 03       	nop

80003628 <udi_cdc_comm_enable>:
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_comm_enabled = 0;
80003628:	49 0a       	lddpc	r10,80003668 <udi_cdc_comm_enable+0x40>
8000362a:	30 0b       	mov	r11,0
8000362c:	b4 8b       	st.b	r10[0x0],r11
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
8000362e:	30 09       	mov	r9,0
80003630:	48 f8       	lddpc	r8,8000366c <udi_cdc_comm_enable+0x44>
80003632:	b0 09       	st.h	r8[0x0],r9

	uid_cdc_state_msg[port].header.bmRequestType =
80003634:	48 f8       	lddpc	r8,80003670 <udi_cdc_comm_enable+0x48>
80003636:	3a 1c       	mov	r12,-95
80003638:	b0 8c       	st.b	r8[0x0],r12
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
8000363a:	32 0c       	mov	r12,32
8000363c:	b0 9c       	st.b	r8[0x1],r12
	uid_cdc_state_msg[port].header.wValue = LE16(0);
8000363e:	b0 19       	st.h	r8[0x2],r9
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
80003640:	b0 29       	st.h	r8[0x4],r9
	uid_cdc_state_msg[port].header.wLength = LE16(2);
80003642:	e0 6c 02 00 	mov	r12,512
80003646:	b0 3c       	st.h	r8[0x6],r12
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
80003648:	b0 49       	st.h	r8[0x8],r9

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
8000364a:	48 b8       	lddpc	r8,80003674 <udi_cdc_comm_enable+0x4c>
8000364c:	e0 69 01 00 	mov	r9,256
80003650:	ea 19 00 c2 	orh	r9,0xc2
80003654:	91 09       	st.w	r8[0x0],r9
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
80003656:	b0 cb       	st.b	r8[0x4],r11
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
80003658:	b0 db       	st.b	r8[0x5],r11
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
8000365a:	30 89       	mov	r9,8
8000365c:	b0 e9       	st.b	r8[0x6],r9
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
8000365e:	15 88       	ld.ub	r8,r10[0x0]
80003660:	2f f8       	sub	r8,-1
80003662:	b4 88       	st.b	r10[0x0],r8
	return true;
}
80003664:	5e ff       	retal	1
80003666:	00 00       	add	r0,r0
80003668:	00 00       	add	r0,r0
8000366a:	09 0c       	ld.w	r12,r4++
8000366c:	00 00       	add	r0,r0
8000366e:	09 b0       	ld.ub	r0,r4[0x3]
80003670:	00 00       	add	r0,r0
80003672:	09 1c       	ld.sh	r12,r4++
80003674:	00 00       	add	r0,r0
80003676:	08 74       	tst	r4,r4

80003678 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
80003678:	48 38       	lddpc	r8,80003684 <udi_cdc_comm_disable+0xc>
8000367a:	11 89       	ld.ub	r9,r8[0x0]
8000367c:	20 19       	sub	r9,1
8000367e:	b0 89       	st.b	r8[0x0],r9
}
80003680:	5e fc       	retal	r12
80003682:	00 00       	add	r0,r0
80003684:	00 00       	add	r0,r0
80003686:	09 0c       	ld.w	r12,r4++

80003688 <udi_cdc_data_disable>:
void udi_cdc_data_disable(void)
{
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
80003688:	48 58       	lddpc	r8,8000369c <udi_cdc_data_disable+0x14>
8000368a:	11 89       	ld.ub	r9,r8[0x0]
8000368c:	20 19       	sub	r9,1
8000368e:	b0 89       	st.b	r8[0x0],r9
	port = udi_cdc_nb_data_enabled;
80003690:	11 88       	ld.ub	r8,r8[0x0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
80003692:	30 09       	mov	r9,0
80003694:	48 38       	lddpc	r8,800036a0 <udi_cdc_data_disable+0x18>
80003696:	b0 89       	st.b	r8[0x0],r9
}
80003698:	5e fc       	retal	r12
8000369a:	00 00       	add	r0,r0
8000369c:	00 00       	add	r0,r0
8000369e:	08 7c       	tst	r12,r4
800036a0:	00 00       	add	r0,r0
800036a2:	09 12       	ld.sh	r2,r4++

800036a4 <udi_cdc_data_setup>:
}

bool udi_cdc_data_setup(void)
{
	return false;  // request Not supported
}
800036a4:	5e fd       	retal	0

800036a6 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
	return 0;      // CDC don't have multiple alternate setting
}
800036a6:	5e fd       	retal	0

800036a8 <udi_cdc_setup_to_port>:
	default:
		port = 0;
		break;
	}
	return port;
}
800036a8:	5e fd       	retal	0
800036aa:	d7 03       	nop

800036ac <udi_cdc_comm_setup>:
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
}

bool udi_cdc_comm_setup(void)
{
800036ac:	d4 01       	pushm	lr
	uint8_t port = udi_cdc_setup_to_port();
800036ae:	f0 1f 00 25 	mcall	80003740 <udi_cdc_comm_setup+0x94>

	if (Udd_setup_is_in()) {
800036b2:	4a 58       	lddpc	r8,80003744 <udi_cdc_comm_setup+0x98>
800036b4:	11 88       	ld.ub	r8,r8[0x0]
800036b6:	30 09       	mov	r9,0
800036b8:	f2 08 18 00 	cp.b	r8,r9
800036bc:	c1 d4       	brge	800036f6 <udi_cdc_comm_setup+0x4a>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800036be:	e2 18 00 60 	andl	r8,0x60,COH
800036c2:	e0 48 00 20 	cp.w	r8,32
800036c6:	c3 c1       	brne	8000373e <udi_cdc_comm_setup+0x92>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
800036c8:	49 f8       	lddpc	r8,80003744 <udi_cdc_comm_setup+0x98>
800036ca:	11 99       	ld.ub	r9,r8[0x1]
800036cc:	32 18       	mov	r8,33
800036ce:	f0 09 18 00 	cp.b	r9,r8
800036d2:	c3 61       	brne	8000373e <udi_cdc_comm_setup+0x92>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
800036d4:	49 c8       	lddpc	r8,80003744 <udi_cdc_comm_setup+0x98>
800036d6:	90 39       	ld.sh	r9,r8[0x6]
800036d8:	30 78       	mov	r8,7
800036da:	f0 09 19 00 	cp.h	r9,r8
800036de:	c3 01       	brne	8000373e <udi_cdc_comm_setup+0x92>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
800036e0:	49 98       	lddpc	r8,80003744 <udi_cdc_comm_setup+0x98>
800036e2:	f8 09 15 03 	lsl	r9,r12,0x3
800036e6:	f2 0c 01 0c 	sub	r12,r9,r12
800036ea:	49 89       	lddpc	r9,80003748 <udi_cdc_comm_setup+0x9c>
800036ec:	18 09       	add	r9,r12
800036ee:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
800036f0:	30 79       	mov	r9,7
800036f2:	b0 69       	st.h	r8[0xc],r9
800036f4:	da 0a       	popm	pc,r12=1
			}
		}
	}
	if (Udd_setup_is_out()) {
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
800036f6:	e2 18 00 60 	andl	r8,0x60,COH
800036fa:	e0 48 00 20 	cp.w	r8,32
800036fe:	c2 01       	brne	8000373e <udi_cdc_comm_setup+0x92>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
80003700:	49 18       	lddpc	r8,80003744 <udi_cdc_comm_setup+0x98>
80003702:	11 98       	ld.ub	r8,r8[0x1]
80003704:	32 09       	mov	r9,32
80003706:	f2 08 18 00 	cp.b	r8,r9
8000370a:	c0 60       	breq	80003716 <udi_cdc_comm_setup+0x6a>
8000370c:	32 29       	mov	r9,34
8000370e:	f2 08 18 00 	cp.b	r8,r9
80003712:	c1 61       	brne	8000373e <udi_cdc_comm_setup+0x92>
80003714:	da 0a       	popm	pc,r12=1
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
80003716:	48 c8       	lddpc	r8,80003744 <udi_cdc_comm_setup+0x98>
80003718:	90 39       	ld.sh	r9,r8[0x6]
8000371a:	30 78       	mov	r8,7
8000371c:	f0 09 19 00 	cp.h	r9,r8
80003720:	c0 f1       	brne	8000373e <udi_cdc_comm_setup+0x92>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
80003722:	48 98       	lddpc	r8,80003744 <udi_cdc_comm_setup+0x98>
80003724:	48 a9       	lddpc	r9,8000374c <udi_cdc_comm_setup+0xa0>
80003726:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
80003728:	f8 09 15 03 	lsl	r9,r12,0x3
8000372c:	f2 0c 01 0c 	sub	r12,r9,r12
80003730:	48 69       	lddpc	r9,80003748 <udi_cdc_comm_setup+0x9c>
80003732:	f2 0c 00 0c 	add	r12,r9,r12
80003736:	91 2c       	st.w	r8[0x8],r12
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
80003738:	30 79       	mov	r9,7
8000373a:	b0 69       	st.h	r8[0xc],r9
8000373c:	da 0a       	popm	pc,r12=1
						sizeof(usb_cdc_line_coding_t);
				return true;
8000373e:	d8 0a       	popm	pc,r12=0
80003740:	80 00       	ld.sh	r0,r0[0x0]
80003742:	36 a8       	mov	r8,106
80003744:	00 00       	add	r0,r0
80003746:	0a cc       	st.b	r5++,r12
80003748:	00 00       	add	r0,r0
8000374a:	08 74       	tst	r4,r4
8000374c:	80 00       	ld.sh	r0,r0[0x0]
8000374e:	37 50       	mov	r0,117

80003750 <udi_cdc_line_coding_received>:
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
80003750:	5e fc       	retal	r12
80003752:	d7 03       	nop

80003754 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
80003754:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003756:	e1 b8 00 00 	mfsr	r8,0x0
8000375a:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
8000375c:	d3 03       	ssrf	0x10

	return flags;
8000375e:	40 09       	lddsp	r9,sp[0x0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
80003760:	49 18       	lddpc	r8,800037a4 <udi_cdc_multi_get_free_tx_buffer+0x50>
80003762:	11 88       	ld.ub	r8,r8[0x0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
80003764:	49 1a       	lddpc	r10,800037a8 <udi_cdc_multi_get_free_tx_buffer+0x54>
80003766:	f4 08 05 1c 	ld.uh	r12,r10[r8<<0x1]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
8000376a:	e0 4c 00 40 	cp.w	r12,64
8000376e:	c1 11       	brne	80003790 <udi_cdc_multi_get_free_tx_buffer+0x3c>
		if ((!udi_cdc_tx_trans_ongoing[port])
80003770:	48 fa       	lddpc	r10,800037ac <udi_cdc_multi_get_free_tx_buffer+0x58>
80003772:	15 8a       	ld.ub	r10,r10[0x0]
80003774:	58 0a       	cp.w	r10,0
80003776:	c0 d1       	brne	80003790 <udi_cdc_multi_get_free_tx_buffer+0x3c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
80003778:	48 ea       	lddpc	r10,800037b0 <udi_cdc_multi_get_free_tx_buffer+0x5c>
8000377a:	15 8a       	ld.ub	r10,r10[0x0]

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
		if ((!udi_cdc_tx_trans_ongoing[port])
8000377c:	58 0a       	cp.w	r10,0
8000377e:	c0 91       	brne	80003790 <udi_cdc_multi_get_free_tx_buffer+0x3c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
80003780:	30 1b       	mov	r11,1
80003782:	48 ca       	lddpc	r10,800037b0 <udi_cdc_multi_get_free_tx_buffer+0x5c>
80003784:	b4 8b       	st.b	r10[0x0],r11
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
80003786:	58 08       	cp.w	r8,0
80003788:	5f 0a       	sreq	r10
8000378a:	48 78       	lddpc	r8,800037a4 <udi_cdc_multi_get_free_tx_buffer+0x50>
8000378c:	b0 8a       	st.b	r8[0x0],r10
8000378e:	30 0c       	mov	r12,0
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003790:	12 98       	mov	r8,r9
80003792:	e6 18 00 01 	andh	r8,0x1,COH
80003796:	c0 21       	brne	8000379a <udi_cdc_multi_get_free_tx_buffer+0x46>
      cpu_irq_enable();
80003798:	d5 03       	csrf	0x10
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
	cpu_irq_restore(flags);
	return retval;
}
8000379a:	f8 0c 11 40 	rsub	r12,r12,64
8000379e:	2f fd       	sub	sp,-4
800037a0:	5e fc       	retal	r12
800037a2:	00 00       	add	r0,r0
800037a4:	00 00       	add	r0,r0
800037a6:	08 80       	andn	r0,r4
800037a8:	00 00       	add	r0,r0
800037aa:	08 84       	andn	r4,r4
800037ac:	00 00       	add	r0,r0
800037ae:	09 18       	ld.sh	r8,r4++
800037b0:	00 00       	add	r0,r0
800037b2:	09 ac       	ld.ub	r12,r4[0x2]

800037b4 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
800037b4:	d4 01       	pushm	lr
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
800037b6:	f0 1f 00 03 	mcall	800037c0 <udi_cdc_multi_is_tx_ready+0xc>
}
800037ba:	5f 1c       	srne	r12
800037bc:	d8 02       	popm	pc
800037be:	00 00       	add	r0,r0
800037c0:	80 00       	ld.sh	r0,r0[0x0]
800037c2:	37 54       	mov	r4,117

800037c4 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
800037c4:	eb cd 40 fe 	pushm	r1-r7,lr
800037c8:	20 1d       	sub	sp,4
800037ca:	16 96       	mov	r6,r11

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
800037cc:	49 b8       	lddpc	r8,80003838 <udi_cdc_multi_putc+0x74>
800037ce:	11 e9       	ld.ub	r9,r8[0x6]
800037d0:	30 98       	mov	r8,9
800037d2:	f0 09 18 00 	cp.b	r9,r8
800037d6:	5f 03       	sreq	r3

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
800037d8:	30 07       	mov	r7,0
		if (!udi_cdc_data_running) {
800037da:	49 95       	lddpc	r5,8000383c <udi_cdc_multi_putc+0x78>
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
800037dc:	49 92       	lddpc	r2,80003840 <udi_cdc_multi_putc+0x7c>
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
800037de:	49 a4       	lddpc	r4,80003844 <udi_cdc_multi_putc+0x80>
800037e0:	49 a1       	lddpc	r1,80003848 <udi_cdc_multi_putc+0x84>

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
800037e2:	0e 9c       	mov	r12,r7
800037e4:	f0 1f 00 1a 	mcall	8000384c <udi_cdc_multi_putc+0x88>
800037e8:	c0 51       	brne	800037f2 <udi_cdc_multi_putc+0x2e>
		if (!udi_cdc_data_running) {
800037ea:	0b 88       	ld.ub	r8,r5[0x0]
800037ec:	58 08       	cp.w	r8,0
800037ee:	cf a1       	brne	800037e2 <udi_cdc_multi_putc+0x1e>
800037f0:	c2 08       	rjmp	80003830 <udi_cdc_multi_putc+0x6c>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800037f2:	e1 b8 00 00 	mfsr	r8,0x0
800037f6:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800037f8:	d3 03       	ssrf	0x10

	return flags;
800037fa:	40 0a       	lddsp	r10,sp[0x0]
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
800037fc:	05 88       	ld.ub	r8,r2[0x0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
800037fe:	e8 08 04 19 	ld.sh	r9,r4[r8<<0x1]
80003802:	f7 d9 c0 10 	bfextu	r11,r9,0x0,0x10
80003806:	f0 0c 15 06 	lsl	r12,r8,0x6
8000380a:	f8 0b 00 0b 	add	r11,r12,r11
8000380e:	e2 0b 0b 06 	st.b	r1[r11],r6
80003812:	2f f9       	sub	r9,-1
80003814:	e8 08 0a 19 	st.h	r4[r8<<0x1],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003818:	14 98       	mov	r8,r10
8000381a:	e6 18 00 01 	andh	r8,0x1,COH
8000381e:	c0 21       	brne	80003822 <udi_cdc_multi_putc+0x5e>
      cpu_irq_enable();
80003820:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (b_databit_9) {
80003822:	58 03       	cp.w	r3,0
80003824:	c0 31       	brne	8000382a <udi_cdc_multi_putc+0x66>
80003826:	30 1c       	mov	r12,1
80003828:	c0 58       	rjmp	80003832 <udi_cdc_multi_putc+0x6e>
		// Send MSB
		b_databit_9 = false;
		value = value >> 8;
8000382a:	a9 46       	asr	r6,0x8
8000382c:	0e 93       	mov	r3,r7
8000382e:	cd ab       	rjmp	800037e2 <udi_cdc_multi_putc+0x1e>
		goto udi_cdc_putc_process_one_byte;
80003830:	30 0c       	mov	r12,0
	}
	return true;
}
80003832:	2f fd       	sub	sp,-4
80003834:	e3 cd 80 fe 	ldm	sp++,r1-r7,pc
80003838:	00 00       	add	r0,r0
8000383a:	08 74       	tst	r4,r4
8000383c:	00 00       	add	r0,r0
8000383e:	09 12       	ld.sh	r2,r4++
80003840:	00 00       	add	r0,r0
80003842:	08 80       	andn	r0,r4
80003844:	00 00       	add	r0,r0
80003846:	08 84       	andn	r4,r4
80003848:	00 00       	add	r0,r0
8000384a:	08 88       	andn	r8,r4
8000384c:	80 00       	ld.sh	r0,r0[0x0]
8000384e:	37 b4       	mov	r4,123

80003850 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
80003850:	d4 01       	pushm	lr
	return udi_cdc_multi_putc(0, value);
80003852:	18 9b       	mov	r11,r12
80003854:	30 0c       	mov	r12,0
80003856:	f0 1f 00 02 	mcall	8000385c <udi_cdc_putc+0xc>
}
8000385a:	d8 02       	popm	pc
8000385c:	80 00       	ld.sh	r0,r0[0x0]
8000385e:	37 c4       	mov	r4,124

80003860 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
80003860:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003862:	e1 b8 00 00 	mfsr	r8,0x0
80003866:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80003868:	d3 03       	ssrf	0x10

	return flags;
8000386a:	40 09       	lddsp	r9,sp[0x0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
8000386c:	48 88       	lddpc	r8,8000388c <udi_cdc_multi_get_nb_received_data+0x2c>
8000386e:	90 08       	ld.sh	r8,r8[0x0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
80003870:	48 8a       	lddpc	r10,80003890 <udi_cdc_multi_get_nb_received_data+0x30>
80003872:	15 8b       	ld.ub	r11,r10[0x0]
80003874:	48 8a       	lddpc	r10,80003894 <udi_cdc_multi_get_nb_received_data+0x34>
80003876:	f4 0b 04 1c 	ld.sh	r12,r10[r11<<0x1]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000387a:	e6 19 00 01 	andh	r9,0x1,COH
8000387e:	c0 21       	brne	80003882 <udi_cdc_multi_get_nb_received_data+0x22>
      cpu_irq_enable();
80003880:	d5 03       	csrf	0x10
   }

	barrier();
80003882:	5c 7c       	castu.h	r12
80003884:	5c 78       	castu.h	r8
	cpu_irq_restore(flags);
	return nb_received;
}
80003886:	10 1c       	sub	r12,r8
80003888:	2f fd       	sub	sp,-4
8000388a:	5e fc       	retal	r12
8000388c:	00 00       	add	r0,r0
8000388e:	09 0e       	ld.w	lr,r4++
80003890:	00 00       	add	r0,r0
80003892:	09 14       	ld.sh	r4,r4++
80003894:	00 00       	add	r0,r0
80003896:	09 08       	ld.w	r8,r4++

80003898 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
80003898:	d4 01       	pushm	lr
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
8000389a:	f0 1f 00 03 	mcall	800038a4 <udi_cdc_multi_is_rx_ready+0xc>
}
8000389e:	5f 1c       	srne	r12
800038a0:	d8 02       	popm	pc
800038a2:	00 00       	add	r0,r0
800038a4:	80 00       	ld.sh	r0,r0[0x0]
800038a6:	38 60       	mov	r0,-122

800038a8 <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
800038a8:	d4 01       	pushm	lr
	return udi_cdc_multi_is_rx_ready(0);
800038aa:	30 0c       	mov	r12,0
800038ac:	f0 1f 00 02 	mcall	800038b4 <udi_cdc_is_rx_ready+0xc>
}
800038b0:	d8 02       	popm	pc
800038b2:	00 00       	add	r0,r0
800038b4:	80 00       	ld.sh	r0,r0[0x0]
800038b6:	38 98       	mov	r8,-119

800038b8 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
800038b8:	eb cd 40 80 	pushm	r7,lr
800038bc:	20 1d       	sub	sp,4

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
800038be:	e1 b8 00 00 	mfsr	r8,0x0
800038c2:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
800038c4:	d3 03       	ssrf	0x10

	return flags;
800038c6:	40 08       	lddsp	r8,sp[0x0]
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
800038c8:	49 99       	lddpc	r9,8000392c <udi_cdc_rx_start+0x74>
800038ca:	13 87       	ld.ub	r7,r9[0x0]
	if (udi_cdc_rx_trans_ongoing[port] ||
800038cc:	49 99       	lddpc	r9,80003930 <udi_cdc_rx_start+0x78>
800038ce:	13 89       	ld.ub	r9,r9[0x0]
800038d0:	58 09       	cp.w	r9,0
800038d2:	c0 91       	brne	800038e4 <udi_cdc_rx_start+0x2c>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
800038d4:	49 89       	lddpc	r9,80003934 <udi_cdc_rx_start+0x7c>
800038d6:	92 0a       	ld.sh	r10,r9[0x0]
800038d8:	49 89       	lddpc	r9,80003938 <udi_cdc_rx_start+0x80>
800038da:	f2 07 04 19 	ld.sh	r9,r9[r7<<0x1]
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
800038de:	f2 0a 19 00 	cp.h	r10,r9
800038e2:	c0 72       	brcc	800038f0 <udi_cdc_rx_start+0x38>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800038e4:	e6 18 00 01 	andh	r8,0x1,COH
800038e8:	c0 21       	brne	800038ec <udi_cdc_rx_start+0x34>
      cpu_irq_enable();
800038ea:	d5 03       	csrf	0x10
   }

	barrier();
800038ec:	30 0c       	mov	r12,0
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
		return false;
800038ee:	c1 b8       	rjmp	80003924 <udi_cdc_rx_start+0x6c>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
800038f0:	30 0a       	mov	r10,0
800038f2:	49 19       	lddpc	r9,80003934 <udi_cdc_rx_start+0x7c>
800038f4:	b2 0a       	st.h	r9[0x0],r10
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
800038f6:	58 07       	cp.w	r7,0
800038f8:	5f 0a       	sreq	r10
800038fa:	48 d9       	lddpc	r9,8000392c <udi_cdc_rx_start+0x74>
800038fc:	b2 8a       	st.b	r9[0x0],r10

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
800038fe:	30 1a       	mov	r10,1
80003900:	48 c9       	lddpc	r9,80003930 <udi_cdc_rx_start+0x78>
80003902:	b2 8a       	st.b	r9[0x0],r10
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003904:	e6 18 00 01 	andh	r8,0x1,COH
80003908:	c0 21       	brne	8000390c <udi_cdc_rx_start+0x54>
      cpu_irq_enable();
8000390a:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	if (udi_cdc_multi_is_rx_ready(port)) {
8000390c:	30 0c       	mov	r12,0
8000390e:	f0 1f 00 0c 	mcall	8000393c <udi_cdc_rx_start+0x84>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
80003912:	a7 67       	lsl	r7,0x6
80003914:	48 b8       	lddpc	r8,80003940 <udi_cdc_rx_start+0x88>
80003916:	34 09       	mov	r9,64
80003918:	48 ba       	lddpc	r10,80003944 <udi_cdc_rx_start+0x8c>
8000391a:	0e 0a       	add	r10,r7
8000391c:	30 1b       	mov	r11,1
8000391e:	30 2c       	mov	r12,2
80003920:	f0 1f 00 0a 	mcall	80003948 <udi_cdc_rx_start+0x90>
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
80003924:	2f fd       	sub	sp,-4
80003926:	e3 cd 80 80 	ldm	sp++,r7,pc
8000392a:	00 00       	add	r0,r0
8000392c:	00 00       	add	r0,r0
8000392e:	09 14       	ld.sh	r4,r4++
80003930:	00 00       	add	r0,r0
80003932:	09 a8       	ld.ub	r8,r4[0x2]
80003934:	00 00       	add	r0,r0
80003936:	09 0e       	ld.w	lr,r4++
80003938:	00 00       	add	r0,r0
8000393a:	09 08       	ld.w	r8,r4++
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	38 98       	mov	r8,-119
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	39 e8       	mov	r8,-98
80003944:	00 00       	add	r0,r0
80003946:	09 28       	ld.uh	r8,r4++
80003948:	80 00       	ld.sh	r0,r0[0x0]
8000394a:	29 f0       	sub	r0,-97

8000394c <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
8000394c:	d4 31       	pushm	r0-r7,lr
8000394e:	20 1d       	sub	sp,4

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
80003950:	49 b8       	lddpc	r8,800039bc <udi_cdc_multi_getc+0x70>
80003952:	11 e9       	ld.ub	r9,r8[0x6]
80003954:	30 98       	mov	r8,9
80003956:	f0 09 18 00 	cp.b	r9,r8
8000395a:	5f 02       	sreq	r2
8000395c:	30 03       	mov	r3,0

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
8000395e:	49 97       	lddpc	r7,800039c0 <udi_cdc_multi_getc+0x74>
	buf_sel = udi_cdc_rx_buf_sel[port];
80003960:	49 96       	lddpc	r6,800039c4 <udi_cdc_multi_getc+0x78>
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
80003962:	49 a5       	lddpc	r5,800039c8 <udi_cdc_multi_getc+0x7c>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
80003964:	49 a0       	lddpc	r0,800039cc <udi_cdc_multi_getc+0x80>
	udi_cdc_rx_pos[port] = pos+1;

	udi_cdc_rx_start(port);
80003966:	06 91       	mov	r1,r3
	pos = udi_cdc_rx_pos[port];
	buf_sel = udi_cdc_rx_buf_sel[port];
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
	cpu_irq_restore(flags);
	while (again) {
		if (!udi_cdc_data_running) {
80003968:	49 a4       	lddpc	r4,800039d0 <udi_cdc_multi_getc+0x84>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000396a:	e1 b8 00 00 	mfsr	r8,0x0
8000396e:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80003970:	d3 03       	ssrf	0x10

	return flags;
80003972:	40 0b       	lddsp	r11,sp[0x0]
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
80003974:	8e 08       	ld.sh	r8,r7[0x0]
	buf_sel = udi_cdc_rx_buf_sel[port];
80003976:	0d 89       	ld.ub	r9,r6[0x0]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
80003978:	ea 09 04 1a 	ld.sh	r10,r5[r9<<0x1]
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000397c:	e6 1b 00 01 	andh	r11,0x1,COH
80003980:	c0 21       	brne	80003984 <udi_cdc_multi_getc+0x38>
      cpu_irq_enable();
80003982:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);
	while (again) {
80003984:	f4 08 19 00 	cp.h	r8,r10
80003988:	c0 53       	brcs	80003992 <udi_cdc_multi_getc+0x46>
		if (!udi_cdc_data_running) {
8000398a:	09 88       	ld.ub	r8,r4[0x0]
8000398c:	58 08       	cp.w	r8,0
8000398e:	ce e1       	brne	8000396a <udi_cdc_multi_getc+0x1e>
80003990:	c1 28       	rjmp	800039b4 <udi_cdc_multi_getc+0x68>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
80003992:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80003996:	a7 69       	lsl	r9,0x6
80003998:	14 09       	add	r9,r10
8000399a:	e0 09 07 09 	ld.ub	r9,r0[r9]
8000399e:	12 43       	or	r3,r9
	udi_cdc_rx_pos[port] = pos+1;
800039a0:	2f f8       	sub	r8,-1
800039a2:	ae 08       	st.h	r7[0x0],r8

	udi_cdc_rx_start(port);
800039a4:	02 9c       	mov	r12,r1
800039a6:	f0 1f 00 0c 	mcall	800039d4 <udi_cdc_multi_getc+0x88>

	if (b_databit_9) {
800039aa:	58 02       	cp.w	r2,0
800039ac:	c0 50       	breq	800039b6 <udi_cdc_multi_getc+0x6a>
		// Receive MSB
		b_databit_9 = false;
		rx_data = rx_data << 8;
800039ae:	a9 63       	lsl	r3,0x8
800039b0:	02 92       	mov	r2,r1
800039b2:	cd cb       	rjmp	8000396a <udi_cdc_multi_getc+0x1e>
		goto udi_cdc_getc_process_one_byte;
800039b4:	30 03       	mov	r3,0
	}
	return rx_data;
}
800039b6:	06 9c       	mov	r12,r3
800039b8:	2f fd       	sub	sp,-4
800039ba:	d8 32       	popm	r0-r7,pc
800039bc:	00 00       	add	r0,r0
800039be:	08 74       	tst	r4,r4
800039c0:	00 00       	add	r0,r0
800039c2:	09 0e       	ld.w	lr,r4++
800039c4:	00 00       	add	r0,r0
800039c6:	09 14       	ld.sh	r4,r4++
800039c8:	00 00       	add	r0,r0
800039ca:	09 08       	ld.w	r8,r4++
800039cc:	00 00       	add	r0,r0
800039ce:	09 28       	ld.uh	r8,r4++
800039d0:	00 00       	add	r0,r0
800039d2:	09 12       	ld.sh	r2,r4++
800039d4:	80 00       	ld.sh	r0,r0[0x0]
800039d6:	38 b8       	mov	r8,-117

800039d8 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
800039d8:	d4 01       	pushm	lr
	return udi_cdc_multi_getc(0);
800039da:	30 0c       	mov	r12,0
800039dc:	f0 1f 00 02 	mcall	800039e4 <udi_cdc_getc+0xc>
}
800039e0:	d8 02       	popm	pc
800039e2:	00 00       	add	r0,r0
800039e4:	80 00       	ld.sh	r0,r0[0x0]
800039e6:	39 4c       	mov	r12,-108

800039e8 <udi_cdc_data_received>:
			udi_cdc_data_received);
}


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
800039e8:	d4 01       	pushm	lr
800039ea:	14 9e       	mov	lr,r10
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
800039ec:	58 0c       	cp.w	r12,0
800039ee:	c1 c1       	brne	80003a26 <udi_cdc_data_received+0x3e>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
800039f0:	48 e8       	lddpc	r8,80003a28 <udi_cdc_data_received+0x40>
800039f2:	11 88       	ld.ub	r8,r8[0x0]
800039f4:	58 08       	cp.w	r8,0
800039f6:	5f 0a       	sreq	r10
	if (!n) {
800039f8:	58 0b       	cp.w	r11,0
800039fa:	c0 d1       	brne	80003a14 <udi_cdc_data_received+0x2c>
		udd_ep_run( ep,
800039fc:	a7 6a       	lsl	r10,0x6
800039fe:	fe c8 00 16 	sub	r8,pc,22
80003a02:	34 09       	mov	r9,64
80003a04:	48 ab       	lddpc	r11,80003a2c <udi_cdc_data_received+0x44>
80003a06:	f6 0a 00 0a 	add	r10,r11,r10
80003a0a:	30 1b       	mov	r11,1
80003a0c:	1c 9c       	mov	r12,lr
80003a0e:	f0 1f 00 09 	mcall	80003a30 <udi_cdc_data_received+0x48>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
80003a12:	d8 02       	popm	pc
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
80003a14:	48 88       	lddpc	r8,80003a34 <udi_cdc_data_received+0x4c>
80003a16:	f0 0a 0a 1b 	st.h	r8[r10<<0x1],r11
	udi_cdc_rx_trans_ongoing[port] = false;
80003a1a:	30 09       	mov	r9,0
80003a1c:	48 78       	lddpc	r8,80003a38 <udi_cdc_data_received+0x50>
80003a1e:	b0 89       	st.b	r8[0x0],r9
	udi_cdc_rx_start(port);
80003a20:	30 0c       	mov	r12,0
80003a22:	f0 1f 00 07 	mcall	80003a3c <udi_cdc_data_received+0x54>
80003a26:	d8 02       	popm	pc
80003a28:	00 00       	add	r0,r0
80003a2a:	09 14       	ld.sh	r4,r4++
80003a2c:	00 00       	add	r0,r0
80003a2e:	09 28       	ld.uh	r8,r4++
80003a30:	80 00       	ld.sh	r0,r0[0x0]
80003a32:	29 f0       	sub	r0,-97
80003a34:	00 00       	add	r0,r0
80003a36:	09 08       	ld.w	r8,r4++
80003a38:	00 00       	add	r0,r0
80003a3a:	09 a8       	ld.ub	r8,r4[0x2]
80003a3c:	80 00       	ld.sh	r0,r0[0x0]
80003a3e:	38 b8       	mov	r8,-117

80003a40 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
80003a40:	eb cd 40 e0 	pushm	r5-r7,lr
80003a44:	20 1d       	sub	sp,4

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
80003a46:	4c 18       	lddpc	r8,80003b48 <udi_cdc_tx_send+0x108>
80003a48:	11 88       	ld.ub	r8,r8[0x0]
80003a4a:	58 08       	cp.w	r8,0
80003a4c:	e0 81 00 7b 	brne	80003b42 <udi_cdc_tx_send+0x102>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
80003a50:	f0 1f 00 3f 	mcall	80003b4c <udi_cdc_tx_send+0x10c>
80003a54:	c0 90       	breq	80003a66 <udi_cdc_tx_send+0x26>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
80003a56:	4b f8       	lddpc	r8,80003b50 <udi_cdc_tx_send+0x110>
80003a58:	90 07       	ld.sh	r7,r8[0x0]
80003a5a:	f0 1f 00 3f 	mcall	80003b54 <udi_cdc_tx_send+0x114>
80003a5e:	f8 07 19 00 	cp.h	r7,r12
80003a62:	c0 91       	brne	80003a74 <udi_cdc_tx_send+0x34>
80003a64:	c6 f8       	rjmp	80003b42 <udi_cdc_tx_send+0x102>
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
80003a66:	4b b8       	lddpc	r8,80003b50 <udi_cdc_tx_send+0x110>
80003a68:	90 07       	ld.sh	r7,r8[0x0]
80003a6a:	f0 1f 00 3c 	mcall	80003b58 <udi_cdc_tx_send+0x118>
80003a6e:	f8 07 19 00 	cp.h	r7,r12
80003a72:	c6 80       	breq	80003b42 <udi_cdc_tx_send+0x102>

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80003a74:	e1 b8 00 00 	mfsr	r8,0x0
80003a78:	50 08       	stdsp	sp[0x0],r8
	cpu_irq_disable();
80003a7a:	d3 03       	ssrf	0x10

	return flags;
80003a7c:	40 06       	lddsp	r6,sp[0x0]
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
80003a7e:	4b 88       	lddpc	r8,80003b5c <udi_cdc_tx_send+0x11c>
80003a80:	11 87       	ld.ub	r7,r8[0x0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
80003a82:	4b 88       	lddpc	r8,80003b60 <udi_cdc_tx_send+0x120>
80003a84:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003a88:	30 08       	mov	r8,0
80003a8a:	f0 09 19 00 	cp.h	r9,r8
80003a8e:	c1 f1       	brne	80003acc <udi_cdc_tx_send+0x8c>
		sof_zlp_counter++;
80003a90:	4b 58       	lddpc	r8,80003b64 <udi_cdc_tx_send+0x124>
80003a92:	90 09       	ld.sh	r9,r8[0x0]
80003a94:	2f f9       	sub	r9,-1
80003a96:	b0 09       	st.h	r8[0x0],r9
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
80003a98:	f0 1f 00 2d 	mcall	80003b4c <udi_cdc_tx_send+0x10c>
80003a9c:	c0 81       	brne	80003aac <udi_cdc_tx_send+0x6c>
80003a9e:	4b 28       	lddpc	r8,80003b64 <udi_cdc_tx_send+0x124>
80003aa0:	90 09       	ld.sh	r9,r8[0x0]
80003aa2:	36 38       	mov	r8,99
80003aa4:	f0 09 19 00 	cp.h	r9,r8
80003aa8:	e0 88 00 0d 	brls	80003ac2 <udi_cdc_tx_send+0x82>
80003aac:	f0 1f 00 28 	mcall	80003b4c <udi_cdc_tx_send+0x10c>
80003ab0:	c0 e0       	breq	80003acc <udi_cdc_tx_send+0x8c>
80003ab2:	4a d8       	lddpc	r8,80003b64 <udi_cdc_tx_send+0x124>
80003ab4:	90 09       	ld.sh	r9,r8[0x0]
80003ab6:	e0 68 03 1f 	mov	r8,799
80003aba:	f0 09 19 00 	cp.h	r9,r8
80003abe:	e0 8b 00 07 	brhi	80003acc <udi_cdc_tx_send+0x8c>
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003ac2:	e6 16 00 01 	andh	r6,0x1,COH
80003ac6:	c0 21       	brne	80003aca <udi_cdc_tx_send+0x8a>
      cpu_irq_enable();
80003ac8:	d5 03       	csrf	0x10
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
			return;
80003aca:	c3 c8       	rjmp	80003b42 <udi_cdc_tx_send+0x102>
		}
	}
	sof_zlp_counter = 0;
80003acc:	30 09       	mov	r9,0
80003ace:	4a 68       	lddpc	r8,80003b64 <udi_cdc_tx_send+0x124>
80003ad0:	b0 09       	st.h	r8[0x0],r9

	if (!udi_cdc_tx_both_buf_to_send[port]) {
80003ad2:	4a 68       	lddpc	r8,80003b68 <udi_cdc_tx_send+0x128>
80003ad4:	11 88       	ld.ub	r8,r8[0x0]
80003ad6:	58 08       	cp.w	r8,0
80003ad8:	c0 61       	brne	80003ae4 <udi_cdc_tx_send+0xa4>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
80003ada:	58 07       	cp.w	r7,0
80003adc:	5f 09       	sreq	r9
80003ade:	4a 08       	lddpc	r8,80003b5c <udi_cdc_tx_send+0x11c>
80003ae0:	b0 89       	st.b	r8[0x0],r9
80003ae2:	c0 38       	rjmp	80003ae8 <udi_cdc_tx_send+0xa8>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
80003ae4:	58 07       	cp.w	r7,0
80003ae6:	5f 07       	sreq	r7
	}
	udi_cdc_tx_trans_ongoing[port] = true;
80003ae8:	30 19       	mov	r9,1
80003aea:	49 88       	lddpc	r8,80003b48 <udi_cdc_tx_send+0x108>
80003aec:	b0 89       	st.b	r8[0x0],r9
static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
80003aee:	e6 16 00 01 	andh	r6,0x1,COH
80003af2:	c0 21       	brne	80003af6 <udi_cdc_tx_send+0xb6>
      cpu_irq_enable();
80003af4:	d5 03       	csrf	0x10
	cpu_irq_restore(flags);

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
80003af6:	0e 95       	mov	r5,r7
80003af8:	49 a8       	lddpc	r8,80003b60 <udi_cdc_tx_send+0x120>
80003afa:	f0 07 04 19 	ld.sh	r9,r8[r7<<0x1]
80003afe:	34 08       	mov	r8,64
80003b00:	f0 09 19 00 	cp.h	r9,r8
80003b04:	5f 16       	srne	r6
	if (b_short_packet) {
80003b06:	58 06       	cp.w	r6,0
80003b08:	c0 e0       	breq	80003b24 <udi_cdc_tx_send+0xe4>
		if (udd_is_high_speed()) {
80003b0a:	f0 1f 00 11 	mcall	80003b4c <udi_cdc_tx_send+0x10c>
80003b0e:	c0 60       	breq	80003b1a <udi_cdc_tx_send+0xda>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
80003b10:	f0 1f 00 11 	mcall	80003b54 <udi_cdc_tx_send+0x114>
80003b14:	48 f8       	lddpc	r8,80003b50 <udi_cdc_tx_send+0x110>
80003b16:	b0 0c       	st.h	r8[0x0],r12
80003b18:	c0 98       	rjmp	80003b2a <udi_cdc_tx_send+0xea>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
80003b1a:	f0 1f 00 10 	mcall	80003b58 <udi_cdc_tx_send+0x118>
80003b1e:	48 d8       	lddpc	r8,80003b50 <udi_cdc_tx_send+0x110>
80003b20:	b0 0c       	st.h	r8[0x0],r12
80003b22:	c0 48       	rjmp	80003b2a <udi_cdc_tx_send+0xea>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
80003b24:	30 09       	mov	r9,0
80003b26:	48 b8       	lddpc	r8,80003b50 <udi_cdc_tx_send+0x110>
80003b28:	b0 09       	st.h	r8[0x0],r9
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
80003b2a:	a7 67       	lsl	r7,0x6
80003b2c:	49 08       	lddpc	r8,80003b6c <udi_cdc_tx_send+0x12c>
80003b2e:	48 d9       	lddpc	r9,80003b60 <udi_cdc_tx_send+0x120>
80003b30:	f2 05 05 19 	ld.uh	r9,r9[r5<<0x1]
80003b34:	48 fa       	lddpc	r10,80003b70 <udi_cdc_tx_send+0x130>
80003b36:	0e 0a       	add	r10,r7
80003b38:	0c 9b       	mov	r11,r6
80003b3a:	e0 6c 00 81 	mov	r12,129
80003b3e:	f0 1f 00 0e 	mcall	80003b74 <udi_cdc_tx_send+0x134>
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
80003b42:	2f fd       	sub	sp,-4
80003b44:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003b48:	00 00       	add	r0,r0
80003b4a:	09 18       	ld.sh	r8,r4++
80003b4c:	80 00       	ld.sh	r0,r0[0x0]
80003b4e:	23 80       	sub	r0,56
80003b50:	00 00       	add	r0,r0
80003b52:	09 10       	ld.sh	r0,r4++
80003b54:	80 00       	ld.sh	r0,r0[0x0]
80003b56:	23 bc       	sub	r12,59
80003b58:	80 00       	ld.sh	r0,r0[0x0]
80003b5a:	23 b0       	sub	r0,59
80003b5c:	00 00       	add	r0,r0
80003b5e:	08 80       	andn	r0,r4
80003b60:	00 00       	add	r0,r0
80003b62:	08 84       	andn	r4,r4
80003b64:	00 00       	add	r0,r0
80003b66:	08 70       	tst	r0,r4
80003b68:	00 00       	add	r0,r0
80003b6a:	09 ac       	ld.ub	r12,r4[0x2]
80003b6c:	80 00       	ld.sh	r0,r0[0x0]
80003b6e:	3b 88       	mov	r8,-72
80003b70:	00 00       	add	r0,r0
80003b72:	08 88       	andn	r8,r4
80003b74:	80 00       	ld.sh	r0,r0[0x0]
80003b76:	29 f0       	sub	r0,-97

80003b78 <udi_cdc_data_sof_notify>:
{
	return 0;      // CDC don't have multiple alternate setting
}

void udi_cdc_data_sof_notify(void)
{
80003b78:	d4 01       	pushm	lr
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
80003b7a:	30 0c       	mov	r12,0
80003b7c:	f0 1f 00 02 	mcall	80003b84 <udi_cdc_data_sof_notify+0xc>
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
80003b80:	d8 02       	popm	pc
80003b82:	00 00       	add	r0,r0
80003b84:	80 00       	ld.sh	r0,r0[0x0]
80003b86:	3a 40       	mov	r0,-92

80003b88 <udi_cdc_data_sent>:
	udi_cdc_rx_start(port);
}


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
80003b88:	d4 01       	pushm	lr
	default:
		port = 0;
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
80003b8a:	58 0c       	cp.w	r12,0
80003b8c:	c1 21       	brne	80003bb0 <udi_cdc_data_sent+0x28>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
80003b8e:	48 a8       	lddpc	r8,80003bb4 <udi_cdc_data_sent+0x2c>
80003b90:	11 88       	ld.ub	r8,r8[0x0]
80003b92:	58 08       	cp.w	r8,0
80003b94:	f9 b9 01 00 	movne	r9,0
80003b98:	f9 b9 00 02 	moveq	r9,2
80003b9c:	30 08       	mov	r8,0
80003b9e:	48 7a       	lddpc	r10,80003bb8 <udi_cdc_data_sent+0x30>
80003ba0:	f4 09 0a 08 	st.h	r10[r9],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
80003ba4:	48 69       	lddpc	r9,80003bbc <udi_cdc_data_sent+0x34>
80003ba6:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_tx_trans_ongoing[port] = false;
80003ba8:	48 69       	lddpc	r9,80003bc0 <udi_cdc_data_sent+0x38>
80003baa:	b2 88       	st.b	r9[0x0],r8

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
80003bac:	f0 1f 00 06 	mcall	80003bc4 <udi_cdc_data_sent+0x3c>
80003bb0:	d8 02       	popm	pc
80003bb2:	00 00       	add	r0,r0
80003bb4:	00 00       	add	r0,r0
80003bb6:	08 80       	andn	r0,r4
80003bb8:	00 00       	add	r0,r0
80003bba:	08 84       	andn	r4,r4
80003bbc:	00 00       	add	r0,r0
80003bbe:	09 ac       	ld.ub	r12,r4[0x2]
80003bc0:	00 00       	add	r0,r0
80003bc2:	09 18       	ld.sh	r8,r4++
80003bc4:	80 00       	ld.sh	r0,r0[0x0]
80003bc6:	3a 40       	mov	r0,-92

80003bc8 <udi_cdc_data_enable>:
	udi_cdc_nb_comm_enabled++;
	return true;
}

bool udi_cdc_data_enable(void)
{
80003bc8:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
	udi_cdc_nb_data_enabled = 0;
80003bcc:	30 06       	mov	r6,0
80003bce:	49 88       	lddpc	r8,80003c2c <udi_cdc_data_enable+0x64>
80003bd0:	b0 86       	st.b	r8[0x0],r6
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
80003bd2:	49 88       	lddpc	r8,80003c30 <udi_cdc_data_enable+0x68>
80003bd4:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_both_buf_to_send[port] = false;
80003bd6:	49 88       	lddpc	r8,80003c34 <udi_cdc_data_enable+0x6c>
80003bd8:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_sel[port] = 0;
80003bda:	49 88       	lddpc	r8,80003c38 <udi_cdc_data_enable+0x70>
80003bdc:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_tx_buf_nb[port][0] = 0;
80003bde:	49 88       	lddpc	r8,80003c3c <udi_cdc_data_enable+0x74>
80003be0:	30 07       	mov	r7,0
80003be2:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_buf_nb[port][1] = 0;
80003be4:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_tx_sof_num[port] = 0;
80003be6:	49 78       	lddpc	r8,80003c40 <udi_cdc_data_enable+0x78>
80003be8:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_tx_send(port);
80003bea:	30 0c       	mov	r12,0
80003bec:	f0 1f 00 16 	mcall	80003c44 <udi_cdc_data_enable+0x7c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
80003bf0:	49 68       	lddpc	r8,80003c48 <udi_cdc_data_enable+0x80>
80003bf2:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_sel[port] = 0;
80003bf4:	49 68       	lddpc	r8,80003c4c <udi_cdc_data_enable+0x84>
80003bf6:	b0 86       	st.b	r8[0x0],r6
	udi_cdc_rx_buf_nb[port][0] = 0;
80003bf8:	49 68       	lddpc	r8,80003c50 <udi_cdc_data_enable+0x88>
80003bfa:	b0 07       	st.h	r8[0x0],r7
	udi_cdc_rx_buf_nb[port][1] = 0;
80003bfc:	b0 17       	st.h	r8[0x2],r7
	udi_cdc_rx_pos[port] = 0;
80003bfe:	49 68       	lddpc	r8,80003c54 <udi_cdc_data_enable+0x8c>
80003c00:	b0 07       	st.h	r8[0x0],r7
	if (!udi_cdc_rx_start(port)) {
80003c02:	30 0c       	mov	r12,0
80003c04:	f0 1f 00 15 	mcall	80003c58 <udi_cdc_data_enable+0x90>
80003c08:	c1 00       	breq	80003c28 <udi_cdc_data_enable+0x60>
		return false;
	}
	udi_cdc_nb_data_enabled++;
80003c0a:	48 98       	lddpc	r8,80003c2c <udi_cdc_data_enable+0x64>
80003c0c:	11 89       	ld.ub	r9,r8[0x0]
80003c0e:	2f f9       	sub	r9,-1
80003c10:	b0 89       	st.b	r8[0x0],r9
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
80003c12:	11 89       	ld.ub	r9,r8[0x0]
80003c14:	30 18       	mov	r8,1
80003c16:	f0 09 18 00 	cp.b	r9,r8
80003c1a:	c0 30       	breq	80003c20 <udi_cdc_data_enable+0x58>
80003c1c:	e3 cf 90 c0 	ldm	sp++,r6-r7,pc,r12=1
		udi_cdc_data_running = true;
80003c20:	30 19       	mov	r9,1
80003c22:	48 f8       	lddpc	r8,80003c5c <udi_cdc_data_enable+0x94>
80003c24:	b0 89       	st.b	r8[0x0],r9
80003c26:	30 1c       	mov	r12,1
	}
	return true;
}
80003c28:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003c2c:	00 00       	add	r0,r0
80003c2e:	08 7c       	tst	r12,r4
80003c30:	00 00       	add	r0,r0
80003c32:	09 18       	ld.sh	r8,r4++
80003c34:	00 00       	add	r0,r0
80003c36:	09 ac       	ld.ub	r12,r4[0x2]
80003c38:	00 00       	add	r0,r0
80003c3a:	08 80       	andn	r0,r4
80003c3c:	00 00       	add	r0,r0
80003c3e:	08 84       	andn	r4,r4
80003c40:	00 00       	add	r0,r0
80003c42:	09 10       	ld.sh	r0,r4++
80003c44:	80 00       	ld.sh	r0,r0[0x0]
80003c46:	3a 40       	mov	r0,-92
80003c48:	00 00       	add	r0,r0
80003c4a:	09 a8       	ld.ub	r8,r4[0x2]
80003c4c:	00 00       	add	r0,r0
80003c4e:	09 14       	ld.sh	r4,r4++
80003c50:	00 00       	add	r0,r0
80003c52:	09 08       	ld.w	r8,r4++
80003c54:	00 00       	add	r0,r0
80003c56:	09 0e       	ld.w	lr,r4++
80003c58:	80 00       	ld.sh	r0,r0[0x0]
80003c5a:	38 b8       	mov	r8,-117
80003c5c:	00 00       	add	r0,r0
80003c5e:	09 12       	ld.sh	r2,r4++

80003c60 <udc_sof_notify>:
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}

void udc_sof_notify(void)
{
80003c60:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80003c64:	49 18       	lddpc	r8,80003ca8 <udc_sof_notify+0x48>
80003c66:	11 89       	ld.ub	r9,r8[0x0]
80003c68:	30 08       	mov	r8,0
80003c6a:	f0 09 18 00 	cp.b	r9,r8
80003c6e:	c1 b0       	breq	80003ca4 <udc_sof_notify+0x44>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003c70:	48 f8       	lddpc	r8,80003cac <udc_sof_notify+0x4c>
80003c72:	70 08       	ld.w	r8,r8[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80003c74:	70 09       	ld.w	r9,r8[0x0]
80003c76:	13 ca       	ld.ub	r10,r9[0x4]
80003c78:	30 09       	mov	r9,0
80003c7a:	f2 0a 18 00 	cp.b	r10,r9
80003c7e:	c1 30       	breq	80003ca4 <udc_sof_notify+0x44>
80003c80:	30 07       	mov	r7,0
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003c82:	48 b6       	lddpc	r6,80003cac <udc_sof_notify+0x4c>
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
80003c84:	70 18       	ld.w	r8,r8[0x4]
80003c86:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
80003c8a:	70 48       	ld.w	r8,r8[0x10]
80003c8c:	58 08       	cp.w	r8,0
80003c8e:	c0 20       	breq	80003c92 <udc_sof_notify+0x32>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
80003c90:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80003c92:	2f f7       	sub	r7,-1
80003c94:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003c96:	6c 08       	ld.w	r8,r6[0x0]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
80003c98:	70 09       	ld.w	r9,r8[0x0]
80003c9a:	13 c9       	ld.ub	r9,r9[0x4]
80003c9c:	ee 09 18 00 	cp.b	r9,r7
80003ca0:	fe 9b ff f2 	brhi	80003c84 <udc_sof_notify+0x24>
80003ca4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ca8:	00 00       	add	r0,r0
80003caa:	09 c4       	ld.ub	r4,r4[0x4]
80003cac:	00 00       	add	r0,r0
80003cae:	09 b4       	ld.ub	r4,r4[0x3]

80003cb0 <udc_get_eof_conf>:
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
80003cb0:	48 78       	lddpc	r8,80003ccc <udc_get_eof_conf+0x1c>
80003cb2:	70 08       	ld.w	r8,r8[0x0]
80003cb4:	70 08       	ld.w	r8,r8[0x0]
80003cb6:	11 aa       	ld.ub	r10,r8[0x2]
80003cb8:	11 b9       	ld.ub	r9,r8[0x3]
80003cba:	f3 ea 10 89 	or	r9,r9,r10<<0x8
80003cbe:	5c c9       	swap.bh	r9
80003cc0:	f9 d9 c0 10 	bfextu	r12,r9,0x0,0x10
}
80003cc4:	f0 0c 00 0c 	add	r12,r8,r12
80003cc8:	5e fc       	retal	r12
80003cca:	00 00       	add	r0,r0
80003ccc:	00 00       	add	r0,r0
80003cce:	09 b4       	ld.ub	r4,r4[0x3]

80003cd0 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
80003cd0:	eb cd 40 e0 	pushm	r5-r7,lr
80003cd4:	18 97       	mov	r7,r12
80003cd6:	16 96       	mov	r6,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
80003cd8:	49 b8       	lddpc	r8,80003d44 <udc_update_iface_desc+0x74>
80003cda:	11 89       	ld.ub	r9,r8[0x0]
80003cdc:	30 08       	mov	r8,0
80003cde:	f0 09 18 00 	cp.b	r9,r8
80003ce2:	c2 f0       	breq	80003d40 <udc_update_iface_desc+0x70>
		return false;
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80003ce4:	49 98       	lddpc	r8,80003d48 <udc_update_iface_desc+0x78>
80003ce6:	70 08       	ld.w	r8,r8[0x0]
80003ce8:	70 08       	ld.w	r8,r8[0x0]
80003cea:	11 c9       	ld.ub	r9,r8[0x4]
80003cec:	18 9e       	mov	lr,r12
80003cee:	f8 09 18 00 	cp.b	r9,r12
80003cf2:	e0 88 00 27 	brls	80003d40 <udc_update_iface_desc+0x70>
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
80003cf6:	49 65       	lddpc	r5,80003d4c <udc_update_iface_desc+0x7c>
80003cf8:	8b 08       	st.w	r5[0x0],r8
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
80003cfa:	f0 1f 00 16 	mcall	80003d50 <udc_update_iface_desc+0x80>
	while (ptr_end_desc >
80003cfe:	6a 08       	ld.w	r8,r5[0x0]
80003d00:	10 3c       	cp.w	r12,r8
80003d02:	e0 88 00 1f 	brls	80003d40 <udc_update_iface_desc+0x70>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003d06:	30 4b       	mov	r11,4
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003d08:	10 99       	mov	r9,r8
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
80003d0a:	11 9a       	ld.ub	r10,r8[0x1]
80003d0c:	f6 0a 18 00 	cp.b	r10,r11
80003d10:	c0 a1       	brne	80003d24 <udc_update_iface_desc+0x54>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
80003d12:	11 aa       	ld.ub	r10,r8[0x2]
80003d14:	0e 9e       	mov	lr,r7
80003d16:	ee 0a 18 00 	cp.b	r10,r7
80003d1a:	c0 51       	brne	80003d24 <udc_update_iface_desc+0x54>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
80003d1c:	11 ba       	ld.ub	r10,r8[0x3]
80003d1e:	ec 0a 18 00 	cp.b	r10,r6
80003d22:	c0 b0       	breq	80003d38 <udc_update_iface_desc+0x68>
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
80003d24:	13 88       	ld.ub	r8,r9[0x0]
80003d26:	f2 08 00 08 	add	r8,r9,r8
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
80003d2a:	10 3c       	cp.w	r12,r8
80003d2c:	fe 9b ff ee 	brhi	80003d08 <udc_update_iface_desc+0x38>
80003d30:	48 79       	lddpc	r9,80003d4c <udc_update_iface_desc+0x7c>
80003d32:	93 08       	st.w	r9[0x0],r8
80003d34:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003d38:	48 59       	lddpc	r9,80003d4c <udc_update_iface_desc+0x7c>
80003d3a:	93 08       	st.w	r9[0x0],r8
80003d3c:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80003d40:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003d44:	00 00       	add	r0,r0
80003d46:	09 c4       	ld.ub	r4,r4[0x4]
80003d48:	00 00       	add	r0,r0
80003d4a:	09 b4       	ld.ub	r4,r4[0x3]
80003d4c:	00 00       	add	r0,r0
80003d4e:	09 c8       	ld.ub	r8,r4[0x4]
80003d50:	80 00       	ld.sh	r0,r0[0x0]
80003d52:	3c b0       	mov	r0,-53

80003d54 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
80003d54:	eb cd 40 c0 	pushm	r6-r7,lr
80003d58:	18 96       	mov	r6,r12
80003d5a:	16 97       	mov	r7,r11
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
80003d5c:	f0 1f 00 11 	mcall	80003da0 <udc_next_desc_in_iface+0x4c>
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003d60:	0d 88       	ld.ub	r8,r6[0x0]
80003d62:	10 06       	add	r6,r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80003d64:	0c 3c       	cp.w	r12,r6
80003d66:	e0 88 00 19 	brls	80003d98 <udc_next_desc_in_iface+0x44>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80003d6a:	0d 98       	ld.ub	r8,r6[0x1]
80003d6c:	30 49       	mov	r9,4
80003d6e:	f2 08 18 00 	cp.b	r8,r9
80003d72:	c1 30       	breq	80003d98 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80003d74:	ee 08 18 00 	cp.b	r8,r7
80003d78:	c0 a1       	brne	80003d8c <udc_next_desc_in_iface+0x38>
80003d7a:	c1 08       	rjmp	80003d9a <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80003d7c:	0d 98       	ld.ub	r8,r6[0x1]
80003d7e:	f2 08 18 00 	cp.b	r8,r9
80003d82:	c0 b0       	breq	80003d98 <udc_next_desc_in_iface+0x44>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
80003d84:	ee 08 18 00 	cp.b	r8,r7
80003d88:	c0 31       	brne	80003d8e <udc_next_desc_in_iface+0x3a>
80003d8a:	c0 88       	rjmp	80003d9a <udc_next_desc_in_iface+0x46>
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
80003d8c:	30 49       	mov	r9,4
		}
		if (desc_id == desc->bDescriptorType) {
			return desc; // Specific descriptor found
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
80003d8e:	0d 88       	ld.ub	r8,r6[0x0]
80003d90:	10 06       	add	r6,r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
80003d92:	0c 3c       	cp.w	r12,r6
80003d94:	fe 9b ff f4 	brhi	80003d7c <udc_next_desc_in_iface+0x28>
80003d98:	30 06       	mov	r6,0
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
}
80003d9a:	0c 9c       	mov	r12,r6
80003d9c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003da0:	80 00       	ld.sh	r0,r0[0x0]
80003da2:	3c b0       	mov	r0,-53

80003da4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
80003da4:	d4 01       	pushm	lr
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
80003da6:	48 48       	lddpc	r8,80003db4 <udc_valid_address+0x10>
80003da8:	11 bc       	ld.ub	r12,r8[0x3]
80003daa:	f9 dc c0 07 	bfextu	r12,r12,0x0,0x7
80003dae:	f0 1f 00 03 	mcall	80003db8 <udc_valid_address+0x14>
}
80003db2:	d8 02       	popm	pc
80003db4:	00 00       	add	r0,r0
80003db6:	0a cc       	st.b	r5++,r12
80003db8:	80 00       	ld.sh	r0,r0[0x0]
80003dba:	23 82       	sub	r2,56

80003dbc <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
80003dbc:	eb cd 40 e0 	pushm	r5-r7,lr
80003dc0:	18 95       	mov	r5,r12
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
80003dc2:	f0 1f 00 12 	mcall	80003e08 <udc_iface_enable+0x4c>
80003dc6:	c1 f0       	breq	80003e04 <udc_iface_enable+0x48>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003dc8:	49 18       	lddpc	r8,80003e0c <udc_iface_enable+0x50>
80003dca:	70 07       	ld.w	r7,r8[0x0]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003dcc:	30 56       	mov	r6,5
80003dce:	0c 9b       	mov	r11,r6
80003dd0:	0e 9c       	mov	r12,r7
80003dd2:	f0 1f 00 10 	mcall	80003e10 <udc_iface_enable+0x54>
80003dd6:	18 97       	mov	r7,r12
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
80003dd8:	c0 d0       	breq	80003df2 <udc_iface_enable+0x36>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
80003dda:	19 ca       	ld.ub	r10,r12[0x4]
80003ddc:	19 d8       	ld.ub	r8,r12[0x5]
80003dde:	f1 ea 10 8a 	or	r10,r8,r10<<0x8
80003de2:	5c ca       	swap.bh	r10
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
80003de4:	5c 7a       	castu.h	r10
80003de6:	19 bb       	ld.ub	r11,r12[0x3]
80003de8:	19 ac       	ld.ub	r12,r12[0x2]
80003dea:	f0 1f 00 0b 	mcall	80003e14 <udc_iface_enable+0x58>
80003dee:	cf 01       	brne	80003dce <udc_iface_enable+0x12>
80003df0:	c0 a8       	rjmp	80003e04 <udc_iface_enable+0x48>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
80003df2:	48 a8       	lddpc	r8,80003e18 <udc_iface_enable+0x5c>
80003df4:	70 08       	ld.w	r8,r8[0x0]
80003df6:	70 18       	ld.w	r8,r8[0x4]
80003df8:	f0 05 03 28 	ld.w	r8,r8[r5<<0x2]
80003dfc:	70 0c       	ld.w	r12,r8[0x0]
80003dfe:	5d 1c       	icall	r12
80003e00:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80003e04:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e08:	80 00       	ld.sh	r0,r0[0x0]
80003e0a:	3c d0       	mov	r0,-51
80003e0c:	00 00       	add	r0,r0
80003e0e:	09 c8       	ld.ub	r8,r4[0x4]
80003e10:	80 00       	ld.sh	r0,r0[0x0]
80003e12:	3d 54       	mov	r4,-43
80003e14:	80 00       	ld.sh	r0,r0[0x0]
80003e16:	2c 34       	sub	r4,-61
80003e18:	00 00       	add	r0,r0
80003e1a:	09 b4       	ld.ub	r4,r4[0x3]

80003e1c <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
80003e1c:	eb cd 40 e0 	pushm	r5-r7,lr
80003e20:	18 96       	mov	r6,r12
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80003e22:	18 97       	mov	r7,r12
80003e24:	30 0b       	mov	r11,0
80003e26:	f0 1f 00 12 	mcall	80003e6c <udc_iface_disable+0x50>
80003e2a:	c1 e0       	breq	80003e66 <udc_iface_disable+0x4a>
		return false;
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
80003e2c:	49 18       	lddpc	r8,80003e70 <udc_iface_disable+0x54>
80003e2e:	70 08       	ld.w	r8,r8[0x0]
80003e30:	70 18       	ld.w	r8,r8[0x4]
80003e32:	f0 06 03 25 	ld.w	r5,r8[r6<<0x2]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80003e36:	6a 3c       	ld.w	r12,r5[0xc]
80003e38:	5d 1c       	icall	r12
80003e3a:	18 9b       	mov	r11,r12
80003e3c:	0c 9c       	mov	r12,r6
80003e3e:	f0 1f 00 0c 	mcall	80003e6c <udc_iface_disable+0x50>
80003e42:	c1 20       	breq	80003e66 <udc_iface_disable+0x4a>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
80003e44:	48 c8       	lddpc	r8,80003e74 <udc_iface_disable+0x58>
80003e46:	70 07       	ld.w	r7,r8[0x0]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
80003e48:	30 56       	mov	r6,5
80003e4a:	0c 9b       	mov	r11,r6
80003e4c:	0e 9c       	mov	r12,r7
80003e4e:	f0 1f 00 0b 	mcall	80003e78 <udc_iface_disable+0x5c>
80003e52:	18 97       	mov	r7,r12
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
80003e54:	c0 50       	breq	80003e5e <udc_iface_disable+0x42>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
80003e56:	19 ac       	ld.ub	r12,r12[0x2]
80003e58:	f0 1f 00 09 	mcall	80003e7c <udc_iface_disable+0x60>
		}
80003e5c:	cf 7b       	rjmp	80003e4a <udc_iface_disable+0x2e>
	}
#endif

	// Disable interface
	udi_api->disable();
80003e5e:	6a 18       	ld.w	r8,r5[0x4]
80003e60:	5d 18       	icall	r8
80003e62:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
	return true;
80003e66:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
80003e6a:	00 00       	add	r0,r0
80003e6c:	80 00       	ld.sh	r0,r0[0x0]
80003e6e:	3c d0       	mov	r0,-51
80003e70:	00 00       	add	r0,r0
80003e72:	09 b4       	ld.ub	r4,r4[0x3]
80003e74:	00 00       	add	r0,r0
80003e76:	09 c8       	ld.ub	r8,r4[0x4]
80003e78:	80 00       	ld.sh	r0,r0[0x0]
80003e7a:	3d 54       	mov	r4,-43
80003e7c:	80 00       	ld.sh	r0,r0[0x0]
80003e7e:	25 54       	sub	r4,85

80003e80 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
80003e80:	eb cd 40 c0 	pushm	r6-r7,lr
	uint8_t iface_num;

	if (udc_num_configuration) {
80003e84:	49 38       	lddpc	r8,80003ed0 <udc_reset+0x50>
80003e86:	11 89       	ld.ub	r9,r8[0x0]
80003e88:	30 08       	mov	r8,0
80003e8a:	f0 09 18 00 	cp.b	r9,r8
80003e8e:	c1 70       	breq	80003ebc <udc_reset+0x3c>
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003e90:	49 18       	lddpc	r8,80003ed4 <udc_reset+0x54>
80003e92:	70 08       	ld.w	r8,r8[0x0]
80003e94:	70 08       	ld.w	r8,r8[0x0]
80003e96:	11 c9       	ld.ub	r9,r8[0x4]
80003e98:	30 08       	mov	r8,0
80003e9a:	f0 09 18 00 	cp.b	r9,r8
80003e9e:	c0 f0       	breq	80003ebc <udc_reset+0x3c>
80003ea0:	30 07       	mov	r7,0
80003ea2:	48 d6       	lddpc	r6,80003ed4 <udc_reset+0x54>
				iface_num++) {
			udc_iface_disable(iface_num);
80003ea4:	0e 9c       	mov	r12,r7
80003ea6:	f0 1f 00 0d 	mcall	80003ed8 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
80003eaa:	2f f7       	sub	r7,-1
80003eac:	5c 57       	castu.b	r7
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
80003eae:	6c 08       	ld.w	r8,r6[0x0]
80003eb0:	70 08       	ld.w	r8,r8[0x0]
80003eb2:	11 c8       	ld.ub	r8,r8[0x4]
80003eb4:	ee 08 18 00 	cp.b	r8,r7
80003eb8:	fe 9b ff f6 	brhi	80003ea4 <udc_reset+0x24>
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
80003ebc:	30 09       	mov	r9,0
80003ebe:	48 58       	lddpc	r8,80003ed0 <udc_reset+0x50>
80003ec0:	b0 89       	st.b	r8[0x0],r9
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
80003ec2:	e0 69 01 00 	mov	r9,256
80003ec6:	48 68       	lddpc	r8,80003edc <udc_reset+0x5c>
80003ec8:	b0 09       	st.h	r8[0x0],r9
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
80003eca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80003ece:	00 00       	add	r0,r0
80003ed0:	00 00       	add	r0,r0
80003ed2:	09 c4       	ld.ub	r4,r4[0x4]
80003ed4:	00 00       	add	r0,r0
80003ed6:	09 b4       	ld.ub	r4,r4[0x3]
80003ed8:	80 00       	ld.sh	r0,r0[0x0]
80003eda:	3e 1c       	mov	r12,-31
80003edc:	00 00       	add	r0,r0
80003ede:	09 c0       	ld.ub	r0,r4[0x4]

80003ee0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
80003ee0:	eb cd 40 e0 	pushm	r5-r7,lr
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
80003ee4:	fe f8 04 90 	ld.w	r8,pc[1168]
80003ee8:	30 09       	mov	r9,0
80003eea:	b0 69       	st.h	r8[0xc],r9
	udd_g_ctrlreq.callback = NULL;
80003eec:	30 0a       	mov	r10,0
80003eee:	91 4a       	st.w	r8[0x10],r10
	udd_g_ctrlreq.over_under_run = NULL;
80003ef0:	91 5a       	st.w	r8[0x14],r10

	if (Udd_setup_is_in()) {
80003ef2:	11 88       	ld.ub	r8,r8[0x0]
80003ef4:	10 9a       	mov	r10,r8
80003ef6:	f2 08 18 00 	cp.b	r8,r9
80003efa:	c0 94       	brge	80003f0c <udc_process_setup+0x2c>
		if (udd_g_ctrlreq.req.wLength == 0) {
80003efc:	fe f9 04 78 	ld.w	r9,pc[1144]
80003f00:	92 3b       	ld.sh	r11,r9[0x6]
80003f02:	30 09       	mov	r9,0
80003f04:	f2 0b 19 00 	cp.h	r11,r9
80003f08:	e0 80 02 31 	breq	8000436a <udc_process_setup+0x48a>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
80003f0c:	10 99       	mov	r9,r8
80003f0e:	e2 19 00 60 	andl	r9,0x60,COH
80003f12:	e0 81 01 d5 	brne	800042bc <udc_process_setup+0x3dc>
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
	if (Udd_setup_is_in()) {
80003f16:	f2 0a 18 00 	cp.b	r10,r9
80003f1a:	e0 84 00 f6 	brge	80004106 <udc_process_setup+0x226>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
80003f1e:	fe f9 04 56 	ld.w	r9,pc[1110]
80003f22:	92 39       	ld.sh	r9,r9[0x6]
80003f24:	58 09       	cp.w	r9,0
80003f26:	e0 80 01 cb 	breq	800042bc <udc_process_setup+0x3dc>
			return false; // Error for USB host
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80003f2a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003f2e:	e0 81 00 93 	brne	80004054 <udc_process_setup+0x174>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
80003f32:	fe fa 04 42 	ld.w	r10,pc[1090]
80003f36:	15 9a       	ld.ub	r10,r10[0x1]
80003f38:	30 6b       	mov	r11,6
80003f3a:	f6 0a 18 00 	cp.b	r10,r11
80003f3e:	c1 90       	breq	80003f70 <udc_process_setup+0x90>
80003f40:	30 8b       	mov	r11,8
80003f42:	f6 0a 18 00 	cp.b	r10,r11
80003f46:	c7 a0       	breq	8000403a <udc_process_setup+0x15a>
80003f48:	30 0b       	mov	r11,0
80003f4a:	f6 0a 18 00 	cp.b	r10,r11
80003f4e:	e0 81 00 83 	brne	80004054 <udc_process_setup+0x174>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
80003f52:	30 28       	mov	r8,2
80003f54:	f0 09 19 00 	cp.h	r9,r8
80003f58:	c0 40       	breq	80003f60 <udc_process_setup+0x80>
80003f5a:	30 0c       	mov	r12,0
80003f5c:	e0 8f 01 ae 	bral	800042b8 <udc_process_setup+0x3d8>
		return false;
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
80003f60:	30 2b       	mov	r11,2
80003f62:	fe fc 04 16 	ld.w	r12,pc[1046]
80003f66:	f0 1f 01 06 	mcall	8000437c <udc_process_setup+0x49c>
80003f6a:	30 1c       	mov	r12,1
80003f6c:	e0 8f 01 a6 	bral	800042b8 <udc_process_setup+0x3d8>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003f70:	fe f8 04 04 	ld.w	r8,pc[1028]
80003f74:	90 19       	ld.sh	r9,r8[0x2]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
80003f76:	f2 08 16 08 	lsr	r8,r9,0x8
80003f7a:	30 2a       	mov	r10,2
80003f7c:	f4 08 18 00 	cp.b	r8,r10
80003f80:	c1 80       	breq	80003fb0 <udc_process_setup+0xd0>
80003f82:	e0 8b 00 07 	brhi	80003f90 <udc_process_setup+0xb0>
80003f86:	30 19       	mov	r9,1
80003f88:	f2 08 18 00 	cp.b	r8,r9
80003f8c:	c5 41       	brne	80004034 <udc_process_setup+0x154>
80003f8e:	c0 a8       	rjmp	80003fa2 <udc_process_setup+0xc2>
80003f90:	30 3a       	mov	r10,3
80003f92:	f4 08 18 00 	cp.b	r8,r10
80003f96:	c3 70       	breq	80004004 <udc_process_setup+0x124>
80003f98:	30 f9       	mov	r9,15
80003f9a:	f2 08 18 00 	cp.b	r8,r9
80003f9e:	c4 b1       	brne	80004034 <udc_process_setup+0x154>
80003fa0:	c2 68       	rjmp	80003fec <udc_process_setup+0x10c>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
80003fa2:	fe f8 03 de 	ld.w	r8,pc[990]
80003fa6:	70 0c       	ld.w	r12,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
80003fa8:	19 8b       	ld.ub	r11,r12[0x0]
80003faa:	f0 1f 00 f5 	mcall	8000437c <udc_process_setup+0x49c>
80003fae:	c3 28       	rjmp	80004012 <udc_process_setup+0x132>
 */
static bool udc_req_std_dev_get_descriptor(void)
{
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
80003fb0:	5c 59       	castu.b	r9
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
80003fb2:	fe f8 03 ce 	ld.w	r8,pc[974]
80003fb6:	70 08       	ld.w	r8,r8[0x0]
80003fb8:	f1 38 00 11 	ld.ub	r8,r8[17]
80003fbc:	f2 08 18 00 	cp.b	r8,r9
80003fc0:	e0 88 00 3a 	brls	80004034 <udc_process_setup+0x154>
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
80003fc4:	fe f8 03 bc 	ld.w	r8,pc[956]
80003fc8:	70 18       	ld.w	r8,r8[0x4]
80003fca:	f0 09 03 3c 	ld.w	r12,r8[r9<<0x3]
80003fce:	19 a9       	ld.ub	r9,r12[0x2]
80003fd0:	19 b8       	ld.ub	r8,r12[0x3]
80003fd2:	f1 e9 10 88 	or	r8,r8,r9<<0x8
80003fd6:	5c c8       	swap.bh	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
80003fd8:	f7 d8 c0 10 	bfextu	r11,r8,0x0,0x10
80003fdc:	f0 1f 00 e8 	mcall	8000437c <udc_process_setup+0x49c>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
80003fe0:	fe f8 03 94 	ld.w	r8,pc[916]
80003fe4:	70 28       	ld.w	r8,r8[0x8]
80003fe6:	30 29       	mov	r9,2
80003fe8:	b0 99       	st.b	r8[0x1],r9
80003fea:	c1 48       	rjmp	80004012 <udc_process_setup+0x132>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
80003fec:	fe f8 03 94 	ld.w	r8,pc[916]
80003ff0:	70 2c       	ld.w	r12,r8[0x8]
80003ff2:	58 0c       	cp.w	r12,0
80003ff4:	c2 00       	breq	80004034 <udc_process_setup+0x154>
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
80003ff6:	19 ab       	ld.ub	r11,r12[0x2]
80003ff8:	19 b8       	ld.ub	r8,r12[0x3]
80003ffa:	f1 eb 10 8b 	or	r11,r8,r11<<0x8
80003ffe:	f0 1f 00 e0 	mcall	8000437c <udc_process_setup+0x49c>
80004002:	c0 88       	rjmp	80004012 <udc_process_setup+0x132>
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
80004004:	5c 59       	castu.b	r9
80004006:	c1 71       	brne	80004034 <udc_process_setup+0x154>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
80004008:	30 4b       	mov	r11,4
8000400a:	fe fc 03 7a 	ld.w	r12,pc[890]
8000400e:	f0 1f 00 dc 	mcall	8000437c <udc_process_setup+0x49c>
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
80004012:	fe f8 03 62 	ld.w	r8,pc[866]
80004016:	90 39       	ld.sh	r9,r8[0x6]
80004018:	90 68       	ld.sh	r8,r8[0xc]
8000401a:	f2 08 19 00 	cp.h	r8,r9
8000401e:	e0 8b 00 05 	brhi	80004028 <udc_process_setup+0x148>
80004022:	30 1c       	mov	r12,1
80004024:	e0 8f 01 4a 	bral	800042b8 <udc_process_setup+0x3d8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
80004028:	fe f8 03 4c 	ld.w	r8,pc[844]
8000402c:	b0 69       	st.h	r8[0xc],r9
8000402e:	30 1c       	mov	r12,1
80004030:	e0 8f 01 44 	bral	800042b8 <udc_process_setup+0x3d8>
80004034:	30 0c       	mov	r12,0
80004036:	e0 8f 01 41 	bral	800042b8 <udc_process_setup+0x3d8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
	if (udd_g_ctrlreq.req.wLength != 1) {
8000403a:	30 18       	mov	r8,1
8000403c:	f0 09 19 00 	cp.h	r9,r8
80004040:	c0 30       	breq	80004046 <udc_process_setup+0x166>
80004042:	30 0c       	mov	r12,0
80004044:	c3 a9       	rjmp	800042b8 <udc_process_setup+0x3d8>
		return false;
	}

	udd_set_setup_payload(&udc_num_configuration,1);
80004046:	30 1b       	mov	r11,1
80004048:	fe fc 03 40 	ld.w	r12,pc[832]
8000404c:	f0 1f 00 cc 	mcall	8000437c <udc_process_setup+0x49c>
80004050:	30 1c       	mov	r12,1
80004052:	c3 39       	rjmp	800042b8 <udc_process_setup+0x3d8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80004054:	58 18       	cp.w	r8,1
80004056:	c3 61       	brne	800040c2 <udc_process_setup+0x1e2>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80004058:	fe fa 03 1c 	ld.w	r10,pc[796]
8000405c:	15 9b       	ld.ub	r11,r10[0x1]
8000405e:	30 aa       	mov	r10,10
80004060:	f4 0b 18 00 	cp.b	r11,r10
80004064:	c2 f1       	brne	800040c2 <udc_process_setup+0x1e2>
static bool udc_req_std_iface_get_setting(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
80004066:	f0 09 19 00 	cp.h	r9,r8
8000406a:	c2 a1       	brne	800040be <udc_process_setup+0x1de>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
8000406c:	fe f8 03 1c 	ld.w	r8,pc[796]
80004070:	11 89       	ld.ub	r9,r8[0x0]
80004072:	30 08       	mov	r8,0
80004074:	f0 09 18 00 	cp.b	r9,r8
80004078:	c2 30       	breq	800040be <udc_process_setup+0x1de>
		return false; // The device is not is configured state yet
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000407a:	fe f8 02 fa 	ld.w	r8,pc[762]
8000407e:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
80004080:	fe f8 03 0c 	ld.w	r8,pc[780]
80004084:	70 08       	ld.w	r8,r8[0x0]
80004086:	70 08       	ld.w	r8,r8[0x0]
80004088:	11 c8       	ld.ub	r8,r8[0x4]
8000408a:	ee 08 18 00 	cp.b	r8,r7
8000408e:	e0 88 00 18 	brls	800040be <udc_process_setup+0x1de>
		return false;
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
80004092:	30 0b       	mov	r11,0
80004094:	0e 9c       	mov	r12,r7
80004096:	f0 1f 00 bf 	mcall	80004390 <udc_process_setup+0x4b0>
8000409a:	c1 20       	breq	800040be <udc_process_setup+0x1de>
		return false;
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
	udc_iface_setting = udi_api->getsetting();
8000409c:	fe f8 02 f0 	ld.w	r8,pc[752]
800040a0:	70 08       	ld.w	r8,r8[0x0]
800040a2:	70 18       	ld.w	r8,r8[0x4]
800040a4:	f0 07 03 28 	ld.w	r8,r8[r7<<0x2]
800040a8:	70 3c       	ld.w	r12,r8[0xc]
800040aa:	5d 1c       	icall	r12
800040ac:	fe f8 02 e8 	ld.w	r8,pc[744]
800040b0:	b0 8c       	st.b	r8[0x0],r12

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
800040b2:	30 1b       	mov	r11,1
800040b4:	10 9c       	mov	r12,r8
800040b6:	f0 1f 00 b2 	mcall	8000437c <udc_process_setup+0x49c>
800040ba:	30 1c       	mov	r12,1
800040bc:	cf e8       	rjmp	800042b8 <udc_process_setup+0x3d8>
800040be:	30 0c       	mov	r12,0
800040c0:	cf c8       	rjmp	800042b8 <udc_process_setup+0x3d8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
800040c2:	58 28       	cp.w	r8,2
800040c4:	e0 81 00 fc 	brne	800042bc <udc_process_setup+0x3dc>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
800040c8:	fe f8 02 ac 	ld.w	r8,pc[684]
800040cc:	11 9a       	ld.ub	r10,r8[0x1]
800040ce:	30 08       	mov	r8,0
800040d0:	f0 0a 18 00 	cp.b	r10,r8
800040d4:	e0 81 00 f1 	brne	800042b6 <udc_process_setup+0x3d6>
 */
static bool udc_req_std_ep_get_status(void)
{
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
800040d8:	30 28       	mov	r8,2
800040da:	f0 09 19 00 	cp.h	r9,r8
800040de:	c0 30       	breq	800040e4 <udc_process_setup+0x204>
800040e0:	30 0c       	mov	r12,0
800040e2:	ce b8       	rjmp	800042b8 <udc_process_setup+0x3d8>
		return false;
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
800040e4:	fe f8 02 90 	ld.w	r8,pc[656]
800040e8:	11 dc       	ld.ub	r12,r8[0x5]
800040ea:	f0 1f 00 ac 	mcall	80004398 <udc_process_setup+0x4b8>
800040ee:	e0 68 01 00 	mov	r8,256
800040f2:	f9 b8 00 00 	moveq	r8,0
800040f6:	fe fc 02 a6 	ld.w	r12,pc[678]
800040fa:	b8 08       	st.h	r12[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
800040fc:	30 2b       	mov	r11,2
800040fe:	f0 1f 00 a0 	mcall	8000437c <udc_process_setup+0x49c>
80004102:	30 1c       	mov	r12,1
80004104:	cd a8       	rjmp	800042b8 <udc_process_setup+0x3d8>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
80004106:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000410a:	c7 d1       	brne	80004204 <udc_process_setup+0x324>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000410c:	fe f9 02 68 	ld.w	r9,pc[616]
80004110:	13 99       	ld.ub	r9,r9[0x1]
80004112:	30 3a       	mov	r10,3
80004114:	f4 09 18 00 	cp.b	r9,r10
80004118:	e0 80 00 cf 	breq	800042b6 <udc_process_setup+0x3d6>
8000411c:	e0 8b 00 07 	brhi	8000412a <udc_process_setup+0x24a>
80004120:	30 1a       	mov	r10,1
80004122:	f4 09 18 00 	cp.b	r9,r10
80004126:	c6 f1       	brne	80004204 <udc_process_setup+0x324>
80004128:	c1 a8       	rjmp	8000415c <udc_process_setup+0x27c>
8000412a:	30 5a       	mov	r10,5
8000412c:	f4 09 18 00 	cp.b	r9,r10
80004130:	c0 60       	breq	8000413c <udc_process_setup+0x25c>
80004132:	30 9a       	mov	r10,9
80004134:	f4 09 18 00 	cp.b	r9,r10
80004138:	c6 61       	brne	80004204 <udc_process_setup+0x324>
8000413a:	c2 88       	rjmp	8000418a <udc_process_setup+0x2aa>
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000413c:	fe f8 02 38 	ld.w	r8,pc[568]
80004140:	90 39       	ld.sh	r9,r8[0x6]
80004142:	30 08       	mov	r8,0
80004144:	f0 09 19 00 	cp.h	r9,r8
80004148:	c0 30       	breq	8000414e <udc_process_setup+0x26e>
8000414a:	30 0c       	mov	r12,0
8000414c:	cb 68       	rjmp	800042b8 <udc_process_setup+0x3d8>
		return false;
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000414e:	fe f9 02 52 	ld.w	r9,pc[594]
80004152:	fe f8 02 22 	ld.w	r8,pc[546]
80004156:	91 49       	st.w	r8[0x10],r9
80004158:	30 1c       	mov	r12,1
8000415a:	ca f8       	rjmp	800042b8 <udc_process_setup+0x3d8>
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000415c:	fe f8 02 18 	ld.w	r8,pc[536]
80004160:	90 39       	ld.sh	r9,r8[0x6]
80004162:	30 08       	mov	r8,0
80004164:	f0 09 19 00 	cp.h	r9,r8
80004168:	c0 f1       	brne	80004186 <udc_process_setup+0x2a6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000416a:	fe f8 02 0a 	ld.w	r8,pc[522]
8000416e:	90 19       	ld.sh	r9,r8[0x2]
80004170:	30 18       	mov	r8,1
80004172:	f0 09 19 00 	cp.h	r9,r8
80004176:	c0 81       	brne	80004186 <udc_process_setup+0x2a6>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
80004178:	fe f8 02 00 	ld.w	r8,pc[512]
8000417c:	90 09       	ld.sh	r9,r8[0x0]
8000417e:	a9 d9       	cbr	r9,0x9
80004180:	b0 09       	st.h	r8[0x0],r9
80004182:	30 1c       	mov	r12,1
80004184:	c9 a8       	rjmp	800042b8 <udc_process_setup+0x3d8>
80004186:	30 0c       	mov	r12,0
80004188:	c9 88       	rjmp	800042b8 <udc_process_setup+0x3d8>
static bool udc_req_std_dev_set_configuration(void)
{
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000418a:	4f b8       	lddpc	r8,80004374 <udc_process_setup+0x494>
8000418c:	90 39       	ld.sh	r9,r8[0x6]
8000418e:	30 08       	mov	r8,0
80004190:	f0 09 19 00 	cp.h	r9,r8
80004194:	c3 41       	brne	800041fc <udc_process_setup+0x31c>
		return false;
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
80004196:	f0 1f 00 84 	mcall	800043a4 <udc_process_setup+0x4c4>
8000419a:	c3 10       	breq	800041fc <udc_process_setup+0x31c>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000419c:	4f 68       	lddpc	r8,80004374 <udc_process_setup+0x494>
8000419e:	11 b9       	ld.ub	r9,r8[0x3]
800041a0:	4f 88       	lddpc	r8,80004380 <udc_process_setup+0x4a0>
800041a2:	70 08       	ld.w	r8,r8[0x0]
800041a4:	f1 38 00 11 	ld.ub	r8,r8[17]
800041a8:	10 39       	cp.w	r9,r8
800041aa:	e0 89 00 29 	brgt	800041fc <udc_process_setup+0x31c>
			return false;
		}
	}

	// Reset current configuration
	udc_reset();
800041ae:	f0 1f 00 7f 	mcall	800043a8 <udc_process_setup+0x4c8>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
800041b2:	4f 18       	lddpc	r8,80004374 <udc_process_setup+0x494>
800041b4:	11 b8       	ld.ub	r8,r8[0x3]
800041b6:	4f 59       	lddpc	r9,80004388 <udc_process_setup+0x4a8>
800041b8:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
800041ba:	58 08       	cp.w	r8,0
800041bc:	c2 20       	breq	80004200 <udc_process_setup+0x320>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
800041be:	20 18       	sub	r8,1
800041c0:	4f 09       	lddpc	r9,80004380 <udc_process_setup+0x4a0>
800041c2:	72 19       	ld.w	r9,r9[0x4]
800041c4:	f2 08 00 38 	add	r8,r9,r8<<0x3
800041c8:	4f 19       	lddpc	r9,8000438c <udc_process_setup+0x4ac>
800041ca:	93 08       	st.w	r9[0x0],r8
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800041cc:	70 08       	ld.w	r8,r8[0x0]
800041ce:	11 c9       	ld.ub	r9,r8[0x4]
800041d0:	30 08       	mov	r8,0
800041d2:	f0 09 18 00 	cp.b	r9,r8
800041d6:	c1 50       	breq	80004200 <udc_process_setup+0x320>
800041d8:	30 07       	mov	r7,0
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800041da:	0e 95       	mov	r5,r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800041dc:	4e c6       	lddpc	r6,8000438c <udc_process_setup+0x4ac>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
800041de:	0a 9b       	mov	r11,r5
800041e0:	0e 9c       	mov	r12,r7
800041e2:	f0 1f 00 73 	mcall	800043ac <udc_process_setup+0x4cc>
800041e6:	c0 b0       	breq	800041fc <udc_process_setup+0x31c>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
800041e8:	2f f7       	sub	r7,-1
800041ea:	5c 57       	castu.b	r7
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
800041ec:	6c 08       	ld.w	r8,r6[0x0]
800041ee:	70 08       	ld.w	r8,r8[0x0]
800041f0:	11 c8       	ld.ub	r8,r8[0x4]
800041f2:	ee 08 18 00 	cp.b	r8,r7
800041f6:	fe 9b ff f4 	brhi	800041de <udc_process_setup+0x2fe>
800041fa:	c0 38       	rjmp	80004200 <udc_process_setup+0x320>
800041fc:	30 0c       	mov	r12,0
800041fe:	c5 d8       	rjmp	800042b8 <udc_process_setup+0x3d8>
80004200:	30 1c       	mov	r12,1
80004202:	c5 b8       	rjmp	800042b8 <udc_process_setup+0x3d8>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
80004204:	58 18       	cp.w	r8,1
80004206:	c2 21       	brne	8000424a <udc_process_setup+0x36a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
80004208:	4d b9       	lddpc	r9,80004374 <udc_process_setup+0x494>
8000420a:	13 9a       	ld.ub	r10,r9[0x1]
8000420c:	30 b9       	mov	r9,11
8000420e:	f2 0a 18 00 	cp.b	r10,r9
80004212:	c1 c1       	brne	8000424a <udc_process_setup+0x36a>
 */
static bool udc_req_std_iface_set_setting(void)
{
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
80004214:	4d 88       	lddpc	r8,80004374 <udc_process_setup+0x494>
80004216:	90 39       	ld.sh	r9,r8[0x6]
80004218:	30 08       	mov	r8,0
8000421a:	f0 09 19 00 	cp.h	r9,r8
8000421e:	c1 41       	brne	80004246 <udc_process_setup+0x366>
		return false; // Error in request
	}
	if (!udc_num_configuration) {
80004220:	4d a8       	lddpc	r8,80004388 <udc_process_setup+0x4a8>
80004222:	11 89       	ld.ub	r9,r8[0x0]
80004224:	30 08       	mov	r8,0
80004226:	f0 09 18 00 	cp.b	r9,r8
8000422a:	c0 e0       	breq	80004246 <udc_process_setup+0x366>
		return false; // The device is not is configured state yet
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000422c:	4d 28       	lddpc	r8,80004374 <udc_process_setup+0x494>
8000422e:	90 16       	ld.sh	r6,r8[0x2]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
80004230:	11 d7       	ld.ub	r7,r8[0x5]
80004232:	0e 9c       	mov	r12,r7
80004234:	f0 1f 00 5f 	mcall	800043b0 <udc_process_setup+0x4d0>
80004238:	c0 70       	breq	80004246 <udc_process_setup+0x366>
		return false;
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
8000423a:	f7 d6 c0 08 	bfextu	r11,r6,0x0,0x8
8000423e:	0e 9c       	mov	r12,r7
80004240:	f0 1f 00 5b 	mcall	800043ac <udc_process_setup+0x4cc>
80004244:	c3 a8       	rjmp	800042b8 <udc_process_setup+0x3d8>
80004246:	30 0c       	mov	r12,0
80004248:	c3 88       	rjmp	800042b8 <udc_process_setup+0x3d8>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000424a:	58 28       	cp.w	r8,2
8000424c:	c3 81       	brne	800042bc <udc_process_setup+0x3dc>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000424e:	4c a8       	lddpc	r8,80004374 <udc_process_setup+0x494>
80004250:	11 98       	ld.ub	r8,r8[0x1]
80004252:	30 19       	mov	r9,1
80004254:	f2 08 18 00 	cp.b	r8,r9
80004258:	c0 60       	breq	80004264 <udc_process_setup+0x384>
8000425a:	30 39       	mov	r9,3
8000425c:	f2 08 18 00 	cp.b	r8,r9
80004260:	c2 b1       	brne	800042b6 <udc_process_setup+0x3d6>
80004262:	c1 48       	rjmp	8000428a <udc_process_setup+0x3aa>
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
80004264:	4c 48       	lddpc	r8,80004374 <udc_process_setup+0x494>
80004266:	90 39       	ld.sh	r9,r8[0x6]
80004268:	30 08       	mov	r8,0
8000426a:	f0 09 19 00 	cp.h	r9,r8
8000426e:	c0 c1       	brne	80004286 <udc_process_setup+0x3a6>
		return false;
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80004270:	4c 18       	lddpc	r8,80004374 <udc_process_setup+0x494>
80004272:	90 19       	ld.sh	r9,r8[0x2]
80004274:	30 08       	mov	r8,0
80004276:	f0 09 19 00 	cp.h	r9,r8
8000427a:	c0 61       	brne	80004286 <udc_process_setup+0x3a6>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000427c:	4b e8       	lddpc	r8,80004374 <udc_process_setup+0x494>
8000427e:	11 dc       	ld.ub	r12,r8[0x5]
80004280:	f0 1f 00 4d 	mcall	800043b4 <udc_process_setup+0x4d4>
80004284:	c1 a8       	rjmp	800042b8 <udc_process_setup+0x3d8>
80004286:	30 0c       	mov	r12,0
80004288:	c1 88       	rjmp	800042b8 <udc_process_setup+0x3d8>
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
	if (udd_g_ctrlreq.req.wLength) {
8000428a:	4b b8       	lddpc	r8,80004374 <udc_process_setup+0x494>
8000428c:	90 39       	ld.sh	r9,r8[0x6]
8000428e:	30 08       	mov	r8,0
80004290:	f0 09 19 00 	cp.h	r9,r8
80004294:	c0 f1       	brne	800042b2 <udc_process_setup+0x3d2>
		return false;
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
80004296:	4b 88       	lddpc	r8,80004374 <udc_process_setup+0x494>
80004298:	90 19       	ld.sh	r9,r8[0x2]
8000429a:	30 08       	mov	r8,0
8000429c:	f0 09 19 00 	cp.h	r9,r8
800042a0:	c0 91       	brne	800042b2 <udc_process_setup+0x3d2>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
800042a2:	4b 57       	lddpc	r7,80004374 <udc_process_setup+0x494>
800042a4:	0f dc       	ld.ub	r12,r7[0x5]
800042a6:	f0 1f 00 45 	mcall	800043b8 <udc_process_setup+0x4d8>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
800042aa:	0f dc       	ld.ub	r12,r7[0x5]
800042ac:	f0 1f 00 44 	mcall	800043bc <udc_process_setup+0x4dc>
800042b0:	c0 48       	rjmp	800042b8 <udc_process_setup+0x3d8>
800042b2:	30 0c       	mov	r12,0
800042b4:	c0 28       	rjmp	800042b8 <udc_process_setup+0x3d8>
800042b6:	30 0c       	mov	r12,0
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
		if (udc_reqstd()) {
800042b8:	58 0c       	cp.w	r12,0
800042ba:	c5 a1       	brne	8000436e <udc_process_setup+0x48e>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
800042bc:	4a e8       	lddpc	r8,80004374 <udc_process_setup+0x494>
800042be:	11 88       	ld.ub	r8,r8[0x0]
800042c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800042c4:	58 18       	cp.w	r8,1
800042c6:	c2 61       	brne	80004312 <udc_process_setup+0x432>
static bool udc_req_iface(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
800042c8:	4b 08       	lddpc	r8,80004388 <udc_process_setup+0x4a8>
800042ca:	11 89       	ld.ub	r9,r8[0x0]
800042cc:	30 08       	mov	r8,0
800042ce:	f0 09 18 00 	cp.b	r9,r8
800042d2:	c2 00       	breq	80004312 <udc_process_setup+0x432>
		return false; // The device is not is configured state yet
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
800042d4:	4a 88       	lddpc	r8,80004374 <udc_process_setup+0x494>
800042d6:	11 d7       	ld.ub	r7,r8[0x5]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
800042d8:	4a d8       	lddpc	r8,8000438c <udc_process_setup+0x4ac>
800042da:	70 08       	ld.w	r8,r8[0x0]
800042dc:	70 08       	ld.w	r8,r8[0x0]
800042de:	11 c8       	ld.ub	r8,r8[0x4]
800042e0:	ee 08 18 00 	cp.b	r8,r7
800042e4:	e0 88 00 17 	brls	80004312 <udc_process_setup+0x432>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
800042e8:	0e 96       	mov	r6,r7
800042ea:	30 0b       	mov	r11,0
800042ec:	0e 9c       	mov	r12,r7
800042ee:	f0 1f 00 29 	mcall	80004390 <udc_process_setup+0x4b0>
800042f2:	c1 00       	breq	80004312 <udc_process_setup+0x432>
		return false;
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
800042f4:	4a 68       	lddpc	r8,8000438c <udc_process_setup+0x4ac>
800042f6:	70 08       	ld.w	r8,r8[0x0]
800042f8:	70 18       	ld.w	r8,r8[0x4]
800042fa:	f0 07 03 27 	ld.w	r7,r8[r7<<0x2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
800042fe:	6e 3c       	ld.w	r12,r7[0xc]
80004300:	5d 1c       	icall	r12
80004302:	18 9b       	mov	r11,r12
80004304:	0c 9c       	mov	r12,r6
80004306:	f0 1f 00 23 	mcall	80004390 <udc_process_setup+0x4b0>
8000430a:	c0 40       	breq	80004312 <udc_process_setup+0x432>
		return false;
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000430c:	6e 2c       	ld.w	r12,r7[0x8]
8000430e:	5d 1c       	icall	r12
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
		if (udc_req_iface()) {
80004310:	c2 f1       	brne	8000436e <udc_process_setup+0x48e>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
80004312:	49 98       	lddpc	r8,80004374 <udc_process_setup+0x494>
80004314:	11 88       	ld.ub	r8,r8[0x0]
80004316:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000431a:	58 28       	cp.w	r8,2
8000431c:	c2 71       	brne	8000436a <udc_process_setup+0x48a>
static bool udc_req_ep(void)
{
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000431e:	49 b8       	lddpc	r8,80004388 <udc_process_setup+0x4a8>
80004320:	11 89       	ld.ub	r9,r8[0x0]
80004322:	30 08       	mov	r8,0
80004324:	f0 09 18 00 	cp.b	r9,r8
80004328:	c2 10       	breq	8000436a <udc_process_setup+0x48a>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000432a:	49 98       	lddpc	r8,8000438c <udc_process_setup+0x4ac>
8000432c:	70 08       	ld.w	r8,r8[0x0]
8000432e:	70 09       	ld.w	r9,r8[0x0]
80004330:	13 ca       	ld.ub	r10,r9[0x4]
80004332:	30 09       	mov	r9,0
80004334:	f2 0a 18 00 	cp.b	r10,r9
80004338:	c1 90       	breq	8000436a <udc_process_setup+0x48a>
8000433a:	30 07       	mov	r7,0
8000433c:	49 45       	lddpc	r5,8000438c <udc_process_setup+0x4ac>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
8000433e:	70 18       	ld.w	r8,r8[0x4]
80004340:	f0 07 03 26 	ld.w	r6,r8[r7<<0x2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
80004344:	6c 3c       	ld.w	r12,r6[0xc]
80004346:	5d 1c       	icall	r12
80004348:	18 9b       	mov	r11,r12
8000434a:	0e 9c       	mov	r12,r7
8000434c:	f0 1f 00 11 	mcall	80004390 <udc_process_setup+0x4b0>
80004350:	c0 d0       	breq	8000436a <udc_process_setup+0x48a>
			return false;
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
80004352:	6c 2c       	ld.w	r12,r6[0x8]
80004354:	5d 1c       	icall	r12
80004356:	c0 c1       	brne	8000436e <udc_process_setup+0x48e>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
80004358:	2f f7       	sub	r7,-1
8000435a:	5c 57       	castu.b	r7
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000435c:	6a 08       	ld.w	r8,r5[0x0]
8000435e:	70 09       	ld.w	r9,r8[0x0]
80004360:	13 c9       	ld.ub	r9,r9[0x4]
80004362:	ee 09 18 00 	cp.b	r9,r7
80004366:	fe 9b ff ec 	brhi	8000433e <udc_process_setup+0x45e>
8000436a:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
8000436e:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
80004372:	00 00       	add	r0,r0
80004374:	00 00       	add	r0,r0
80004376:	0a cc       	st.b	r5++,r12
80004378:	00 00       	add	r0,r0
8000437a:	09 c0       	ld.ub	r0,r4[0x4]
8000437c:	80 00       	ld.sh	r0,r0[0x0]
8000437e:	23 c0       	sub	r0,60
80004380:	00 00       	add	r0,r0
80004382:	00 34       	cp.w	r4,r0
80004384:	00 00       	add	r0,r0
80004386:	00 a0       	st.w	r0++,r0
80004388:	00 00       	add	r0,r0
8000438a:	09 c4       	ld.ub	r4,r4[0x4]
8000438c:	00 00       	add	r0,r0
8000438e:	09 b4       	ld.ub	r4,r4[0x3]
80004390:	80 00       	ld.sh	r0,r0[0x0]
80004392:	3c d0       	mov	r0,-51
80004394:	00 00       	add	r0,r0
80004396:	09 bc       	ld.ub	r12,r4[0x3]
80004398:	80 00       	ld.sh	r0,r0[0x0]
8000439a:	23 cc       	sub	r12,60
8000439c:	00 00       	add	r0,r0
8000439e:	09 b8       	ld.ub	r8,r4[0x3]
800043a0:	80 00       	ld.sh	r0,r0[0x0]
800043a2:	3d a4       	mov	r4,-38
800043a4:	80 00       	ld.sh	r0,r0[0x0]
800043a6:	23 a4       	sub	r4,58
800043a8:	80 00       	ld.sh	r0,r0[0x0]
800043aa:	3e 80       	mov	r0,-24
800043ac:	80 00       	ld.sh	r0,r0[0x0]
800043ae:	3d bc       	mov	r12,-37
800043b0:	80 00       	ld.sh	r0,r0[0x0]
800043b2:	3e 1c       	mov	r12,-31
800043b4:	80 00       	ld.sh	r0,r0[0x0]
800043b6:	23 e0       	sub	r0,62
800043b8:	80 00       	ld.sh	r0,r0[0x0]
800043ba:	24 b4       	sub	r4,75
800043bc:	80 00       	ld.sh	r0,r0[0x0]
800043be:	25 2c       	sub	r12,82

800043c0 <udc_start>:
}

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
800043c0:	d4 01       	pushm	lr
	udd_enable();
800043c2:	f0 1f 00 02 	mcall	800043c8 <udc_start+0x8>
}
800043c6:	d8 02       	popm	pc
800043c8:	80 00       	ld.sh	r0,r0[0x0]
800043ca:	2c dc       	sub	r12,-51

800043cc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
800043cc:	eb cd 40 f8 	pushm	r3-r7,lr
800043d0:	16 94       	mov	r4,r11
800043d2:	14 95       	mov	r5,r10
	int nChars = 0;

	if (file != 0) {
800043d4:	58 0c       	cp.w	r12,0
800043d6:	c0 30       	breq	800043dc <_read+0x10>
800043d8:	e3 cf c0 f8 	ldm	sp++,r3-r7,pc,r12=-1
		return -1;
	}

	for (; len > 0; --len) {
800043dc:	58 0a       	cp.w	r10,0
800043de:	e0 89 00 04 	brgt	800043e6 <_read+0x1a>
800043e2:	e3 cf 80 f8 	ldm	sp++,r3-r7,pc,r12=0
800043e6:	30 07       	mov	r7,0
		ptr_get(stdio_base, ptr);
800043e8:	48 83       	lddpc	r3,80004408 <_read+0x3c>
800043ea:	48 96       	lddpc	r6,8000440c <_read+0x40>
800043ec:	66 0c       	ld.w	r12,r3[0x0]
800043ee:	6c 08       	ld.w	r8,r6[0x0]
800043f0:	e8 07 00 0b 	add	r11,r4,r7
800043f4:	5d 18       	icall	r8
		ptr++;
		nChars++;
800043f6:	2f f7       	sub	r7,-1

int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
800043f8:	ea 07 01 08 	sub	r8,r5,r7

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
800043fc:	58 08       	cp.w	r8,0
800043fe:	fe 99 ff f7 	brgt	800043ec <_read+0x20>
80004402:	0a 9c       	mov	r12,r5
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
80004404:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
80004408:	00 00       	add	r0,r0
8000440a:	0b 34       	ld.ub	r4,r5++
8000440c:	00 00       	add	r0,r0
8000440e:	0b 2c       	ld.uh	r12,r5++

80004410 <stdio_usb_enable>:
	*data = (char)udi_cdc_getc();
}

bool stdio_usb_enable(void)
{
	stdio_usb_interface_enable = true;
80004410:	30 19       	mov	r9,1
80004412:	48 28       	lddpc	r8,80004418 <stdio_usb_enable+0x8>
80004414:	b0 89       	st.b	r8[0x0],r9
	return true;
}
80004416:	5e ff       	retal	1
80004418:	00 00       	add	r0,r0
8000441a:	09 cc       	ld.ub	r12,r4[0x4]

8000441c <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
8000441c:	eb cd 40 c0 	pushm	r6-r7,lr
	stdio_base = NULL;
80004420:	30 07       	mov	r7,0
80004422:	48 c8       	lddpc	r8,80004450 <stdio_usb_init+0x34>
80004424:	91 07       	st.w	r8[0x0],r7
	ptr_put = stdio_usb_putchar;
80004426:	48 c9       	lddpc	r9,80004454 <stdio_usb_init+0x38>
80004428:	48 c8       	lddpc	r8,80004458 <stdio_usb_init+0x3c>
8000442a:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
8000442c:	48 c9       	lddpc	r9,8000445c <stdio_usb_init+0x40>
8000442e:	48 d8       	lddpc	r8,80004460 <stdio_usb_init+0x44>
80004430:	91 09       	st.w	r8[0x0],r9
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
80004432:	f0 1f 00 0d 	mcall	80004464 <stdio_usb_init+0x48>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
80004436:	48 d6       	lddpc	r6,80004468 <stdio_usb_init+0x4c>
80004438:	6c 08       	ld.w	r8,r6[0x0]
8000443a:	0e 9b       	mov	r11,r7
8000443c:	70 1c       	ld.w	r12,r8[0x4]
8000443e:	f0 1f 00 0c 	mcall	8000446c <stdio_usb_init+0x50>
	setbuf(stdin, NULL);
80004442:	6c 08       	ld.w	r8,r6[0x0]
80004444:	0e 9b       	mov	r11,r7
80004446:	70 0c       	ld.w	r12,r8[0x0]
80004448:	f0 1f 00 09 	mcall	8000446c <stdio_usb_init+0x50>
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
8000444c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004450:	00 00       	add	r0,r0
80004452:	0b 34       	ld.ub	r4,r5++
80004454:	80 00       	ld.sh	r0,r0[0x0]
80004456:	44 9c       	lddsp	r12,sp[0x124]
80004458:	00 00       	add	r0,r0
8000445a:	0b 30       	ld.ub	r0,r5++
8000445c:	80 00       	ld.sh	r0,r0[0x0]
8000445e:	44 70       	lddsp	r0,sp[0x11c]
80004460:	00 00       	add	r0,r0
80004462:	0b 2c       	ld.uh	r12,r5++
80004464:	80 00       	ld.sh	r0,r0[0x0]
80004466:	43 c0       	lddsp	r0,sp[0xf0]
80004468:	00 00       	add	r0,r0
8000446a:	01 94       	ld.ub	r4,r0[0x1]
8000446c:	80 00       	ld.sh	r0,r0[0x0]
8000446e:	48 a0       	lddpc	r0,80004494 <stdio_usb_getchar+0x24>

80004470 <stdio_usb_getchar>:

	return udi_cdc_putc(data) ? 0 : -1;
}

void stdio_usb_getchar (void volatile * unused, char *data)
{
80004470:	eb cd 40 80 	pushm	r7,lr
80004474:	16 97       	mov	r7,r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
80004476:	48 88       	lddpc	r8,80004494 <stdio_usb_getchar+0x24>
80004478:	11 89       	ld.ub	r9,r8[0x0]
8000447a:	30 08       	mov	r8,0
8000447c:	f0 09 18 00 	cp.b	r9,r8
80004480:	c0 41       	brne	80004488 <stdio_usb_getchar+0x18>
		*data = 0;  // -1
80004482:	b6 88       	st.b	r11[0x0],r8
		return;
80004484:	e3 cd 80 80 	ldm	sp++,r7,pc
	}

	*data = (char)udi_cdc_getc();
80004488:	f0 1f 00 04 	mcall	80004498 <stdio_usb_getchar+0x28>
8000448c:	ae 8c       	st.b	r7[0x0],r12
8000448e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004492:	00 00       	add	r0,r0
80004494:	00 00       	add	r0,r0
80004496:	09 cc       	ld.ub	r12,r4[0x4]
80004498:	80 00       	ld.sh	r0,r0[0x0]
8000449a:	39 d8       	mov	r8,-99

8000449c <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
8000449c:	d4 01       	pushm	lr
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
8000449e:	48 78       	lddpc	r8,800044b8 <stdio_usb_putchar+0x1c>
800044a0:	11 89       	ld.ub	r9,r8[0x0]
800044a2:	30 08       	mov	r8,0
800044a4:	f0 09 18 00 	cp.b	r9,r8
800044a8:	c0 60       	breq	800044b4 <stdio_usb_putchar+0x18>
		return 0;  // -1
	}

	return udi_cdc_putc(data) ? 0 : -1;
800044aa:	16 9c       	mov	r12,r11
800044ac:	f0 1f 00 04 	mcall	800044bc <stdio_usb_putchar+0x20>
800044b0:	c0 21       	brne	800044b4 <stdio_usb_putchar+0x18>
800044b2:	dc 0a       	popm	pc,r12=-1
800044b4:	d8 0a       	popm	pc,r12=0
800044b6:	00 00       	add	r0,r0
800044b8:	00 00       	add	r0,r0
800044ba:	09 cc       	ld.ub	r12,r4[0x4]
800044bc:	80 00       	ld.sh	r0,r0[0x0]
800044be:	38 50       	mov	r0,-123

800044c0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
800044c0:	eb cd 40 f8 	pushm	r3-r7,lr
800044c4:	16 94       	mov	r4,r11
800044c6:	14 95       	mov	r5,r10
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
800044c8:	20 1c       	sub	r12,1
800044ca:	58 2c       	cp.w	r12,2
800044cc:	e0 8b 00 13 	brhi	800044f2 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
800044d0:	58 0a       	cp.w	r10,0
800044d2:	c0 31       	brne	800044d8 <_write+0x18>
800044d4:	30 07       	mov	r7,0
800044d6:	c0 f8       	rjmp	800044f4 <_write+0x34>
800044d8:	30 07       	mov	r7,0
		if (ptr_put(stdio_base, *ptr++) < 0) {
800044da:	48 93       	lddpc	r3,800044fc <_write+0x3c>
800044dc:	48 96       	lddpc	r6,80004500 <_write+0x40>
800044de:	66 0c       	ld.w	r12,r3[0x0]
800044e0:	6c 08       	ld.w	r8,r6[0x0]
800044e2:	e8 07 07 0b 	ld.ub	r11,r4[r7]
800044e6:	5d 18       	icall	r8
800044e8:	c0 55       	brlt	800044f2 <_write+0x32>
			return -1;
		}
		++nChars;
800044ea:	2f f7       	sub	r7,-1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
800044ec:	0e 35       	cp.w	r5,r7
800044ee:	cf 81       	brne	800044de <_write+0x1e>
800044f0:	c0 28       	rjmp	800044f4 <_write+0x34>
800044f2:	3f f7       	mov	r7,-1
			return -1;
		}
		++nChars;
	}
	return nChars;
}
800044f4:	0e 9c       	mov	r12,r7
800044f6:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800044fa:	00 00       	add	r0,r0
800044fc:	00 00       	add	r0,r0
800044fe:	0b 34       	ld.ub	r4,r5++
80004500:	00 00       	add	r0,r0
80004502:	0b 30       	ld.ub	r0,r5++

80004504 <tc_irq>:
}

int print_time = 0;

__attribute__((__interrupt__)) static void tc_irq(void)
{
80004504:	d4 01       	pushm	lr
	gpio_tgl_gpio_pin(GPIO0);
80004506:	31 3c       	mov	r12,19
80004508:	f0 1f 00 06 	mcall	80004520 <tc_irq+0x1c>
	print_time = 1;
8000450c:	30 19       	mov	r9,1
8000450e:	48 68       	lddpc	r8,80004524 <tc_irq+0x20>
80004510:	91 09       	st.w	r8[0x0],r9
	tc_read_sr(&AVR32_TC0, EXAMPLE_CHANNEL);
80004512:	30 0b       	mov	r11,0
80004514:	fc 7c 20 00 	mov	r12,-188416
80004518:	f0 1f 00 04 	mcall	80004528 <tc_irq+0x24>
}
8000451c:	d4 02       	popm	lr
8000451e:	d6 03       	rete
80004520:	80 00       	ld.sh	r0,r0[0x0]
80004522:	21 68       	sub	r8,22
80004524:	00 00       	add	r0,r0
80004526:	09 d0       	ld.ub	r0,r4[0x5]
80004528:	80 00       	ld.sh	r0,r0[0x0]
8000452a:	22 32       	sub	r2,35

8000452c <read_usb_chars>:
 */
#include <asf.h>

#define BUFFER_SIZE (50)

int read_usb_chars(char *ch) {
8000452c:	eb cd 40 80 	pushm	r7,lr
80004530:	18 97       	mov	r7,r12
	// grab single USB character if possible
	// input: *ch - address to place gotten character
	// output: int - non-negative if successfully gets character
	int to_return = -1;
	if (udi_cdc_is_rx_ready()) {
80004532:	f0 1f 00 07 	mcall	8000454c <read_usb_chars+0x20>
80004536:	c0 31       	brne	8000453c <read_usb_chars+0x10>
80004538:	e3 cf c0 80 	ldm	sp++,r7,pc,r12=-1
		to_return = scanf("%c", ch);
8000453c:	1a d7       	st.w	--sp,r7
8000453e:	48 5c       	lddpc	r12,80004550 <read_usb_chars+0x24>
80004540:	f0 1f 00 05 	mcall	80004554 <read_usb_chars+0x28>
80004544:	2f fd       	sub	sp,-4
			//printf("user typed \t%c\n\r", *ch);	
		//}
	}
	
	return to_return;
}
80004546:	e3 cd 80 80 	ldm	sp++,r7,pc
8000454a:	00 00       	add	r0,r0
8000454c:	80 00       	ld.sh	r0,r0[0x0]
8000454e:	38 a8       	mov	r8,-118
80004550:	80 00       	ld.sh	r0,r0[0x0]
80004552:	d9 84       	*unknown*
80004554:	80 00       	ld.sh	r0,r0[0x0]
80004556:	48 70       	lddpc	r0,80004570 <get_line+0x18>

80004558 <get_line>:

int get_line(char *buff_ptr) {
80004558:	eb cd 40 f8 	pushm	r3-r7,lr
8000455c:	18 94       	mov	r4,r12
8000455e:	30 06       	mov	r6,0
80004560:	0c 97       	mov	r7,r6
	// output: non-negative if buffer is of size greater than 0 and string is properly terminated
	int string_length = 0;
	int is_NL = 0;
	int to_return = -1;
	char* cur_char;
	while((read_usb_chars(cur_char) > 0) && (string_length < BUFFER_SIZE) && (!is_NL)) {
80004562:	30 03       	mov	r3,0
		// ch now points to gotten letter from USB
		// check if it's new line char
		(*cur_char == 10) ? (is_NL = 1) : (is_NL = is_NL);
80004564:	30 a5       	mov	r5,10
	// output: non-negative if buffer is of size greater than 0 and string is properly terminated
	int string_length = 0;
	int is_NL = 0;
	int to_return = -1;
	char* cur_char;
	while((read_usb_chars(cur_char) > 0) && (string_length < BUFFER_SIZE) && (!is_NL)) {
80004566:	c0 98       	rjmp	80004578 <get_line+0x20>
		// ch now points to gotten letter from USB
		// check if it's new line char
		(*cur_char == 10) ? (is_NL = 1) : (is_NL = is_NL);
80004568:	30 08       	mov	r8,0
8000456a:	11 88       	ld.ub	r8,r8[0x0]
8000456c:	f0 05 18 00 	cp.b	r5,r8
80004570:	f9 b6 00 01 	moveq	r6,1
		// write char to buffer; increment pointer and string length
		*buff_ptr = *cur_char;
80004574:	08 c8       	st.b	r4++,r8
		buff_ptr++;
		string_length++;
80004576:	2f f7       	sub	r7,-1
	// output: non-negative if buffer is of size greater than 0 and string is properly terminated
	int string_length = 0;
	int is_NL = 0;
	int to_return = -1;
	char* cur_char;
	while((read_usb_chars(cur_char) > 0) && (string_length < BUFFER_SIZE) && (!is_NL)) {
80004578:	30 0c       	mov	r12,0
8000457a:	f0 1f 00 10 	mcall	800045b8 <get_line+0x60>
8000457e:	e0 8a 00 0f 	brle	8000459c <get_line+0x44>
80004582:	e0 47 00 32 	cp.w	r7,50
80004586:	f9 b8 05 01 	movlt	r8,1
8000458a:	f9 b8 04 00 	movge	r8,0
8000458e:	58 06       	cp.w	r6,0
80004590:	5f 09       	sreq	r9
80004592:	f3 e8 00 08 	and	r8,r9,r8
80004596:	e6 08 18 00 	cp.b	r8,r3
8000459a:	ce 71       	brne	80004568 <get_line+0x10>
		*buff_ptr = *cur_char;
		buff_ptr++;
		string_length++;
	}
	// check for proper termination
	if(is_NL) {
8000459c:	58 06       	cp.w	r6,0
8000459e:	f9 bc 00 ff 	moveq	r12,-1
800045a2:	f9 bc 01 01 	movne	r12,1
		to_return = 1;
	}
	// add null termination
	if(string_length > 0) {
800045a6:	58 07       	cp.w	r7,0
800045a8:	e0 8a 00 05 	brle	800045b2 <get_line+0x5a>
		buff_ptr--;
		*buff_ptr = 0;
800045ac:	30 08       	mov	r8,0
800045ae:	e9 68 ff ff 	st.b	r4[-1],r8
	}
	return to_return;
}
800045b2:	e3 cd 80 f8 	ldm	sp++,r3-r7,pc
800045b6:	00 00       	add	r0,r0
800045b8:	80 00       	ld.sh	r0,r0[0x0]
800045ba:	45 2c       	lddsp	r12,sp[0x148]

800045bc <main>:
	print_time = 1;
	tc_read_sr(&AVR32_TC0, EXAMPLE_CHANNEL);
}

int main (void)
{
800045bc:	eb cd 40 f8 	pushm	r3-r7,lr
800045c0:	20 dd       	sub	sp,52
	// disable interrupts until ready
	cpu_irq_disable();
800045c2:	d3 03       	ssrf	0x10
	
	// initialize and set up interrupts
	INTC_init_interrupts();
800045c4:	f0 1f 00 34 	mcall	80004694 <main+0xd8>
	INTC_register_interrupt(&tc_irq, AVR32_TC0_IRQ0, AVR32_INTC_INT1);
800045c8:	30 1a       	mov	r10,1
800045ca:	e0 6b 04 20 	mov	r11,1056
800045ce:	4b 3c       	lddpc	r12,80004698 <main+0xdc>
800045d0:	f0 1f 00 33 	mcall	8000469c <main+0xe0>
	
	/* Insert system clock initialization code here (sysclk_init()). */
	board_init();
800045d4:	f0 1f 00 33 	mcall	800046a0 <main+0xe4>
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
800045d8:	4b 38       	lddpc	r8,800046a4 <main+0xe8>
800045da:	30 09       	mov	r9,0
800045dc:	b0 89       	st.b	r8[0x0],r9
800045de:	b0 99       	st.b	r8[0x1],r9
800045e0:	b0 a9       	st.b	r8[0x2],r9
800045e2:	b0 b9       	st.b	r8[0x3],r9
800045e4:	b0 c9       	st.b	r8[0x4],r9
800045e6:	b0 d9       	st.b	r8[0x5],r9
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
800045e8:	30 19       	mov	r9,1
800045ea:	b0 e9       	st.b	r8[0x6],r9
	sleepmgr_init();
	sysclk_init();
800045ec:	f0 1f 00 2f 	mcall	800046a8 <main+0xec>
	
	// starts and enables for USB
	udc_start();
800045f0:	f0 1f 00 2f 	mcall	800046ac <main+0xf0>
	stdio_usb_init();
800045f4:	f0 1f 00 2f 	mcall	800046b0 <main+0xf4>
	stdio_usb_enable();
800045f8:	f0 1f 00 2f 	mcall	800046b4 <main+0xf8>
 * \brief Enable a module clock derived from the PBC clock
 * \param index Index of the module clock in the PBCMASK register
 */
static inline void sysclk_enable_pbc_module(unsigned int index)
{
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBC, index);
800045fc:	30 5b       	mov	r11,5
800045fe:	30 4c       	mov	r12,4
80004600:	f0 1f 00 2e 	mcall	800046b8 <main+0xfc>
	// enable TC and USB clock
	sysclk_enable_peripheral_clock(EXAMPLE_TC);
	//sysclk_enable_peripheral_clock(&AVR32_USBC);
	
	// GPIO set up
	gpio_configure_pin(GPIO0, GPIO_DIR_OUTPUT);
80004604:	30 1b       	mov	r11,1
80004606:	31 3c       	mov	r12,19
80004608:	f0 1f 00 2d 	mcall	800046bc <main+0x100>
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
8000460c:	4a db       	lddpc	r11,800046c0 <main+0x104>
8000460e:	fc 7c 20 00 	mov	r12,-188416
80004612:	f0 1f 00 2d 	mcall	800046c4 <main+0x108>
	 * Set the compare triggers.
	 * We configure it to count every 1 ms.
	 * We want: (1 / (fPBC / 8)) * RC = 1 ms, hence RC = (fPBC / 8) / 1000
	 * to get an interrupt every 1 ms.
	 */
	tc_write_rc(tc, EXAMPLE_CHANNEL, (sysclk_get_pbc_hz() / 8) / 1000); // there's an upper limit for time; can't do 1 second, for example; 1 ms works fine.
80004616:	e0 6a 05 dc 	mov	r10,1500
8000461a:	30 0b       	mov	r11,0
8000461c:	fc 7c 20 00 	mov	r12,-188416
80004620:	f0 1f 00 2a 	mcall	800046c8 <main+0x10c>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_CHANNEL, &tc_interrupt);
80004624:	4a aa       	lddpc	r10,800046cc <main+0x110>
80004626:	30 0b       	mov	r11,0
80004628:	fc 7c 20 00 	mov	r12,-188416
8000462c:	f0 1f 00 29 	mcall	800046d0 <main+0x114>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_CHANNEL);
80004630:	30 0b       	mov	r11,0
80004632:	fc 7c 20 00 	mov	r12,-188416
80004636:	f0 1f 00 28 	mcall	800046d4 <main+0x118>
	// initialize TC
	volatile avr32_tc_t *tc = EXAMPLE_TC;
	tc_init(tc);
	
	// enable interrupts
	cpu_irq_enable();
8000463a:	d5 03       	csrf	0x10
	
	while(1) {
		if(get_line(usb_buffer) > 0) {
8000463c:	1a 97       	mov	r7,sp
			printf("typed: %s\n\r", usb_buffer);
8000463e:	4a 75       	lddpc	r5,800046d8 <main+0x11c>
		}
		if(print_time) {
80004640:	4a 76       	lddpc	r6,800046dc <main+0x120>
			printf("1 ms has passed.\n\r");
80004642:	4a 84       	lddpc	r4,800046e0 <main+0x124>
			print_time = 0;
80004644:	30 03       	mov	r3,0
	
	// enable interrupts
	cpu_irq_enable();
	
	while(1) {
		if(get_line(usb_buffer) > 0) {
80004646:	1a 9c       	mov	r12,sp
80004648:	f0 1f 00 27 	mcall	800046e4 <main+0x128>
8000464c:	e0 8a 00 07 	brle	8000465a <main+0x9e>
			printf("typed: %s\n\r", usb_buffer);
80004650:	1a d7       	st.w	--sp,r7
80004652:	0a 9c       	mov	r12,r5
80004654:	f0 1f 00 25 	mcall	800046e8 <main+0x12c>
80004658:	2f fd       	sub	sp,-4
		}
		if(print_time) {
8000465a:	6c 08       	ld.w	r8,r6[0x0]
8000465c:	58 08       	cp.w	r8,0
8000465e:	c0 50       	breq	80004668 <main+0xac>
			printf("1 ms has passed.\n\r");
80004660:	08 9c       	mov	r12,r4
80004662:	f0 1f 00 22 	mcall	800046e8 <main+0x12c>
			print_time = 0;
80004666:	8d 03       	st.w	r6[0x0],r3
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80004668:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000466c:	f0 ca d1 20 	sub	r10,r8,-12000
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80004670:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80004674:	14 38       	cp.w	r8,r10
80004676:	e0 88 00 08 	brls	80004686 <main+0xca>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000467a:	12 38       	cp.w	r8,r9
8000467c:	fe 98 ff fa 	brls	80004670 <main+0xb4>
80004680:	12 3a       	cp.w	r10,r9
80004682:	ce 23       	brcs	80004646 <main+0x8a>
80004684:	cf 6b       	rjmp	80004670 <main+0xb4>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80004686:	12 38       	cp.w	r8,r9
80004688:	fe 9b ff df 	brhi	80004646 <main+0x8a>
8000468c:	12 3a       	cp.w	r10,r9
8000468e:	cd c3       	brcs	80004646 <main+0x8a>
80004690:	cf 0b       	rjmp	80004670 <main+0xb4>
80004692:	00 00       	add	r0,r0
80004694:	80 00       	ld.sh	r0,r0[0x0]
80004696:	35 54       	mov	r4,85
80004698:	80 00       	ld.sh	r0,r0[0x0]
8000469a:	45 04       	lddsp	r4,sp[0x140]
8000469c:	80 00       	ld.sh	r0,r0[0x0]
8000469e:	34 d4       	mov	r4,77
800046a0:	80 00       	ld.sh	r0,r0[0x0]
800046a2:	36 24       	mov	r4,98
800046a4:	00 00       	add	r0,r0
800046a6:	0b 24       	ld.uh	r4,r5++
800046a8:	80 00       	ld.sh	r0,r0[0x0]
800046aa:	34 9c       	mov	r12,73
800046ac:	80 00       	ld.sh	r0,r0[0x0]
800046ae:	43 c0       	lddsp	r0,sp[0xf0]
800046b0:	80 00       	ld.sh	r0,r0[0x0]
800046b2:	44 1c       	lddsp	r12,sp[0x104]
800046b4:	80 00       	ld.sh	r0,r0[0x0]
800046b6:	44 10       	lddsp	r0,sp[0x104]
800046b8:	80 00       	ld.sh	r0,r0[0x0]
800046ba:	33 e2       	mov	r2,62
800046bc:	80 00       	ld.sh	r0,r0[0x0]
800046be:	20 38       	sub	r8,3
800046c0:	80 00       	ld.sh	r0,r0[0x0]
800046c2:	d9 7c       	*unknown*
800046c4:	80 00       	ld.sh	r0,r0[0x0]
800046c6:	21 84       	sub	r4,24
800046c8:	80 00       	ld.sh	r0,r0[0x0]
800046ca:	22 44       	sub	r4,36
800046cc:	80 00       	ld.sh	r0,r0[0x0]
800046ce:	d9 78       	*unknown*
800046d0:	80 00       	ld.sh	r0,r0[0x0]
800046d2:	22 78       	sub	r8,39
800046d4:	80 00       	ld.sh	r0,r0[0x0]
800046d6:	22 20       	sub	r0,34
800046d8:	80 00       	ld.sh	r0,r0[0x0]
800046da:	d9 88       	*unknown*
800046dc:	00 00       	add	r0,r0
800046de:	09 d0       	ld.ub	r0,r4[0x5]
800046e0:	80 00       	ld.sh	r0,r0[0x0]
800046e2:	d9 94       	*unknown*
800046e4:	80 00       	ld.sh	r0,r0[0x0]
800046e6:	45 58       	lddsp	r8,sp[0x154]
800046e8:	80 00       	ld.sh	r0,r0[0x0]
800046ea:	48 44       	lddpc	r4,800046f8 <memcpy+0xc>

800046ec <memcpy>:
800046ec:	58 8a       	cp.w	r10,8
800046ee:	c2 f5       	brlt	8000474c <memcpy+0x60>
800046f0:	f9 eb 10 09 	or	r9,r12,r11
800046f4:	e2 19 00 03 	andl	r9,0x3,COH
800046f8:	e0 81 00 97 	brne	80004826 <memcpy+0x13a>
800046fc:	e0 4a 00 20 	cp.w	r10,32
80004700:	c3 b4       	brge	80004776 <memcpy+0x8a>
80004702:	f4 08 14 02 	asr	r8,r10,0x2
80004706:	f0 09 11 08 	rsub	r9,r8,8
8000470a:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000470e:	76 69       	ld.w	r9,r11[0x18]
80004710:	99 69       	st.w	r12[0x18],r9
80004712:	76 59       	ld.w	r9,r11[0x14]
80004714:	99 59       	st.w	r12[0x14],r9
80004716:	76 49       	ld.w	r9,r11[0x10]
80004718:	99 49       	st.w	r12[0x10],r9
8000471a:	76 39       	ld.w	r9,r11[0xc]
8000471c:	99 39       	st.w	r12[0xc],r9
8000471e:	76 29       	ld.w	r9,r11[0x8]
80004720:	99 29       	st.w	r12[0x8],r9
80004722:	76 19       	ld.w	r9,r11[0x4]
80004724:	99 19       	st.w	r12[0x4],r9
80004726:	76 09       	ld.w	r9,r11[0x0]
80004728:	99 09       	st.w	r12[0x0],r9
8000472a:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000472e:	f8 08 00 28 	add	r8,r12,r8<<0x2
80004732:	e0 1a 00 03 	andl	r10,0x3
80004736:	f4 0a 11 04 	rsub	r10,r10,4
8000473a:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000473e:	17 a9       	ld.ub	r9,r11[0x2]
80004740:	b0 a9       	st.b	r8[0x2],r9
80004742:	17 99       	ld.ub	r9,r11[0x1]
80004744:	b0 99       	st.b	r8[0x1],r9
80004746:	17 89       	ld.ub	r9,r11[0x0]
80004748:	b0 89       	st.b	r8[0x0],r9
8000474a:	5e fc       	retal	r12
8000474c:	f4 0a 11 09 	rsub	r10,r10,9
80004750:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80004754:	17 f9       	ld.ub	r9,r11[0x7]
80004756:	b8 f9       	st.b	r12[0x7],r9
80004758:	17 e9       	ld.ub	r9,r11[0x6]
8000475a:	b8 e9       	st.b	r12[0x6],r9
8000475c:	17 d9       	ld.ub	r9,r11[0x5]
8000475e:	b8 d9       	st.b	r12[0x5],r9
80004760:	17 c9       	ld.ub	r9,r11[0x4]
80004762:	b8 c9       	st.b	r12[0x4],r9
80004764:	17 b9       	ld.ub	r9,r11[0x3]
80004766:	b8 b9       	st.b	r12[0x3],r9
80004768:	17 a9       	ld.ub	r9,r11[0x2]
8000476a:	b8 a9       	st.b	r12[0x2],r9
8000476c:	17 99       	ld.ub	r9,r11[0x1]
8000476e:	b8 99       	st.b	r12[0x1],r9
80004770:	17 89       	ld.ub	r9,r11[0x0]
80004772:	b8 89       	st.b	r12[0x0],r9
80004774:	5e fc       	retal	r12
80004776:	eb cd 40 c0 	pushm	r6-r7,lr
8000477a:	18 99       	mov	r9,r12
8000477c:	22 0a       	sub	r10,32
8000477e:	b7 07       	ld.d	r6,r11++
80004780:	b3 26       	st.d	r9++,r6
80004782:	b7 07       	ld.d	r6,r11++
80004784:	b3 26       	st.d	r9++,r6
80004786:	b7 07       	ld.d	r6,r11++
80004788:	b3 26       	st.d	r9++,r6
8000478a:	b7 07       	ld.d	r6,r11++
8000478c:	b3 26       	st.d	r9++,r6
8000478e:	22 0a       	sub	r10,32
80004790:	cf 74       	brge	8000477e <memcpy+0x92>
80004792:	2f 0a       	sub	r10,-16
80004794:	c0 65       	brlt	800047a0 <memcpy+0xb4>
80004796:	b7 07       	ld.d	r6,r11++
80004798:	b3 26       	st.d	r9++,r6
8000479a:	b7 07       	ld.d	r6,r11++
8000479c:	b3 26       	st.d	r9++,r6
8000479e:	21 0a       	sub	r10,16
800047a0:	5c 3a       	neg	r10
800047a2:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
800047a6:	d7 03       	nop
800047a8:	d7 03       	nop
800047aa:	f7 36 00 0e 	ld.ub	r6,r11[14]
800047ae:	f3 66 00 0e 	st.b	r9[14],r6
800047b2:	f7 36 00 0d 	ld.ub	r6,r11[13]
800047b6:	f3 66 00 0d 	st.b	r9[13],r6
800047ba:	f7 36 00 0c 	ld.ub	r6,r11[12]
800047be:	f3 66 00 0c 	st.b	r9[12],r6
800047c2:	f7 36 00 0b 	ld.ub	r6,r11[11]
800047c6:	f3 66 00 0b 	st.b	r9[11],r6
800047ca:	f7 36 00 0a 	ld.ub	r6,r11[10]
800047ce:	f3 66 00 0a 	st.b	r9[10],r6
800047d2:	f7 36 00 09 	ld.ub	r6,r11[9]
800047d6:	f3 66 00 09 	st.b	r9[9],r6
800047da:	f7 36 00 08 	ld.ub	r6,r11[8]
800047de:	f3 66 00 08 	st.b	r9[8],r6
800047e2:	f7 36 00 07 	ld.ub	r6,r11[7]
800047e6:	f3 66 00 07 	st.b	r9[7],r6
800047ea:	f7 36 00 06 	ld.ub	r6,r11[6]
800047ee:	f3 66 00 06 	st.b	r9[6],r6
800047f2:	f7 36 00 05 	ld.ub	r6,r11[5]
800047f6:	f3 66 00 05 	st.b	r9[5],r6
800047fa:	f7 36 00 04 	ld.ub	r6,r11[4]
800047fe:	f3 66 00 04 	st.b	r9[4],r6
80004802:	f7 36 00 03 	ld.ub	r6,r11[3]
80004806:	f3 66 00 03 	st.b	r9[3],r6
8000480a:	f7 36 00 02 	ld.ub	r6,r11[2]
8000480e:	f3 66 00 02 	st.b	r9[2],r6
80004812:	f7 36 00 01 	ld.ub	r6,r11[1]
80004816:	f3 66 00 01 	st.b	r9[1],r6
8000481a:	f7 36 00 00 	ld.ub	r6,r11[0]
8000481e:	f3 66 00 00 	st.b	r9[0],r6
80004822:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80004826:	20 1a       	sub	r10,1
80004828:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000482c:	f8 0a 0b 09 	st.b	r12[r10],r9
80004830:	cf b1       	brne	80004826 <memcpy+0x13a>
80004832:	5e fc       	retal	r12

80004834 <memset>:
80004834:	18 98       	mov	r8,r12
80004836:	c0 38       	rjmp	8000483c <memset+0x8>
80004838:	10 cb       	st.b	r8++,r11
8000483a:	20 1a       	sub	r10,1
8000483c:	58 0a       	cp.w	r10,0
8000483e:	cf d1       	brne	80004838 <memset+0x4>
80004840:	5e fc       	retal	r12
80004842:	d7 03       	nop

80004844 <printf>:
80004844:	d4 21       	pushm	r4-r7,lr
80004846:	e0 68 01 94 	mov	r8,404
8000484a:	fa c4 ff ec 	sub	r4,sp,-20
8000484e:	18 96       	mov	r6,r12
80004850:	70 07       	ld.w	r7,r8[0x0]
80004852:	58 07       	cp.w	r7,0
80004854:	c0 70       	breq	80004862 <printf+0x1e>
80004856:	6e 68       	ld.w	r8,r7[0x18]
80004858:	58 08       	cp.w	r8,0
8000485a:	c0 41       	brne	80004862 <printf+0x1e>
8000485c:	0e 9c       	mov	r12,r7
8000485e:	e0 a0 24 37 	rcall	800090cc <__sinit>
80004862:	08 99       	mov	r9,r4
80004864:	0c 9a       	mov	r10,r6
80004866:	0e 9c       	mov	r12,r7
80004868:	6e 1b       	ld.w	r11,r7[0x4]
8000486a:	e0 a0 02 4b 	rcall	80004d00 <_vfprintf_r>
8000486e:	d8 22       	popm	r4-r7,pc

80004870 <scanf>:
80004870:	d4 21       	pushm	r4-r7,lr
80004872:	e0 68 01 94 	mov	r8,404
80004876:	18 97       	mov	r7,r12
80004878:	fa c4 ff ec 	sub	r4,sp,-20
8000487c:	70 0c       	ld.w	r12,r8[0x0]
8000487e:	58 0c       	cp.w	r12,0
80004880:	c0 60       	breq	8000488c <scanf+0x1c>
80004882:	78 68       	ld.w	r8,r12[0x18]
80004884:	58 08       	cp.w	r8,0
80004886:	c0 31       	brne	8000488c <scanf+0x1c>
80004888:	e0 a0 24 22 	rcall	800090cc <__sinit>
8000488c:	e0 68 01 94 	mov	r8,404
80004890:	70 08       	ld.w	r8,r8[0x0]
80004892:	08 99       	mov	r9,r4
80004894:	0e 9a       	mov	r10,r7
80004896:	10 9c       	mov	r12,r8
80004898:	70 0b       	ld.w	r11,r8[0x0]
8000489a:	e0 a0 11 c7 	rcall	80006c28 <__svfscanf_r>
8000489e:	d8 22       	popm	r4-r7,pc

800048a0 <setbuf>:
800048a0:	d4 01       	pushm	lr
800048a2:	e0 69 04 00 	mov	r9,1024
800048a6:	58 0b       	cp.w	r11,0
800048a8:	f9 ba 00 02 	moveq	r10,2
800048ac:	f9 ba 01 00 	movne	r10,0
800048b0:	c0 2c       	rcall	800048b4 <setvbuf>
800048b2:	d8 02       	popm	pc

800048b4 <setvbuf>:
800048b4:	d4 31       	pushm	r0-r7,lr
800048b6:	e0 68 01 94 	mov	r8,404
800048ba:	18 97       	mov	r7,r12
800048bc:	16 96       	mov	r6,r11
800048be:	14 95       	mov	r5,r10
800048c0:	12 94       	mov	r4,r9
800048c2:	70 0c       	ld.w	r12,r8[0x0]
800048c4:	58 0c       	cp.w	r12,0
800048c6:	c0 60       	breq	800048d2 <setvbuf+0x1e>
800048c8:	78 68       	ld.w	r8,r12[0x18]
800048ca:	58 08       	cp.w	r8,0
800048cc:	c0 31       	brne	800048d2 <setvbuf+0x1e>
800048ce:	e0 a0 23 ff 	rcall	800090cc <__sinit>
800048d2:	4b b8       	lddpc	r8,800049bc <setvbuf+0x108>
800048d4:	10 37       	cp.w	r7,r8
800048d6:	c0 61       	brne	800048e2 <setvbuf+0x2e>
800048d8:	e0 68 01 94 	mov	r8,404
800048dc:	70 08       	ld.w	r8,r8[0x0]
800048de:	70 07       	ld.w	r7,r8[0x0]
800048e0:	c1 08       	rjmp	80004900 <setvbuf+0x4c>
800048e2:	4b 88       	lddpc	r8,800049c0 <setvbuf+0x10c>
800048e4:	10 37       	cp.w	r7,r8
800048e6:	c0 61       	brne	800048f2 <setvbuf+0x3e>
800048e8:	e0 68 01 94 	mov	r8,404
800048ec:	70 08       	ld.w	r8,r8[0x0]
800048ee:	70 17       	ld.w	r7,r8[0x4]
800048f0:	c0 88       	rjmp	80004900 <setvbuf+0x4c>
800048f2:	4b 58       	lddpc	r8,800049c4 <setvbuf+0x110>
800048f4:	10 37       	cp.w	r7,r8
800048f6:	c0 51       	brne	80004900 <setvbuf+0x4c>
800048f8:	e0 68 01 94 	mov	r8,404
800048fc:	70 08       	ld.w	r8,r8[0x0]
800048fe:	70 27       	ld.w	r7,r8[0x8]
80004900:	58 25       	cp.w	r5,2
80004902:	5f b8       	srhi	r8
80004904:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
80004908:	c0 20       	breq	8000490c <setvbuf+0x58>
8000490a:	dc 3a       	popm	r0-r7,pc,r12=-1
8000490c:	e0 63 01 94 	mov	r3,404
80004910:	0e 9b       	mov	r11,r7
80004912:	66 0c       	ld.w	r12,r3[0x0]
80004914:	e0 a0 22 f2 	rcall	80008ef8 <_fflush_r>
80004918:	30 08       	mov	r8,0
8000491a:	8f 68       	st.w	r7[0x18],r8
8000491c:	8f 18       	st.w	r7[0x4],r8
8000491e:	8e 68       	ld.sh	r8,r7[0xc]
80004920:	ed b8 00 07 	bld	r8,0x7
80004924:	c0 51       	brne	8000492e <setvbuf+0x7a>
80004926:	66 0c       	ld.w	r12,r3[0x0]
80004928:	6e 4b       	ld.w	r11,r7[0x10]
8000492a:	e0 a0 24 c5 	rcall	800092b4 <_free_r>
8000492e:	8e 68       	ld.sh	r8,r7[0xc]
80004930:	e0 18 ff 7c 	andl	r8,0xff7c
80004934:	ae 68       	st.h	r7[0xc],r8
80004936:	58 25       	cp.w	r5,2
80004938:	c0 31       	brne	8000493e <setvbuf+0x8a>
8000493a:	30 0c       	mov	r12,0
8000493c:	c1 38       	rjmp	80004962 <setvbuf+0xae>
8000493e:	58 06       	cp.w	r6,0
80004940:	c2 11       	brne	80004982 <setvbuf+0xce>
80004942:	e0 63 04 00 	mov	r3,1024
80004946:	58 04       	cp.w	r4,0
80004948:	e6 04 17 00 	moveq	r4,r3
8000494c:	08 9c       	mov	r12,r4
8000494e:	e0 a0 27 87 	rcall	8000985c <malloc>
80004952:	18 96       	mov	r6,r12
80004954:	c1 41       	brne	8000497c <setvbuf+0xc8>
80004956:	06 9c       	mov	r12,r3
80004958:	e0 a0 27 82 	rcall	8000985c <malloc>
8000495c:	18 96       	mov	r6,r12
8000495e:	c0 e1       	brne	8000497a <setvbuf+0xc6>
80004960:	3f fc       	mov	r12,-1
80004962:	8e 68       	ld.sh	r8,r7[0xc]
80004964:	a1 b8       	sbr	r8,0x1
80004966:	ae 68       	st.h	r7[0xc],r8
80004968:	ee c8 ff b9 	sub	r8,r7,-71
8000496c:	8f 48       	st.w	r7[0x10],r8
8000496e:	8f 08       	st.w	r7[0x0],r8
80004970:	30 08       	mov	r8,0
80004972:	8f 28       	st.w	r7[0x8],r8
80004974:	30 18       	mov	r8,1
80004976:	8f 58       	st.w	r7[0x14],r8
80004978:	d8 32       	popm	r0-r7,pc
8000497a:	06 94       	mov	r4,r3
8000497c:	8e 68       	ld.sh	r8,r7[0xc]
8000497e:	a7 b8       	sbr	r8,0x7
80004980:	ae 68       	st.h	r7[0xc],r8
80004982:	58 15       	cp.w	r5,1
80004984:	c0 71       	brne	80004992 <setvbuf+0xde>
80004986:	8e 68       	ld.sh	r8,r7[0xc]
80004988:	a1 a8       	sbr	r8,0x0
8000498a:	ae 68       	st.h	r7[0xc],r8
8000498c:	e8 08 11 00 	rsub	r8,r4,0
80004990:	8f 68       	st.w	r7[0x18],r8
80004992:	e0 68 01 94 	mov	r8,404
80004996:	fe c9 b9 6a 	sub	r9,pc,-18070
8000499a:	70 08       	ld.w	r8,r8[0x0]
8000499c:	8f 46       	st.w	r7[0x10],r6
8000499e:	91 a9       	st.w	r8[0x28],r9
800049a0:	8f 06       	st.w	r7[0x0],r6
800049a2:	8f 54       	st.w	r7[0x14],r4
800049a4:	8e 68       	ld.sh	r8,r7[0xc]
800049a6:	10 9c       	mov	r12,r8
800049a8:	e2 1c 00 08 	andl	r12,0x8,COH
800049ac:	c0 70       	breq	800049ba <setvbuf+0x106>
800049ae:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800049b2:	30 0c       	mov	r12,0
800049b4:	f9 b4 01 00 	movne	r4,0
800049b8:	8f 24       	st.w	r7[0x8],r4
800049ba:	d8 32       	popm	r0-r7,pc
800049bc:	80 00       	ld.sh	r0,r0[0x0]
800049be:	de c4       	*unknown*
800049c0:	80 00       	ld.sh	r0,r0[0x0]
800049c2:	de e4       	*unknown*
800049c4:	80 00       	ld.sh	r0,r0[0x0]
800049c6:	df 04       	*unknown*

800049c8 <get_arg>:
800049c8:	d4 31       	pushm	r0-r7,lr
800049ca:	20 8d       	sub	sp,32
800049cc:	fa c4 ff bc 	sub	r4,sp,-68
800049d0:	50 4b       	stdsp	sp[0x10],r11
800049d2:	68 2e       	ld.w	lr,r4[0x8]
800049d4:	50 58       	stdsp	sp[0x14],r8
800049d6:	12 96       	mov	r6,r9
800049d8:	7c 0b       	ld.w	r11,lr[0x0]
800049da:	70 05       	ld.w	r5,r8[0x0]
800049dc:	50 6e       	stdsp	sp[0x18],lr
800049de:	58 0b       	cp.w	r11,0
800049e0:	f4 0b 17 00 	moveq	r11,r10
800049e4:	68 03       	ld.w	r3,r4[0x0]
800049e6:	68 11       	ld.w	r1,r4[0x4]
800049e8:	40 49       	lddsp	r9,sp[0x10]
800049ea:	30 08       	mov	r8,0
800049ec:	c2 c9       	rjmp	80004c44 <get_arg+0x27c>
800049ee:	2f fb       	sub	r11,-1
800049f0:	32 5c       	mov	r12,37
800049f2:	17 8a       	ld.ub	r10,r11[0x0]
800049f4:	f8 0a 18 00 	cp.b	r10,r12
800049f8:	5f 1e       	srne	lr
800049fa:	f0 0a 18 00 	cp.b	r10,r8
800049fe:	5f 1c       	srne	r12
80004a00:	fd ec 00 0c 	and	r12,lr,r12
80004a04:	f0 0c 18 00 	cp.b	r12,r8
80004a08:	cf 31       	brne	800049ee <get_arg+0x26>
80004a0a:	58 0a       	cp.w	r10,0
80004a0c:	e0 80 01 29 	breq	80004c5e <get_arg+0x296>
80004a10:	30 0c       	mov	r12,0
80004a12:	3f fa       	mov	r10,-1
80004a14:	18 90       	mov	r0,r12
80004a16:	50 3a       	stdsp	sp[0xc],r10
80004a18:	18 94       	mov	r4,r12
80004a1a:	18 92       	mov	r2,r12
80004a1c:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80004a20:	16 97       	mov	r7,r11
80004a22:	50 7c       	stdsp	sp[0x1c],r12
80004a24:	4c ec       	lddpc	r12,80004b5c <get_arg+0x194>
80004a26:	0f 3a       	ld.ub	r10,r7++
80004a28:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80004a2c:	40 7c       	lddsp	r12,sp[0x1c]
80004a2e:	1c 0c       	add	r12,lr
80004a30:	4c ce       	lddpc	lr,80004b60 <get_arg+0x198>
80004a32:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80004a36:	20 1e       	sub	lr,1
80004a38:	50 0e       	stdsp	sp[0x0],lr
80004a3a:	4c be       	lddpc	lr,80004b64 <get_arg+0x19c>
80004a3c:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80004a40:	50 7c       	stdsp	sp[0x1c],r12
80004a42:	40 0c       	lddsp	r12,sp[0x0]
80004a44:	58 7c       	cp.w	r12,7
80004a46:	e0 8b 00 f8 	brhi	80004c36 <get_arg+0x26e>
80004a4a:	4c 8e       	lddpc	lr,80004b68 <get_arg+0x1a0>
80004a4c:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80004a50:	36 8b       	mov	r11,104
80004a52:	f6 0a 18 00 	cp.b	r10,r11
80004a56:	e0 80 00 f0 	breq	80004c36 <get_arg+0x26e>
80004a5a:	37 1b       	mov	r11,113
80004a5c:	f6 0a 18 00 	cp.b	r10,r11
80004a60:	c0 70       	breq	80004a6e <get_arg+0xa6>
80004a62:	34 cb       	mov	r11,76
80004a64:	f6 0a 18 00 	cp.b	r10,r11
80004a68:	c0 51       	brne	80004a72 <get_arg+0xaa>
80004a6a:	a3 b4       	sbr	r4,0x3
80004a6c:	ce 58       	rjmp	80004c36 <get_arg+0x26e>
80004a6e:	a5 b4       	sbr	r4,0x5
80004a70:	ce 38       	rjmp	80004c36 <get_arg+0x26e>
80004a72:	08 9a       	mov	r10,r4
80004a74:	0e 9b       	mov	r11,r7
80004a76:	a5 aa       	sbr	r10,0x4
80004a78:	17 3c       	ld.ub	r12,r11++
80004a7a:	a5 b4       	sbr	r4,0x5
80004a7c:	36 ce       	mov	lr,108
80004a7e:	fc 0c 18 00 	cp.b	r12,lr
80004a82:	e0 80 00 db 	breq	80004c38 <get_arg+0x270>
80004a86:	14 94       	mov	r4,r10
80004a88:	cd 78       	rjmp	80004c36 <get_arg+0x26e>
80004a8a:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
80004a8e:	36 7c       	mov	r12,103
80004a90:	f8 0a 18 00 	cp.b	r10,r12
80004a94:	e0 8b 00 27 	brhi	80004ae2 <get_arg+0x11a>
80004a98:	36 5b       	mov	r11,101
80004a9a:	f6 0a 18 00 	cp.b	r10,r11
80004a9e:	c4 82       	brcc	80004b2e <get_arg+0x166>
80004aa0:	34 fb       	mov	r11,79
80004aa2:	f6 0a 18 00 	cp.b	r10,r11
80004aa6:	c4 80       	breq	80004b36 <get_arg+0x16e>
80004aa8:	e0 8b 00 0c 	brhi	80004ac0 <get_arg+0xf8>
80004aac:	34 5b       	mov	r11,69
80004aae:	f6 0a 18 00 	cp.b	r10,r11
80004ab2:	c3 e0       	breq	80004b2e <get_arg+0x166>
80004ab4:	34 7b       	mov	r11,71
80004ab6:	f6 0a 18 00 	cp.b	r10,r11
80004aba:	c3 a0       	breq	80004b2e <get_arg+0x166>
80004abc:	34 4b       	mov	r11,68
80004abe:	c0 88       	rjmp	80004ace <get_arg+0x106>
80004ac0:	35 8b       	mov	r11,88
80004ac2:	f6 0a 18 00 	cp.b	r10,r11
80004ac6:	c2 c0       	breq	80004b1e <get_arg+0x156>
80004ac8:	e0 8b 00 07 	brhi	80004ad6 <get_arg+0x10e>
80004acc:	35 5b       	mov	r11,85
80004ace:	f6 0a 18 00 	cp.b	r10,r11
80004ad2:	c3 51       	brne	80004b3c <get_arg+0x174>
80004ad4:	c3 18       	rjmp	80004b36 <get_arg+0x16e>
80004ad6:	36 3b       	mov	r11,99
80004ad8:	f6 0a 18 00 	cp.b	r10,r11
80004adc:	c2 f0       	breq	80004b3a <get_arg+0x172>
80004ade:	36 4b       	mov	r11,100
80004ae0:	c0 e8       	rjmp	80004afc <get_arg+0x134>
80004ae2:	37 0b       	mov	r11,112
80004ae4:	f6 0a 18 00 	cp.b	r10,r11
80004ae8:	c2 50       	breq	80004b32 <get_arg+0x16a>
80004aea:	e0 8b 00 0d 	brhi	80004b04 <get_arg+0x13c>
80004aee:	36 eb       	mov	r11,110
80004af0:	f6 0a 18 00 	cp.b	r10,r11
80004af4:	c1 f0       	breq	80004b32 <get_arg+0x16a>
80004af6:	e0 8b 00 14 	brhi	80004b1e <get_arg+0x156>
80004afa:	36 9b       	mov	r11,105
80004afc:	f6 0a 18 00 	cp.b	r10,r11
80004b00:	c1 e1       	brne	80004b3c <get_arg+0x174>
80004b02:	c0 e8       	rjmp	80004b1e <get_arg+0x156>
80004b04:	37 5b       	mov	r11,117
80004b06:	f6 0a 18 00 	cp.b	r10,r11
80004b0a:	c0 a0       	breq	80004b1e <get_arg+0x156>
80004b0c:	37 8b       	mov	r11,120
80004b0e:	f6 0a 18 00 	cp.b	r10,r11
80004b12:	c0 60       	breq	80004b1e <get_arg+0x156>
80004b14:	37 3b       	mov	r11,115
80004b16:	f6 0a 18 00 	cp.b	r10,r11
80004b1a:	c1 11       	brne	80004b3c <get_arg+0x174>
80004b1c:	c0 b8       	rjmp	80004b32 <get_arg+0x16a>
80004b1e:	ed b4 00 04 	bld	r4,0x4
80004b22:	c0 a0       	breq	80004b36 <get_arg+0x16e>
80004b24:	ed b4 00 05 	bld	r4,0x5
80004b28:	c0 91       	brne	80004b3a <get_arg+0x172>
80004b2a:	30 20       	mov	r0,2
80004b2c:	c0 88       	rjmp	80004b3c <get_arg+0x174>
80004b2e:	30 40       	mov	r0,4
80004b30:	c0 68       	rjmp	80004b3c <get_arg+0x174>
80004b32:	30 30       	mov	r0,3
80004b34:	c0 48       	rjmp	80004b3c <get_arg+0x174>
80004b36:	30 10       	mov	r0,1
80004b38:	c0 28       	rjmp	80004b3c <get_arg+0x174>
80004b3a:	30 00       	mov	r0,0
80004b3c:	40 3b       	lddsp	r11,sp[0xc]
80004b3e:	5b fb       	cp.w	r11,-1
80004b40:	c0 40       	breq	80004b48 <get_arg+0x180>
80004b42:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80004b46:	c7 88       	rjmp	80004c36 <get_arg+0x26e>
80004b48:	58 60       	cp.w	r0,6
80004b4a:	e0 8b 00 76 	brhi	80004c36 <get_arg+0x26e>
80004b4e:	6c 0a       	ld.w	r10,r6[0x0]
80004b50:	ea cc ff ff 	sub	r12,r5,-1
80004b54:	48 6e       	lddpc	lr,80004b6c <get_arg+0x1a4>
80004b56:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80004b5a:	d7 03       	nop
80004b5c:	80 00       	ld.sh	r0,r0[0x0]
80004b5e:	dc 84       	*unknown*
80004b60:	80 00       	ld.sh	r0,r0[0x0]
80004b62:	db bc       	*unknown*
80004b64:	80 00       	ld.sh	r0,r0[0x0]
80004b66:	db 50       	acall	0xb5
80004b68:	80 00       	ld.sh	r0,r0[0x0]
80004b6a:	d9 b0       	acall	0x9b
80004b6c:	80 00       	ld.sh	r0,r0[0x0]
80004b6e:	d9 d0       	acall	0x9d
80004b70:	f4 cb ff f8 	sub	r11,r10,-8
80004b74:	8d 0b       	st.w	r6[0x0],r11
80004b76:	f4 ea 00 00 	ld.d	r10,r10[0]
80004b7a:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004b7e:	c0 f8       	rjmp	80004b9c <get_arg+0x1d4>
80004b80:	f4 cb ff fc 	sub	r11,r10,-4
80004b84:	8d 0b       	st.w	r6[0x0],r11
80004b86:	74 0a       	ld.w	r10,r10[0x0]
80004b88:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004b8c:	c0 88       	rjmp	80004b9c <get_arg+0x1d4>
80004b8e:	f4 cb ff f8 	sub	r11,r10,-8
80004b92:	8d 0b       	st.w	r6[0x0],r11
80004b94:	f4 ea 00 00 	ld.d	r10,r10[0]
80004b98:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80004b9c:	0e 9b       	mov	r11,r7
80004b9e:	18 95       	mov	r5,r12
80004ba0:	c4 c8       	rjmp	80004c38 <get_arg+0x270>
80004ba2:	62 0a       	ld.w	r10,r1[0x0]
80004ba4:	5b fa       	cp.w	r10,-1
80004ba6:	c0 a1       	brne	80004bba <get_arg+0x1f2>
80004ba8:	50 19       	stdsp	sp[0x4],r9
80004baa:	50 28       	stdsp	sp[0x8],r8
80004bac:	e0 6a 00 80 	mov	r10,128
80004bb0:	30 0b       	mov	r11,0
80004bb2:	02 9c       	mov	r12,r1
80004bb4:	c4 0e       	rcall	80004834 <memset>
80004bb6:	40 28       	lddsp	r8,sp[0x8]
80004bb8:	40 19       	lddsp	r9,sp[0x4]
80004bba:	e4 cc 00 01 	sub	r12,r2,1
80004bbe:	0e 9b       	mov	r11,r7
80004bc0:	50 3c       	stdsp	sp[0xc],r12
80004bc2:	f2 0c 0c 49 	max	r9,r9,r12
80004bc6:	c3 98       	rjmp	80004c38 <get_arg+0x270>
80004bc8:	62 0a       	ld.w	r10,r1[0x0]
80004bca:	5b fa       	cp.w	r10,-1
80004bcc:	c0 a1       	brne	80004be0 <get_arg+0x218>
80004bce:	50 19       	stdsp	sp[0x4],r9
80004bd0:	50 28       	stdsp	sp[0x8],r8
80004bd2:	e0 6a 00 80 	mov	r10,128
80004bd6:	30 0b       	mov	r11,0
80004bd8:	02 9c       	mov	r12,r1
80004bda:	c2 de       	rcall	80004834 <memset>
80004bdc:	40 28       	lddsp	r8,sp[0x8]
80004bde:	40 19       	lddsp	r9,sp[0x4]
80004be0:	20 12       	sub	r2,1
80004be2:	30 0a       	mov	r10,0
80004be4:	0e 9b       	mov	r11,r7
80004be6:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80004bea:	f2 02 0c 49 	max	r9,r9,r2
80004bee:	c2 58       	rjmp	80004c38 <get_arg+0x270>
80004bf0:	16 97       	mov	r7,r11
80004bf2:	6c 0a       	ld.w	r10,r6[0x0]
80004bf4:	f4 cb ff fc 	sub	r11,r10,-4
80004bf8:	8d 0b       	st.w	r6[0x0],r11
80004bfa:	74 0a       	ld.w	r10,r10[0x0]
80004bfc:	0e 9b       	mov	r11,r7
80004bfe:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004c02:	2f f5       	sub	r5,-1
80004c04:	c1 a8       	rjmp	80004c38 <get_arg+0x270>
80004c06:	f4 c2 00 30 	sub	r2,r10,48
80004c0a:	c0 68       	rjmp	80004c16 <get_arg+0x24e>
80004c0c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004c10:	2f f7       	sub	r7,-1
80004c12:	f4 02 00 12 	add	r2,r10,r2<<0x1
80004c16:	0f 8a       	ld.ub	r10,r7[0x0]
80004c18:	58 0a       	cp.w	r10,0
80004c1a:	c0 e0       	breq	80004c36 <get_arg+0x26e>
80004c1c:	23 0a       	sub	r10,48
80004c1e:	58 9a       	cp.w	r10,9
80004c20:	fe 98 ff f6 	brls	80004c0c <get_arg+0x244>
80004c24:	c0 98       	rjmp	80004c36 <get_arg+0x26e>
80004c26:	2f f7       	sub	r7,-1
80004c28:	0f 8a       	ld.ub	r10,r7[0x0]
80004c2a:	58 0a       	cp.w	r10,0
80004c2c:	c0 50       	breq	80004c36 <get_arg+0x26e>
80004c2e:	23 0a       	sub	r10,48
80004c30:	58 9a       	cp.w	r10,9
80004c32:	fe 98 ff fa 	brls	80004c26 <get_arg+0x25e>
80004c36:	0e 9b       	mov	r11,r7
80004c38:	40 7c       	lddsp	r12,sp[0x1c]
80004c3a:	30 ba       	mov	r10,11
80004c3c:	f4 0c 18 00 	cp.b	r12,r10
80004c40:	fe 91 fe ee 	brne	80004a1c <get_arg+0x54>
80004c44:	40 42       	lddsp	r2,sp[0x10]
80004c46:	17 8c       	ld.ub	r12,r11[0x0]
80004c48:	0a 32       	cp.w	r2,r5
80004c4a:	5f 4a       	srge	r10
80004c4c:	f0 0c 18 00 	cp.b	r12,r8
80004c50:	5f 1c       	srne	r12
80004c52:	f9 ea 00 0a 	and	r10,r12,r10
80004c56:	f0 0a 18 00 	cp.b	r10,r8
80004c5a:	fe 91 fe cb 	brne	800049f0 <get_arg+0x28>
80004c5e:	30 08       	mov	r8,0
80004c60:	40 4e       	lddsp	lr,sp[0x10]
80004c62:	17 8a       	ld.ub	r10,r11[0x0]
80004c64:	e2 05 00 21 	add	r1,r1,r5<<0x2
80004c68:	f0 0a 18 00 	cp.b	r10,r8
80004c6c:	fc 09 17 10 	movne	r9,lr
80004c70:	e6 05 00 38 	add	r8,r3,r5<<0x3
80004c74:	06 9e       	mov	lr,r3
80004c76:	c2 a8       	rjmp	80004cca <get_arg+0x302>
80004c78:	62 0a       	ld.w	r10,r1[0x0]
80004c7a:	58 3a       	cp.w	r10,3
80004c7c:	c1 e0       	breq	80004cb8 <get_arg+0x2f0>
80004c7e:	e0 89 00 07 	brgt	80004c8c <get_arg+0x2c4>
80004c82:	58 1a       	cp.w	r10,1
80004c84:	c1 a0       	breq	80004cb8 <get_arg+0x2f0>
80004c86:	58 2a       	cp.w	r10,2
80004c88:	c1 81       	brne	80004cb8 <get_arg+0x2f0>
80004c8a:	c0 58       	rjmp	80004c94 <get_arg+0x2cc>
80004c8c:	58 5a       	cp.w	r10,5
80004c8e:	c0 c0       	breq	80004ca6 <get_arg+0x2de>
80004c90:	c0 b5       	brlt	80004ca6 <get_arg+0x2de>
80004c92:	c1 38       	rjmp	80004cb8 <get_arg+0x2f0>
80004c94:	6c 0a       	ld.w	r10,r6[0x0]
80004c96:	f4 cc ff f8 	sub	r12,r10,-8
80004c9a:	8d 0c       	st.w	r6[0x0],r12
80004c9c:	f4 e2 00 00 	ld.d	r2,r10[0]
80004ca0:	f0 e3 00 00 	st.d	r8[0],r2
80004ca4:	c1 08       	rjmp	80004cc4 <get_arg+0x2fc>
80004ca6:	6c 0a       	ld.w	r10,r6[0x0]
80004ca8:	f4 cc ff f8 	sub	r12,r10,-8
80004cac:	8d 0c       	st.w	r6[0x0],r12
80004cae:	f4 e2 00 00 	ld.d	r2,r10[0]
80004cb2:	f0 e3 00 00 	st.d	r8[0],r2
80004cb6:	c0 78       	rjmp	80004cc4 <get_arg+0x2fc>
80004cb8:	6c 0a       	ld.w	r10,r6[0x0]
80004cba:	f4 cc ff fc 	sub	r12,r10,-4
80004cbe:	8d 0c       	st.w	r6[0x0],r12
80004cc0:	74 0a       	ld.w	r10,r10[0x0]
80004cc2:	91 0a       	st.w	r8[0x0],r10
80004cc4:	2f f5       	sub	r5,-1
80004cc6:	2f 88       	sub	r8,-8
80004cc8:	2f c1       	sub	r1,-4
80004cca:	12 35       	cp.w	r5,r9
80004ccc:	fe 9a ff d6 	brle	80004c78 <get_arg+0x2b0>
80004cd0:	1c 93       	mov	r3,lr
80004cd2:	40 52       	lddsp	r2,sp[0x14]
80004cd4:	40 6e       	lddsp	lr,sp[0x18]
80004cd6:	85 05       	st.w	r2[0x0],r5
80004cd8:	9d 0b       	st.w	lr[0x0],r11
80004cda:	40 4b       	lddsp	r11,sp[0x10]
80004cdc:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004ce0:	2f 8d       	sub	sp,-32
80004ce2:	d8 32       	popm	r0-r7,pc

80004ce4 <__sprint_r>:
80004ce4:	d4 21       	pushm	r4-r7,lr
80004ce6:	14 97       	mov	r7,r10
80004ce8:	74 28       	ld.w	r8,r10[0x8]
80004cea:	58 08       	cp.w	r8,0
80004cec:	c0 41       	brne	80004cf4 <__sprint_r+0x10>
80004cee:	95 18       	st.w	r10[0x4],r8
80004cf0:	10 9c       	mov	r12,r8
80004cf2:	d8 22       	popm	r4-r7,pc
80004cf4:	e0 a0 23 a6 	rcall	80009440 <__sfvwrite_r>
80004cf8:	30 08       	mov	r8,0
80004cfa:	8f 18       	st.w	r7[0x4],r8
80004cfc:	8f 28       	st.w	r7[0x8],r8
80004cfe:	d8 22       	popm	r4-r7,pc

80004d00 <_vfprintf_r>:
80004d00:	d4 31       	pushm	r0-r7,lr
80004d02:	fa cd 06 bc 	sub	sp,sp,1724
80004d06:	51 09       	stdsp	sp[0x40],r9
80004d08:	16 91       	mov	r1,r11
80004d0a:	14 97       	mov	r7,r10
80004d0c:	18 95       	mov	r5,r12
80004d0e:	e0 a0 25 45 	rcall	80009798 <_localeconv_r>
80004d12:	78 0c       	ld.w	r12,r12[0x0]
80004d14:	50 cc       	stdsp	sp[0x30],r12
80004d16:	58 05       	cp.w	r5,0
80004d18:	c0 70       	breq	80004d26 <_vfprintf_r+0x26>
80004d1a:	6a 68       	ld.w	r8,r5[0x18]
80004d1c:	58 08       	cp.w	r8,0
80004d1e:	c0 41       	brne	80004d26 <_vfprintf_r+0x26>
80004d20:	0a 9c       	mov	r12,r5
80004d22:	e0 a0 21 d5 	rcall	800090cc <__sinit>
80004d26:	4d 08       	lddpc	r8,80004e64 <_vfprintf_r+0x164>
80004d28:	10 31       	cp.w	r1,r8
80004d2a:	c0 31       	brne	80004d30 <_vfprintf_r+0x30>
80004d2c:	6a 01       	ld.w	r1,r5[0x0]
80004d2e:	c0 a8       	rjmp	80004d42 <_vfprintf_r+0x42>
80004d30:	4c e8       	lddpc	r8,80004e68 <_vfprintf_r+0x168>
80004d32:	10 31       	cp.w	r1,r8
80004d34:	c0 31       	brne	80004d3a <_vfprintf_r+0x3a>
80004d36:	6a 11       	ld.w	r1,r5[0x4]
80004d38:	c0 58       	rjmp	80004d42 <_vfprintf_r+0x42>
80004d3a:	4c d8       	lddpc	r8,80004e6c <_vfprintf_r+0x16c>
80004d3c:	10 31       	cp.w	r1,r8
80004d3e:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80004d42:	82 68       	ld.sh	r8,r1[0xc]
80004d44:	ed b8 00 03 	bld	r8,0x3
80004d48:	c0 41       	brne	80004d50 <_vfprintf_r+0x50>
80004d4a:	62 48       	ld.w	r8,r1[0x10]
80004d4c:	58 08       	cp.w	r8,0
80004d4e:	c0 71       	brne	80004d5c <_vfprintf_r+0x5c>
80004d50:	02 9b       	mov	r11,r1
80004d52:	0a 9c       	mov	r12,r5
80004d54:	e0 a0 19 e6 	rcall	80008120 <__swsetup_r>
80004d58:	e0 81 0f 61 	brne	80006c1a <_vfprintf_r+0x1f1a>
80004d5c:	82 68       	ld.sh	r8,r1[0xc]
80004d5e:	10 99       	mov	r9,r8
80004d60:	e2 19 00 1a 	andl	r9,0x1a,COH
80004d64:	58 a9       	cp.w	r9,10
80004d66:	c3 c1       	brne	80004dde <_vfprintf_r+0xde>
80004d68:	82 79       	ld.sh	r9,r1[0xe]
80004d6a:	30 0a       	mov	r10,0
80004d6c:	f4 09 19 00 	cp.h	r9,r10
80004d70:	c3 75       	brlt	80004dde <_vfprintf_r+0xde>
80004d72:	a1 d8       	cbr	r8,0x1
80004d74:	fb 58 05 d0 	st.h	sp[1488],r8
80004d78:	62 88       	ld.w	r8,r1[0x20]
80004d7a:	fb 48 05 e4 	st.w	sp[1508],r8
80004d7e:	62 a8       	ld.w	r8,r1[0x28]
80004d80:	fb 48 05 ec 	st.w	sp[1516],r8
80004d84:	fa c8 ff bc 	sub	r8,sp,-68
80004d88:	fb 48 05 d4 	st.w	sp[1492],r8
80004d8c:	fb 48 05 c4 	st.w	sp[1476],r8
80004d90:	e0 68 04 00 	mov	r8,1024
80004d94:	fb 48 05 d8 	st.w	sp[1496],r8
80004d98:	fb 48 05 cc 	st.w	sp[1484],r8
80004d9c:	30 08       	mov	r8,0
80004d9e:	fb 59 05 d2 	st.h	sp[1490],r9
80004da2:	0e 9a       	mov	r10,r7
80004da4:	41 09       	lddsp	r9,sp[0x40]
80004da6:	fa c7 fa 3c 	sub	r7,sp,-1476
80004daa:	fb 48 05 dc 	st.w	sp[1500],r8
80004dae:	0a 9c       	mov	r12,r5
80004db0:	0e 9b       	mov	r11,r7
80004db2:	ca 7f       	rcall	80004d00 <_vfprintf_r>
80004db4:	50 bc       	stdsp	sp[0x2c],r12
80004db6:	c0 95       	brlt	80004dc8 <_vfprintf_r+0xc8>
80004db8:	0e 9b       	mov	r11,r7
80004dba:	0a 9c       	mov	r12,r5
80004dbc:	e0 a0 20 9e 	rcall	80008ef8 <_fflush_r>
80004dc0:	40 be       	lddsp	lr,sp[0x2c]
80004dc2:	f9 be 01 ff 	movne	lr,-1
80004dc6:	50 be       	stdsp	sp[0x2c],lr
80004dc8:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004dcc:	ed b8 00 06 	bld	r8,0x6
80004dd0:	e0 81 0f 27 	brne	80006c1e <_vfprintf_r+0x1f1e>
80004dd4:	82 68       	ld.sh	r8,r1[0xc]
80004dd6:	a7 a8       	sbr	r8,0x6
80004dd8:	a2 68       	st.h	r1[0xc],r8
80004dda:	e0 8f 0f 22 	bral	80006c1e <_vfprintf_r+0x1f1e>
80004dde:	30 08       	mov	r8,0
80004de0:	fb 48 06 b4 	st.w	sp[1716],r8
80004de4:	fb 48 06 90 	st.w	sp[1680],r8
80004de8:	fb 48 06 8c 	st.w	sp[1676],r8
80004dec:	fb 48 06 b0 	st.w	sp[1712],r8
80004df0:	30 08       	mov	r8,0
80004df2:	30 09       	mov	r9,0
80004df4:	50 a7       	stdsp	sp[0x28],r7
80004df6:	50 78       	stdsp	sp[0x1c],r8
80004df8:	fa c3 f9 e0 	sub	r3,sp,-1568
80004dfc:	3f f8       	mov	r8,-1
80004dfe:	50 59       	stdsp	sp[0x14],r9
80004e00:	fb 43 06 88 	st.w	sp[1672],r3
80004e04:	fb 48 05 44 	st.w	sp[1348],r8
80004e08:	12 9c       	mov	r12,r9
80004e0a:	50 69       	stdsp	sp[0x18],r9
80004e0c:	50 d9       	stdsp	sp[0x34],r9
80004e0e:	50 e9       	stdsp	sp[0x38],r9
80004e10:	50 b9       	stdsp	sp[0x2c],r9
80004e12:	12 97       	mov	r7,r9
80004e14:	0a 94       	mov	r4,r5
80004e16:	40 a2       	lddsp	r2,sp[0x28]
80004e18:	32 5a       	mov	r10,37
80004e1a:	30 08       	mov	r8,0
80004e1c:	c0 28       	rjmp	80004e20 <_vfprintf_r+0x120>
80004e1e:	2f f2       	sub	r2,-1
80004e20:	05 89       	ld.ub	r9,r2[0x0]
80004e22:	f0 09 18 00 	cp.b	r9,r8
80004e26:	5f 1b       	srne	r11
80004e28:	f4 09 18 00 	cp.b	r9,r10
80004e2c:	5f 19       	srne	r9
80004e2e:	f3 eb 00 0b 	and	r11,r9,r11
80004e32:	f0 0b 18 00 	cp.b	r11,r8
80004e36:	cf 41       	brne	80004e1e <_vfprintf_r+0x11e>
80004e38:	40 ab       	lddsp	r11,sp[0x28]
80004e3a:	e4 0b 01 06 	sub	r6,r2,r11
80004e3e:	c2 50       	breq	80004e88 <_vfprintf_r+0x188>
80004e40:	fa f8 06 90 	ld.w	r8,sp[1680]
80004e44:	0c 08       	add	r8,r6
80004e46:	87 0b       	st.w	r3[0x0],r11
80004e48:	fb 48 06 90 	st.w	sp[1680],r8
80004e4c:	87 16       	st.w	r3[0x4],r6
80004e4e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004e52:	2f f8       	sub	r8,-1
80004e54:	fb 48 06 8c 	st.w	sp[1676],r8
80004e58:	58 78       	cp.w	r8,7
80004e5a:	e0 89 00 0b 	brgt	80004e70 <_vfprintf_r+0x170>
80004e5e:	2f 83       	sub	r3,-8
80004e60:	c1 18       	rjmp	80004e82 <_vfprintf_r+0x182>
80004e62:	d7 03       	nop
80004e64:	80 00       	ld.sh	r0,r0[0x0]
80004e66:	de c4       	*unknown*
80004e68:	80 00       	ld.sh	r0,r0[0x0]
80004e6a:	de e4       	*unknown*
80004e6c:	80 00       	ld.sh	r0,r0[0x0]
80004e6e:	df 04       	*unknown*
80004e70:	fa ca f9 78 	sub	r10,sp,-1672
80004e74:	02 9b       	mov	r11,r1
80004e76:	08 9c       	mov	r12,r4
80004e78:	c3 6f       	rcall	80004ce4 <__sprint_r>
80004e7a:	e0 81 0e cc 	brne	80006c12 <_vfprintf_r+0x1f12>
80004e7e:	fa c3 f9 e0 	sub	r3,sp,-1568
80004e82:	40 ba       	lddsp	r10,sp[0x2c]
80004e84:	0c 0a       	add	r10,r6
80004e86:	50 ba       	stdsp	sp[0x2c],r10
80004e88:	05 89       	ld.ub	r9,r2[0x0]
80004e8a:	30 08       	mov	r8,0
80004e8c:	f0 09 18 00 	cp.b	r9,r8
80004e90:	e0 80 0e b0 	breq	80006bf0 <_vfprintf_r+0x1ef0>
80004e94:	30 09       	mov	r9,0
80004e96:	fb 68 06 bb 	st.b	sp[1723],r8
80004e9a:	0e 96       	mov	r6,r7
80004e9c:	e4 c8 ff ff 	sub	r8,r2,-1
80004ea0:	3f fe       	mov	lr,-1
80004ea2:	50 93       	stdsp	sp[0x24],r3
80004ea4:	50 41       	stdsp	sp[0x10],r1
80004ea6:	0e 93       	mov	r3,r7
80004ea8:	04 91       	mov	r1,r2
80004eaa:	50 89       	stdsp	sp[0x20],r9
80004eac:	50 a8       	stdsp	sp[0x28],r8
80004eae:	50 2e       	stdsp	sp[0x8],lr
80004eb0:	50 39       	stdsp	sp[0xc],r9
80004eb2:	12 95       	mov	r5,r9
80004eb4:	12 90       	mov	r0,r9
80004eb6:	10 97       	mov	r7,r8
80004eb8:	08 92       	mov	r2,r4
80004eba:	c0 78       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
80004ebc:	3f fc       	mov	r12,-1
80004ebe:	08 97       	mov	r7,r4
80004ec0:	50 2c       	stdsp	sp[0x8],r12
80004ec2:	c0 38       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
80004ec4:	30 0b       	mov	r11,0
80004ec6:	50 3b       	stdsp	sp[0xc],r11
80004ec8:	0f 38       	ld.ub	r8,r7++
80004eca:	c0 28       	rjmp	80004ece <_vfprintf_r+0x1ce>
80004ecc:	12 90       	mov	r0,r9
80004ece:	f0 c9 00 20 	sub	r9,r8,32
80004ed2:	e0 49 00 58 	cp.w	r9,88
80004ed6:	e0 8b 0a 36 	brhi	80006342 <_vfprintf_r+0x1642>
80004eda:	4d 9a       	lddpc	r10,8000503c <_vfprintf_r+0x33c>
80004edc:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80004ee0:	50 a7       	stdsp	sp[0x28],r7
80004ee2:	50 80       	stdsp	sp[0x20],r0
80004ee4:	0c 97       	mov	r7,r6
80004ee6:	04 94       	mov	r4,r2
80004ee8:	06 96       	mov	r6,r3
80004eea:	02 92       	mov	r2,r1
80004eec:	4d 59       	lddpc	r9,80005040 <_vfprintf_r+0x340>
80004eee:	40 93       	lddsp	r3,sp[0x24]
80004ef0:	10 90       	mov	r0,r8
80004ef2:	40 41       	lddsp	r1,sp[0x10]
80004ef4:	50 d9       	stdsp	sp[0x34],r9
80004ef6:	e0 8f 08 96 	bral	80006022 <_vfprintf_r+0x1322>
80004efa:	30 08       	mov	r8,0
80004efc:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80004f00:	f0 09 18 00 	cp.b	r9,r8
80004f04:	ce 21       	brne	80004ec8 <_vfprintf_r+0x1c8>
80004f06:	32 08       	mov	r8,32
80004f08:	c6 e8       	rjmp	80004fe4 <_vfprintf_r+0x2e4>
80004f0a:	a1 a5       	sbr	r5,0x0
80004f0c:	cd eb       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
80004f0e:	0f 89       	ld.ub	r9,r7[0x0]
80004f10:	f2 c8 00 30 	sub	r8,r9,48
80004f14:	58 98       	cp.w	r8,9
80004f16:	e0 8b 00 1d 	brhi	80004f50 <_vfprintf_r+0x250>
80004f1a:	ee c8 ff ff 	sub	r8,r7,-1
80004f1e:	30 0b       	mov	r11,0
80004f20:	23 09       	sub	r9,48
80004f22:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004f26:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004f2a:	11 39       	ld.ub	r9,r8++
80004f2c:	f2 ca 00 30 	sub	r10,r9,48
80004f30:	58 9a       	cp.w	r10,9
80004f32:	fe 98 ff f7 	brls	80004f20 <_vfprintf_r+0x220>
80004f36:	e0 49 00 24 	cp.w	r9,36
80004f3a:	cc 51       	brne	80004ec4 <_vfprintf_r+0x1c4>
80004f3c:	e0 4b 00 20 	cp.w	r11,32
80004f40:	e0 89 0e 68 	brgt	80006c10 <_vfprintf_r+0x1f10>
80004f44:	20 1b       	sub	r11,1
80004f46:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004f4a:	12 3b       	cp.w	r11,r9
80004f4c:	c0 95       	brlt	80004f5e <_vfprintf_r+0x25e>
80004f4e:	c1 08       	rjmp	80004f6e <_vfprintf_r+0x26e>
80004f50:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004f54:	ec ca ff ff 	sub	r10,r6,-1
80004f58:	12 36       	cp.w	r6,r9
80004f5a:	c1 f5       	brlt	80004f98 <_vfprintf_r+0x298>
80004f5c:	c2 68       	rjmp	80004fa8 <_vfprintf_r+0x2a8>
80004f5e:	fa ce f9 44 	sub	lr,sp,-1724
80004f62:	10 97       	mov	r7,r8
80004f64:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80004f68:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80004f6c:	c3 58       	rjmp	80004fd6 <_vfprintf_r+0x2d6>
80004f6e:	10 97       	mov	r7,r8
80004f70:	fa c8 f9 50 	sub	r8,sp,-1712
80004f74:	1a d8       	st.w	--sp,r8
80004f76:	fa c8 fa b8 	sub	r8,sp,-1352
80004f7a:	1a d8       	st.w	--sp,r8
80004f7c:	fa c8 fb b4 	sub	r8,sp,-1100
80004f80:	02 9a       	mov	r10,r1
80004f82:	1a d8       	st.w	--sp,r8
80004f84:	04 9c       	mov	r12,r2
80004f86:	fa c8 f9 40 	sub	r8,sp,-1728
80004f8a:	fa c9 ff b4 	sub	r9,sp,-76
80004f8e:	fe b0 fd 1d 	rcall	800049c8 <get_arg>
80004f92:	2f dd       	sub	sp,-12
80004f94:	78 00       	ld.w	r0,r12[0x0]
80004f96:	c2 08       	rjmp	80004fd6 <_vfprintf_r+0x2d6>
80004f98:	fa cc f9 44 	sub	r12,sp,-1724
80004f9c:	14 96       	mov	r6,r10
80004f9e:	f8 03 00 38 	add	r8,r12,r3<<0x3
80004fa2:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80004fa6:	c1 88       	rjmp	80004fd6 <_vfprintf_r+0x2d6>
80004fa8:	41 08       	lddsp	r8,sp[0x40]
80004faa:	59 f9       	cp.w	r9,31
80004fac:	e0 89 00 11 	brgt	80004fce <_vfprintf_r+0x2ce>
80004fb0:	f0 cb ff fc 	sub	r11,r8,-4
80004fb4:	51 0b       	stdsp	sp[0x40],r11
80004fb6:	70 00       	ld.w	r0,r8[0x0]
80004fb8:	fa cb f9 44 	sub	r11,sp,-1724
80004fbc:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004fc0:	f1 40 fd 88 	st.w	r8[-632],r0
80004fc4:	2f f9       	sub	r9,-1
80004fc6:	14 96       	mov	r6,r10
80004fc8:	fb 49 06 b4 	st.w	sp[1716],r9
80004fcc:	c0 58       	rjmp	80004fd6 <_vfprintf_r+0x2d6>
80004fce:	70 00       	ld.w	r0,r8[0x0]
80004fd0:	14 96       	mov	r6,r10
80004fd2:	2f c8       	sub	r8,-4
80004fd4:	51 08       	stdsp	sp[0x40],r8
80004fd6:	58 00       	cp.w	r0,0
80004fd8:	fe 94 ff 78 	brge	80004ec8 <_vfprintf_r+0x1c8>
80004fdc:	5c 30       	neg	r0
80004fde:	a3 a5       	sbr	r5,0x2
80004fe0:	c7 4b       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
80004fe2:	32 b8       	mov	r8,43
80004fe4:	fb 68 06 bb 	st.b	sp[1723],r8
80004fe8:	c7 0b       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
80004fea:	0f 38       	ld.ub	r8,r7++
80004fec:	e0 48 00 2a 	cp.w	r8,42
80004ff0:	c0 30       	breq	80004ff6 <_vfprintf_r+0x2f6>
80004ff2:	30 09       	mov	r9,0
80004ff4:	c7 d8       	rjmp	800050ee <_vfprintf_r+0x3ee>
80004ff6:	0f 88       	ld.ub	r8,r7[0x0]
80004ff8:	f0 c9 00 30 	sub	r9,r8,48
80004ffc:	58 99       	cp.w	r9,9
80004ffe:	e0 8b 00 23 	brhi	80005044 <_vfprintf_r+0x344>
80005002:	ee c4 ff ff 	sub	r4,r7,-1
80005006:	30 0b       	mov	r11,0
80005008:	23 08       	sub	r8,48
8000500a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000500e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80005012:	09 38       	ld.ub	r8,r4++
80005014:	f0 c9 00 30 	sub	r9,r8,48
80005018:	58 99       	cp.w	r9,9
8000501a:	fe 98 ff f7 	brls	80005008 <_vfprintf_r+0x308>
8000501e:	e0 48 00 24 	cp.w	r8,36
80005022:	fe 91 ff 51 	brne	80004ec4 <_vfprintf_r+0x1c4>
80005026:	e0 4b 00 20 	cp.w	r11,32
8000502a:	e0 89 0d f3 	brgt	80006c10 <_vfprintf_r+0x1f10>
8000502e:	20 1b       	sub	r11,1
80005030:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005034:	10 3b       	cp.w	r11,r8
80005036:	c0 e5       	brlt	80005052 <_vfprintf_r+0x352>
80005038:	c1 58       	rjmp	80005062 <_vfprintf_r+0x362>
8000503a:	d7 03       	nop
8000503c:	80 00       	ld.sh	r0,r0[0x0]
8000503e:	d9 ec       	*unknown*
80005040:	80 00       	ld.sh	r0,r0[0x0]
80005042:	dc 28       	*unknown*
80005044:	fa fa 06 b4 	ld.w	r10,sp[1716]
80005048:	ec c9 ff ff 	sub	r9,r6,-1
8000504c:	14 36       	cp.w	r6,r10
8000504e:	c1 f5       	brlt	8000508c <_vfprintf_r+0x38c>
80005050:	c2 88       	rjmp	800050a0 <_vfprintf_r+0x3a0>
80005052:	fa ca f9 44 	sub	r10,sp,-1724
80005056:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000505a:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000505e:	50 2b       	stdsp	sp[0x8],r11
80005060:	c3 c8       	rjmp	800050d8 <_vfprintf_r+0x3d8>
80005062:	fa c8 f9 50 	sub	r8,sp,-1712
80005066:	1a d8       	st.w	--sp,r8
80005068:	fa c8 fa b8 	sub	r8,sp,-1352
8000506c:	1a d8       	st.w	--sp,r8
8000506e:	fa c8 fb b4 	sub	r8,sp,-1100
80005072:	02 9a       	mov	r10,r1
80005074:	1a d8       	st.w	--sp,r8
80005076:	04 9c       	mov	r12,r2
80005078:	fa c8 f9 40 	sub	r8,sp,-1728
8000507c:	fa c9 ff b4 	sub	r9,sp,-76
80005080:	fe b0 fc a4 	rcall	800049c8 <get_arg>
80005084:	2f dd       	sub	sp,-12
80005086:	78 0c       	ld.w	r12,r12[0x0]
80005088:	50 2c       	stdsp	sp[0x8],r12
8000508a:	c2 78       	rjmp	800050d8 <_vfprintf_r+0x3d8>
8000508c:	12 96       	mov	r6,r9
8000508e:	0e 94       	mov	r4,r7
80005090:	fa c9 f9 44 	sub	r9,sp,-1724
80005094:	f2 03 00 38 	add	r8,r9,r3<<0x3
80005098:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000509c:	50 28       	stdsp	sp[0x8],r8
8000509e:	c1 d8       	rjmp	800050d8 <_vfprintf_r+0x3d8>
800050a0:	41 08       	lddsp	r8,sp[0x40]
800050a2:	59 fa       	cp.w	r10,31
800050a4:	e0 89 00 14 	brgt	800050cc <_vfprintf_r+0x3cc>
800050a8:	f0 cb ff fc 	sub	r11,r8,-4
800050ac:	70 08       	ld.w	r8,r8[0x0]
800050ae:	51 0b       	stdsp	sp[0x40],r11
800050b0:	50 28       	stdsp	sp[0x8],r8
800050b2:	fa c6 f9 44 	sub	r6,sp,-1724
800050b6:	40 2e       	lddsp	lr,sp[0x8]
800050b8:	ec 0a 00 38 	add	r8,r6,r10<<0x3
800050bc:	f1 4e fd 88 	st.w	r8[-632],lr
800050c0:	2f fa       	sub	r10,-1
800050c2:	0e 94       	mov	r4,r7
800050c4:	fb 4a 06 b4 	st.w	sp[1716],r10
800050c8:	12 96       	mov	r6,r9
800050ca:	c0 78       	rjmp	800050d8 <_vfprintf_r+0x3d8>
800050cc:	70 0c       	ld.w	r12,r8[0x0]
800050ce:	0e 94       	mov	r4,r7
800050d0:	2f c8       	sub	r8,-4
800050d2:	50 2c       	stdsp	sp[0x8],r12
800050d4:	12 96       	mov	r6,r9
800050d6:	51 08       	stdsp	sp[0x40],r8
800050d8:	40 2b       	lddsp	r11,sp[0x8]
800050da:	58 0b       	cp.w	r11,0
800050dc:	fe 95 fe f0 	brlt	80004ebc <_vfprintf_r+0x1bc>
800050e0:	08 97       	mov	r7,r4
800050e2:	cf 3a       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
800050e4:	f2 09 00 29 	add	r9,r9,r9<<0x2
800050e8:	0f 38       	ld.ub	r8,r7++
800050ea:	f4 09 00 19 	add	r9,r10,r9<<0x1
800050ee:	f0 ca 00 30 	sub	r10,r8,48
800050f2:	58 9a       	cp.w	r10,9
800050f4:	fe 98 ff f8 	brls	800050e4 <_vfprintf_r+0x3e4>
800050f8:	3f fa       	mov	r10,-1
800050fa:	f2 0a 0c 49 	max	r9,r9,r10
800050fe:	50 29       	stdsp	sp[0x8],r9
80005100:	ce 7a       	rjmp	80004ece <_vfprintf_r+0x1ce>
80005102:	a7 b5       	sbr	r5,0x7
80005104:	ce 2a       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
80005106:	30 09       	mov	r9,0
80005108:	23 08       	sub	r8,48
8000510a:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000510e:	f0 09 00 19 	add	r9,r8,r9<<0x1
80005112:	0f 38       	ld.ub	r8,r7++
80005114:	f0 ca 00 30 	sub	r10,r8,48
80005118:	58 9a       	cp.w	r10,9
8000511a:	fe 98 ff f7 	brls	80005108 <_vfprintf_r+0x408>
8000511e:	e0 48 00 24 	cp.w	r8,36
80005122:	fe 91 fe d5 	brne	80004ecc <_vfprintf_r+0x1cc>
80005126:	e0 49 00 20 	cp.w	r9,32
8000512a:	e0 89 0d 73 	brgt	80006c10 <_vfprintf_r+0x1f10>
8000512e:	f2 c3 00 01 	sub	r3,r9,1
80005132:	30 19       	mov	r9,1
80005134:	50 39       	stdsp	sp[0xc],r9
80005136:	cc 9a       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
80005138:	a3 b5       	sbr	r5,0x3
8000513a:	cc 7a       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
8000513c:	a7 a5       	sbr	r5,0x6
8000513e:	cc 5a       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
80005140:	0a 98       	mov	r8,r5
80005142:	a5 b5       	sbr	r5,0x5
80005144:	a5 a8       	sbr	r8,0x4
80005146:	0f 89       	ld.ub	r9,r7[0x0]
80005148:	36 ce       	mov	lr,108
8000514a:	fc 09 18 00 	cp.b	r9,lr
8000514e:	f7 b7 00 ff 	subeq	r7,-1
80005152:	f0 05 17 10 	movne	r5,r8
80005156:	cb 9a       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
80005158:	a5 b5       	sbr	r5,0x5
8000515a:	cb 7a       	rjmp	80004ec8 <_vfprintf_r+0x1c8>
8000515c:	50 a7       	stdsp	sp[0x28],r7
8000515e:	50 80       	stdsp	sp[0x20],r0
80005160:	0c 97       	mov	r7,r6
80005162:	10 90       	mov	r0,r8
80005164:	06 96       	mov	r6,r3
80005166:	04 94       	mov	r4,r2
80005168:	40 93       	lddsp	r3,sp[0x24]
8000516a:	02 92       	mov	r2,r1
8000516c:	0e 99       	mov	r9,r7
8000516e:	40 41       	lddsp	r1,sp[0x10]
80005170:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005174:	40 3c       	lddsp	r12,sp[0xc]
80005176:	58 0c       	cp.w	r12,0
80005178:	c1 d0       	breq	800051b2 <_vfprintf_r+0x4b2>
8000517a:	10 36       	cp.w	r6,r8
8000517c:	c0 64       	brge	80005188 <_vfprintf_r+0x488>
8000517e:	fa cb f9 44 	sub	r11,sp,-1724
80005182:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005186:	c1 d8       	rjmp	800051c0 <_vfprintf_r+0x4c0>
80005188:	fa c8 f9 50 	sub	r8,sp,-1712
8000518c:	1a d8       	st.w	--sp,r8
8000518e:	fa c8 fa b8 	sub	r8,sp,-1352
80005192:	1a d8       	st.w	--sp,r8
80005194:	fa c8 fb b4 	sub	r8,sp,-1100
80005198:	1a d8       	st.w	--sp,r8
8000519a:	fa c8 f9 40 	sub	r8,sp,-1728
8000519e:	fa c9 ff b4 	sub	r9,sp,-76
800051a2:	04 9a       	mov	r10,r2
800051a4:	0c 9b       	mov	r11,r6
800051a6:	08 9c       	mov	r12,r4
800051a8:	fe b0 fc 10 	rcall	800049c8 <get_arg>
800051ac:	2f dd       	sub	sp,-12
800051ae:	19 b8       	ld.ub	r8,r12[0x3]
800051b0:	c2 28       	rjmp	800051f4 <_vfprintf_r+0x4f4>
800051b2:	2f f7       	sub	r7,-1
800051b4:	10 39       	cp.w	r9,r8
800051b6:	c0 84       	brge	800051c6 <_vfprintf_r+0x4c6>
800051b8:	fa ca f9 44 	sub	r10,sp,-1724
800051bc:	f4 06 00 36 	add	r6,r10,r6<<0x3
800051c0:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800051c4:	c1 88       	rjmp	800051f4 <_vfprintf_r+0x4f4>
800051c6:	41 09       	lddsp	r9,sp[0x40]
800051c8:	59 f8       	cp.w	r8,31
800051ca:	e0 89 00 12 	brgt	800051ee <_vfprintf_r+0x4ee>
800051ce:	f2 ca ff fc 	sub	r10,r9,-4
800051d2:	51 0a       	stdsp	sp[0x40],r10
800051d4:	72 09       	ld.w	r9,r9[0x0]
800051d6:	fa c6 f9 44 	sub	r6,sp,-1724
800051da:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800051de:	2f f8       	sub	r8,-1
800051e0:	f5 49 fd 88 	st.w	r10[-632],r9
800051e4:	fb 48 06 b4 	st.w	sp[1716],r8
800051e8:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
800051ec:	c0 48       	rjmp	800051f4 <_vfprintf_r+0x4f4>
800051ee:	13 b8       	ld.ub	r8,r9[0x3]
800051f0:	2f c9       	sub	r9,-4
800051f2:	51 09       	stdsp	sp[0x40],r9
800051f4:	fb 68 06 60 	st.b	sp[1632],r8
800051f8:	30 0e       	mov	lr,0
800051fa:	30 08       	mov	r8,0
800051fc:	30 12       	mov	r2,1
800051fe:	fb 68 06 bb 	st.b	sp[1723],r8
80005202:	50 2e       	stdsp	sp[0x8],lr
80005204:	e0 8f 08 b1 	bral	80006366 <_vfprintf_r+0x1666>
80005208:	50 a7       	stdsp	sp[0x28],r7
8000520a:	50 80       	stdsp	sp[0x20],r0
8000520c:	0c 97       	mov	r7,r6
8000520e:	04 94       	mov	r4,r2
80005210:	06 96       	mov	r6,r3
80005212:	02 92       	mov	r2,r1
80005214:	40 93       	lddsp	r3,sp[0x24]
80005216:	10 90       	mov	r0,r8
80005218:	40 41       	lddsp	r1,sp[0x10]
8000521a:	a5 a5       	sbr	r5,0x4
8000521c:	c0 a8       	rjmp	80005230 <_vfprintf_r+0x530>
8000521e:	50 a7       	stdsp	sp[0x28],r7
80005220:	50 80       	stdsp	sp[0x20],r0
80005222:	0c 97       	mov	r7,r6
80005224:	04 94       	mov	r4,r2
80005226:	06 96       	mov	r6,r3
80005228:	02 92       	mov	r2,r1
8000522a:	40 93       	lddsp	r3,sp[0x24]
8000522c:	10 90       	mov	r0,r8
8000522e:	40 41       	lddsp	r1,sp[0x10]
80005230:	ed b5 00 05 	bld	r5,0x5
80005234:	c5 11       	brne	800052d6 <_vfprintf_r+0x5d6>
80005236:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000523a:	40 3c       	lddsp	r12,sp[0xc]
8000523c:	58 0c       	cp.w	r12,0
8000523e:	c1 e0       	breq	8000527a <_vfprintf_r+0x57a>
80005240:	10 36       	cp.w	r6,r8
80005242:	c0 64       	brge	8000524e <_vfprintf_r+0x54e>
80005244:	fa cb f9 44 	sub	r11,sp,-1724
80005248:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000524c:	c2 08       	rjmp	8000528c <_vfprintf_r+0x58c>
8000524e:	fa c8 f9 50 	sub	r8,sp,-1712
80005252:	1a d8       	st.w	--sp,r8
80005254:	fa c8 fa b8 	sub	r8,sp,-1352
80005258:	0c 9b       	mov	r11,r6
8000525a:	1a d8       	st.w	--sp,r8
8000525c:	fa c8 fb b4 	sub	r8,sp,-1100
80005260:	1a d8       	st.w	--sp,r8
80005262:	fa c9 ff b4 	sub	r9,sp,-76
80005266:	fa c8 f9 40 	sub	r8,sp,-1728
8000526a:	04 9a       	mov	r10,r2
8000526c:	08 9c       	mov	r12,r4
8000526e:	fe b0 fb ad 	rcall	800049c8 <get_arg>
80005272:	2f dd       	sub	sp,-12
80005274:	78 1b       	ld.w	r11,r12[0x4]
80005276:	78 09       	ld.w	r9,r12[0x0]
80005278:	c2 b8       	rjmp	800052ce <_vfprintf_r+0x5ce>
8000527a:	ee ca ff ff 	sub	r10,r7,-1
8000527e:	10 37       	cp.w	r7,r8
80005280:	c0 b4       	brge	80005296 <_vfprintf_r+0x596>
80005282:	fa c9 f9 44 	sub	r9,sp,-1724
80005286:	14 97       	mov	r7,r10
80005288:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000528c:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005290:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005294:	c1 d8       	rjmp	800052ce <_vfprintf_r+0x5ce>
80005296:	41 09       	lddsp	r9,sp[0x40]
80005298:	59 f8       	cp.w	r8,31
8000529a:	e0 89 00 14 	brgt	800052c2 <_vfprintf_r+0x5c2>
8000529e:	f2 cb ff f8 	sub	r11,r9,-8
800052a2:	51 0b       	stdsp	sp[0x40],r11
800052a4:	fa c6 f9 44 	sub	r6,sp,-1724
800052a8:	72 1b       	ld.w	r11,r9[0x4]
800052aa:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800052ae:	72 09       	ld.w	r9,r9[0x0]
800052b0:	f9 4b fd 8c 	st.w	r12[-628],r11
800052b4:	f9 49 fd 88 	st.w	r12[-632],r9
800052b8:	2f f8       	sub	r8,-1
800052ba:	14 97       	mov	r7,r10
800052bc:	fb 48 06 b4 	st.w	sp[1716],r8
800052c0:	c0 78       	rjmp	800052ce <_vfprintf_r+0x5ce>
800052c2:	f2 c8 ff f8 	sub	r8,r9,-8
800052c6:	72 1b       	ld.w	r11,r9[0x4]
800052c8:	14 97       	mov	r7,r10
800052ca:	51 08       	stdsp	sp[0x40],r8
800052cc:	72 09       	ld.w	r9,r9[0x0]
800052ce:	16 98       	mov	r8,r11
800052d0:	fa e9 00 00 	st.d	sp[0],r8
800052d4:	ca e8       	rjmp	80005430 <_vfprintf_r+0x730>
800052d6:	ed b5 00 04 	bld	r5,0x4
800052da:	c1 71       	brne	80005308 <_vfprintf_r+0x608>
800052dc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800052e0:	40 3e       	lddsp	lr,sp[0xc]
800052e2:	58 0e       	cp.w	lr,0
800052e4:	c0 80       	breq	800052f4 <_vfprintf_r+0x5f4>
800052e6:	10 36       	cp.w	r6,r8
800052e8:	c6 94       	brge	800053ba <_vfprintf_r+0x6ba>
800052ea:	fa cc f9 44 	sub	r12,sp,-1724
800052ee:	f8 06 00 36 	add	r6,r12,r6<<0x3
800052f2:	c8 28       	rjmp	800053f6 <_vfprintf_r+0x6f6>
800052f4:	ee ca ff ff 	sub	r10,r7,-1
800052f8:	10 37       	cp.w	r7,r8
800052fa:	e0 84 00 81 	brge	800053fc <_vfprintf_r+0x6fc>
800052fe:	fa cb f9 44 	sub	r11,sp,-1724
80005302:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005306:	c7 78       	rjmp	800053f4 <_vfprintf_r+0x6f4>
80005308:	ed b5 00 06 	bld	r5,0x6
8000530c:	c4 b1       	brne	800053a2 <_vfprintf_r+0x6a2>
8000530e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005312:	40 3c       	lddsp	r12,sp[0xc]
80005314:	58 0c       	cp.w	r12,0
80005316:	c1 d0       	breq	80005350 <_vfprintf_r+0x650>
80005318:	10 36       	cp.w	r6,r8
8000531a:	c0 64       	brge	80005326 <_vfprintf_r+0x626>
8000531c:	fa cb f9 44 	sub	r11,sp,-1724
80005320:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005324:	c1 f8       	rjmp	80005362 <_vfprintf_r+0x662>
80005326:	fa c8 f9 50 	sub	r8,sp,-1712
8000532a:	1a d8       	st.w	--sp,r8
8000532c:	fa c8 fa b8 	sub	r8,sp,-1352
80005330:	1a d8       	st.w	--sp,r8
80005332:	fa c8 fb b4 	sub	r8,sp,-1100
80005336:	1a d8       	st.w	--sp,r8
80005338:	fa c8 f9 40 	sub	r8,sp,-1728
8000533c:	fa c9 ff b4 	sub	r9,sp,-76
80005340:	04 9a       	mov	r10,r2
80005342:	0c 9b       	mov	r11,r6
80005344:	08 9c       	mov	r12,r4
80005346:	fe b0 fb 41 	rcall	800049c8 <get_arg>
8000534a:	2f dd       	sub	sp,-12
8000534c:	98 18       	ld.sh	r8,r12[0x2]
8000534e:	c2 68       	rjmp	8000539a <_vfprintf_r+0x69a>
80005350:	ee ca ff ff 	sub	r10,r7,-1
80005354:	10 37       	cp.w	r7,r8
80005356:	c0 94       	brge	80005368 <_vfprintf_r+0x668>
80005358:	fa c9 f9 44 	sub	r9,sp,-1724
8000535c:	14 97       	mov	r7,r10
8000535e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005362:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005366:	c1 a8       	rjmp	8000539a <_vfprintf_r+0x69a>
80005368:	41 09       	lddsp	r9,sp[0x40]
8000536a:	59 f8       	cp.w	r8,31
8000536c:	e0 89 00 13 	brgt	80005392 <_vfprintf_r+0x692>
80005370:	f2 cb ff fc 	sub	r11,r9,-4
80005374:	51 0b       	stdsp	sp[0x40],r11
80005376:	72 09       	ld.w	r9,r9[0x0]
80005378:	fa c6 f9 44 	sub	r6,sp,-1724
8000537c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005380:	2f f8       	sub	r8,-1
80005382:	f7 49 fd 88 	st.w	r11[-632],r9
80005386:	fb 48 06 b4 	st.w	sp[1716],r8
8000538a:	14 97       	mov	r7,r10
8000538c:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005390:	c0 58       	rjmp	8000539a <_vfprintf_r+0x69a>
80005392:	92 18       	ld.sh	r8,r9[0x2]
80005394:	14 97       	mov	r7,r10
80005396:	2f c9       	sub	r9,-4
80005398:	51 09       	stdsp	sp[0x40],r9
8000539a:	50 18       	stdsp	sp[0x4],r8
8000539c:	bf 58       	asr	r8,0x1f
8000539e:	50 08       	stdsp	sp[0x0],r8
800053a0:	c4 88       	rjmp	80005430 <_vfprintf_r+0x730>
800053a2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800053a6:	40 3c       	lddsp	r12,sp[0xc]
800053a8:	58 0c       	cp.w	r12,0
800053aa:	c1 d0       	breq	800053e4 <_vfprintf_r+0x6e4>
800053ac:	10 36       	cp.w	r6,r8
800053ae:	c0 64       	brge	800053ba <_vfprintf_r+0x6ba>
800053b0:	fa cb f9 44 	sub	r11,sp,-1724
800053b4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053b8:	c1 f8       	rjmp	800053f6 <_vfprintf_r+0x6f6>
800053ba:	fa c8 f9 50 	sub	r8,sp,-1712
800053be:	1a d8       	st.w	--sp,r8
800053c0:	fa c8 fa b8 	sub	r8,sp,-1352
800053c4:	0c 9b       	mov	r11,r6
800053c6:	1a d8       	st.w	--sp,r8
800053c8:	fa c8 fb b4 	sub	r8,sp,-1100
800053cc:	04 9a       	mov	r10,r2
800053ce:	1a d8       	st.w	--sp,r8
800053d0:	08 9c       	mov	r12,r4
800053d2:	fa c8 f9 40 	sub	r8,sp,-1728
800053d6:	fa c9 ff b4 	sub	r9,sp,-76
800053da:	fe b0 fa f7 	rcall	800049c8 <get_arg>
800053de:	2f dd       	sub	sp,-12
800053e0:	78 0b       	ld.w	r11,r12[0x0]
800053e2:	c2 48       	rjmp	8000542a <_vfprintf_r+0x72a>
800053e4:	ee ca ff ff 	sub	r10,r7,-1
800053e8:	10 37       	cp.w	r7,r8
800053ea:	c0 94       	brge	800053fc <_vfprintf_r+0x6fc>
800053ec:	fa c9 f9 44 	sub	r9,sp,-1724
800053f0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800053f4:	14 97       	mov	r7,r10
800053f6:	ec fb fd 88 	ld.w	r11,r6[-632]
800053fa:	c1 88       	rjmp	8000542a <_vfprintf_r+0x72a>
800053fc:	41 09       	lddsp	r9,sp[0x40]
800053fe:	59 f8       	cp.w	r8,31
80005400:	e0 89 00 11 	brgt	80005422 <_vfprintf_r+0x722>
80005404:	f2 cb ff fc 	sub	r11,r9,-4
80005408:	51 0b       	stdsp	sp[0x40],r11
8000540a:	fa c6 f9 44 	sub	r6,sp,-1724
8000540e:	72 0b       	ld.w	r11,r9[0x0]
80005410:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005414:	f3 4b fd 88 	st.w	r9[-632],r11
80005418:	2f f8       	sub	r8,-1
8000541a:	14 97       	mov	r7,r10
8000541c:	fb 48 06 b4 	st.w	sp[1716],r8
80005420:	c0 58       	rjmp	8000542a <_vfprintf_r+0x72a>
80005422:	72 0b       	ld.w	r11,r9[0x0]
80005424:	14 97       	mov	r7,r10
80005426:	2f c9       	sub	r9,-4
80005428:	51 09       	stdsp	sp[0x40],r9
8000542a:	50 1b       	stdsp	sp[0x4],r11
8000542c:	bf 5b       	asr	r11,0x1f
8000542e:	50 0b       	stdsp	sp[0x0],r11
80005430:	fa ea 00 00 	ld.d	r10,sp[0]
80005434:	58 0a       	cp.w	r10,0
80005436:	5c 2b       	cpc	r11
80005438:	c0 e4       	brge	80005454 <_vfprintf_r+0x754>
8000543a:	30 08       	mov	r8,0
8000543c:	fa ea 00 00 	ld.d	r10,sp[0]
80005440:	30 09       	mov	r9,0
80005442:	f0 0a 01 0a 	sub	r10,r8,r10
80005446:	f2 0b 01 4b 	sbc	r11,r9,r11
8000544a:	32 d8       	mov	r8,45
8000544c:	fa eb 00 00 	st.d	sp[0],r10
80005450:	fb 68 06 bb 	st.b	sp[1723],r8
80005454:	30 18       	mov	r8,1
80005456:	e0 8f 06 fe 	bral	80006252 <_vfprintf_r+0x1552>
8000545a:	50 a7       	stdsp	sp[0x28],r7
8000545c:	50 80       	stdsp	sp[0x20],r0
8000545e:	0c 97       	mov	r7,r6
80005460:	04 94       	mov	r4,r2
80005462:	06 96       	mov	r6,r3
80005464:	02 92       	mov	r2,r1
80005466:	40 93       	lddsp	r3,sp[0x24]
80005468:	10 90       	mov	r0,r8
8000546a:	40 41       	lddsp	r1,sp[0x10]
8000546c:	0e 99       	mov	r9,r7
8000546e:	ed b5 00 03 	bld	r5,0x3
80005472:	c4 11       	brne	800054f4 <_vfprintf_r+0x7f4>
80005474:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005478:	40 3a       	lddsp	r10,sp[0xc]
8000547a:	58 0a       	cp.w	r10,0
8000547c:	c1 90       	breq	800054ae <_vfprintf_r+0x7ae>
8000547e:	10 36       	cp.w	r6,r8
80005480:	c6 45       	brlt	80005548 <_vfprintf_r+0x848>
80005482:	fa c8 f9 50 	sub	r8,sp,-1712
80005486:	1a d8       	st.w	--sp,r8
80005488:	fa c8 fa b8 	sub	r8,sp,-1352
8000548c:	1a d8       	st.w	--sp,r8
8000548e:	fa c8 fb b4 	sub	r8,sp,-1100
80005492:	0c 9b       	mov	r11,r6
80005494:	1a d8       	st.w	--sp,r8
80005496:	04 9a       	mov	r10,r2
80005498:	fa c8 f9 40 	sub	r8,sp,-1728
8000549c:	fa c9 ff b4 	sub	r9,sp,-76
800054a0:	08 9c       	mov	r12,r4
800054a2:	fe b0 fa 93 	rcall	800049c8 <get_arg>
800054a6:	2f dd       	sub	sp,-12
800054a8:	78 16       	ld.w	r6,r12[0x4]
800054aa:	50 76       	stdsp	sp[0x1c],r6
800054ac:	c4 88       	rjmp	8000553c <_vfprintf_r+0x83c>
800054ae:	2f f7       	sub	r7,-1
800054b0:	10 39       	cp.w	r9,r8
800054b2:	c0 c4       	brge	800054ca <_vfprintf_r+0x7ca>
800054b4:	fa ce f9 44 	sub	lr,sp,-1724
800054b8:	fc 06 00 36 	add	r6,lr,r6<<0x3
800054bc:	ec fc fd 8c 	ld.w	r12,r6[-628]
800054c0:	50 7c       	stdsp	sp[0x1c],r12
800054c2:	ec f6 fd 88 	ld.w	r6,r6[-632]
800054c6:	50 56       	stdsp	sp[0x14],r6
800054c8:	c6 68       	rjmp	80005594 <_vfprintf_r+0x894>
800054ca:	41 09       	lddsp	r9,sp[0x40]
800054cc:	59 f8       	cp.w	r8,31
800054ce:	e0 89 00 10 	brgt	800054ee <_vfprintf_r+0x7ee>
800054d2:	f2 ca ff f8 	sub	r10,r9,-8
800054d6:	72 1b       	ld.w	r11,r9[0x4]
800054d8:	51 0a       	stdsp	sp[0x40],r10
800054da:	72 09       	ld.w	r9,r9[0x0]
800054dc:	fa ca f9 44 	sub	r10,sp,-1724
800054e0:	50 7b       	stdsp	sp[0x1c],r11
800054e2:	50 59       	stdsp	sp[0x14],r9
800054e4:	f4 08 00 39 	add	r9,r10,r8<<0x3
800054e8:	40 5b       	lddsp	r11,sp[0x14]
800054ea:	40 7a       	lddsp	r10,sp[0x1c]
800054ec:	c4 78       	rjmp	8000557a <_vfprintf_r+0x87a>
800054ee:	72 18       	ld.w	r8,r9[0x4]
800054f0:	50 78       	stdsp	sp[0x1c],r8
800054f2:	c4 c8       	rjmp	8000558a <_vfprintf_r+0x88a>
800054f4:	fa f8 06 b4 	ld.w	r8,sp[1716]
800054f8:	40 3e       	lddsp	lr,sp[0xc]
800054fa:	58 0e       	cp.w	lr,0
800054fc:	c2 30       	breq	80005542 <_vfprintf_r+0x842>
800054fe:	10 36       	cp.w	r6,r8
80005500:	c0 94       	brge	80005512 <_vfprintf_r+0x812>
80005502:	fa cc f9 44 	sub	r12,sp,-1724
80005506:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000550a:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000550e:	50 7b       	stdsp	sp[0x1c],r11
80005510:	cd 9b       	rjmp	800054c2 <_vfprintf_r+0x7c2>
80005512:	fa c8 f9 50 	sub	r8,sp,-1712
80005516:	1a d8       	st.w	--sp,r8
80005518:	fa c8 fa b8 	sub	r8,sp,-1352
8000551c:	04 9a       	mov	r10,r2
8000551e:	1a d8       	st.w	--sp,r8
80005520:	fa c8 fb b4 	sub	r8,sp,-1100
80005524:	0c 9b       	mov	r11,r6
80005526:	1a d8       	st.w	--sp,r8
80005528:	08 9c       	mov	r12,r4
8000552a:	fa c8 f9 40 	sub	r8,sp,-1728
8000552e:	fa c9 ff b4 	sub	r9,sp,-76
80005532:	fe b0 fa 4b 	rcall	800049c8 <get_arg>
80005536:	2f dd       	sub	sp,-12
80005538:	78 1a       	ld.w	r10,r12[0x4]
8000553a:	50 7a       	stdsp	sp[0x1c],r10
8000553c:	78 0c       	ld.w	r12,r12[0x0]
8000553e:	50 5c       	stdsp	sp[0x14],r12
80005540:	c2 a8       	rjmp	80005594 <_vfprintf_r+0x894>
80005542:	2f f7       	sub	r7,-1
80005544:	10 39       	cp.w	r9,r8
80005546:	c0 94       	brge	80005558 <_vfprintf_r+0x858>
80005548:	fa c9 f9 44 	sub	r9,sp,-1724
8000554c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005550:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80005554:	50 78       	stdsp	sp[0x1c],r8
80005556:	cb 6b       	rjmp	800054c2 <_vfprintf_r+0x7c2>
80005558:	41 09       	lddsp	r9,sp[0x40]
8000555a:	59 f8       	cp.w	r8,31
8000555c:	e0 89 00 15 	brgt	80005586 <_vfprintf_r+0x886>
80005560:	f2 ca ff f8 	sub	r10,r9,-8
80005564:	72 16       	ld.w	r6,r9[0x4]
80005566:	72 09       	ld.w	r9,r9[0x0]
80005568:	51 0a       	stdsp	sp[0x40],r10
8000556a:	50 59       	stdsp	sp[0x14],r9
8000556c:	fa ce f9 44 	sub	lr,sp,-1724
80005570:	50 76       	stdsp	sp[0x1c],r6
80005572:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005576:	40 5b       	lddsp	r11,sp[0x14]
80005578:	0c 9a       	mov	r10,r6
8000557a:	f2 eb fd 88 	st.d	r9[-632],r10
8000557e:	2f f8       	sub	r8,-1
80005580:	fb 48 06 b4 	st.w	sp[1716],r8
80005584:	c0 88       	rjmp	80005594 <_vfprintf_r+0x894>
80005586:	72 1c       	ld.w	r12,r9[0x4]
80005588:	50 7c       	stdsp	sp[0x1c],r12
8000558a:	f2 c8 ff f8 	sub	r8,r9,-8
8000558e:	51 08       	stdsp	sp[0x40],r8
80005590:	72 09       	ld.w	r9,r9[0x0]
80005592:	50 59       	stdsp	sp[0x14],r9
80005594:	40 5b       	lddsp	r11,sp[0x14]
80005596:	40 7a       	lddsp	r10,sp[0x1c]
80005598:	e0 a0 29 c0 	rcall	8000a918 <__isinfd>
8000559c:	18 96       	mov	r6,r12
8000559e:	c1 50       	breq	800055c8 <_vfprintf_r+0x8c8>
800055a0:	30 08       	mov	r8,0
800055a2:	30 09       	mov	r9,0
800055a4:	40 5b       	lddsp	r11,sp[0x14]
800055a6:	40 7a       	lddsp	r10,sp[0x1c]
800055a8:	e0 a0 3b c8 	rcall	8000cd38 <__avr32_f64_cmp_lt>
800055ac:	c0 40       	breq	800055b4 <_vfprintf_r+0x8b4>
800055ae:	32 d8       	mov	r8,45
800055b0:	fb 68 06 bb 	st.b	sp[1723],r8
800055b4:	4d 18       	lddpc	r8,800056f8 <_vfprintf_r+0x9f8>
800055b6:	4d 26       	lddpc	r6,800056fc <_vfprintf_r+0x9fc>
800055b8:	a7 d5       	cbr	r5,0x7
800055ba:	e0 40 00 47 	cp.w	r0,71
800055be:	f0 06 17 a0 	movle	r6,r8
800055c2:	30 32       	mov	r2,3
800055c4:	e0 8f 06 d4 	bral	8000636c <_vfprintf_r+0x166c>
800055c8:	40 5b       	lddsp	r11,sp[0x14]
800055ca:	40 7a       	lddsp	r10,sp[0x1c]
800055cc:	e0 a0 29 bb 	rcall	8000a942 <__isnand>
800055d0:	c0 c0       	breq	800055e8 <_vfprintf_r+0x8e8>
800055d2:	50 26       	stdsp	sp[0x8],r6
800055d4:	4c b8       	lddpc	r8,80005700 <_vfprintf_r+0xa00>
800055d6:	4c c6       	lddpc	r6,80005704 <_vfprintf_r+0xa04>
800055d8:	a7 d5       	cbr	r5,0x7
800055da:	e0 40 00 47 	cp.w	r0,71
800055de:	f0 06 17 a0 	movle	r6,r8
800055e2:	30 32       	mov	r2,3
800055e4:	e0 8f 06 ca 	bral	80006378 <_vfprintf_r+0x1678>
800055e8:	40 2a       	lddsp	r10,sp[0x8]
800055ea:	5b fa       	cp.w	r10,-1
800055ec:	c0 41       	brne	800055f4 <_vfprintf_r+0x8f4>
800055ee:	30 69       	mov	r9,6
800055f0:	50 29       	stdsp	sp[0x8],r9
800055f2:	c1 18       	rjmp	80005614 <_vfprintf_r+0x914>
800055f4:	e0 40 00 47 	cp.w	r0,71
800055f8:	5f 09       	sreq	r9
800055fa:	e0 40 00 67 	cp.w	r0,103
800055fe:	5f 08       	sreq	r8
80005600:	f3 e8 10 08 	or	r8,r9,r8
80005604:	f8 08 18 00 	cp.b	r8,r12
80005608:	c0 60       	breq	80005614 <_vfprintf_r+0x914>
8000560a:	40 28       	lddsp	r8,sp[0x8]
8000560c:	58 08       	cp.w	r8,0
8000560e:	f9 b8 00 01 	moveq	r8,1
80005612:	50 28       	stdsp	sp[0x8],r8
80005614:	40 78       	lddsp	r8,sp[0x1c]
80005616:	40 59       	lddsp	r9,sp[0x14]
80005618:	fa e9 06 94 	st.d	sp[1684],r8
8000561c:	a9 a5       	sbr	r5,0x8
8000561e:	fa f8 06 94 	ld.w	r8,sp[1684]
80005622:	58 08       	cp.w	r8,0
80005624:	c0 65       	brlt	80005630 <_vfprintf_r+0x930>
80005626:	40 5e       	lddsp	lr,sp[0x14]
80005628:	30 0c       	mov	r12,0
8000562a:	50 6e       	stdsp	sp[0x18],lr
8000562c:	50 9c       	stdsp	sp[0x24],r12
8000562e:	c0 78       	rjmp	8000563c <_vfprintf_r+0x93c>
80005630:	40 5b       	lddsp	r11,sp[0x14]
80005632:	32 da       	mov	r10,45
80005634:	ee 1b 80 00 	eorh	r11,0x8000
80005638:	50 9a       	stdsp	sp[0x24],r10
8000563a:	50 6b       	stdsp	sp[0x18],r11
8000563c:	e0 40 00 46 	cp.w	r0,70
80005640:	5f 09       	sreq	r9
80005642:	e0 40 00 66 	cp.w	r0,102
80005646:	5f 08       	sreq	r8
80005648:	f3 e8 10 08 	or	r8,r9,r8
8000564c:	50 48       	stdsp	sp[0x10],r8
8000564e:	c0 40       	breq	80005656 <_vfprintf_r+0x956>
80005650:	40 22       	lddsp	r2,sp[0x8]
80005652:	30 39       	mov	r9,3
80005654:	c1 08       	rjmp	80005674 <_vfprintf_r+0x974>
80005656:	e0 40 00 45 	cp.w	r0,69
8000565a:	5f 09       	sreq	r9
8000565c:	e0 40 00 65 	cp.w	r0,101
80005660:	5f 08       	sreq	r8
80005662:	40 22       	lddsp	r2,sp[0x8]
80005664:	10 49       	or	r9,r8
80005666:	2f f2       	sub	r2,-1
80005668:	40 46       	lddsp	r6,sp[0x10]
8000566a:	ec 09 18 00 	cp.b	r9,r6
8000566e:	fb f2 00 02 	ld.weq	r2,sp[0x8]
80005672:	30 29       	mov	r9,2
80005674:	fa c8 f9 5c 	sub	r8,sp,-1700
80005678:	1a d8       	st.w	--sp,r8
8000567a:	fa c8 f9 54 	sub	r8,sp,-1708
8000567e:	1a d8       	st.w	--sp,r8
80005680:	fa c8 f9 4c 	sub	r8,sp,-1716
80005684:	08 9c       	mov	r12,r4
80005686:	1a d8       	st.w	--sp,r8
80005688:	04 98       	mov	r8,r2
8000568a:	40 9b       	lddsp	r11,sp[0x24]
8000568c:	40 aa       	lddsp	r10,sp[0x28]
8000568e:	e0 a0 16 47 	rcall	8000831c <_dtoa_r>
80005692:	e0 40 00 47 	cp.w	r0,71
80005696:	5f 19       	srne	r9
80005698:	e0 40 00 67 	cp.w	r0,103
8000569c:	5f 18       	srne	r8
8000569e:	18 96       	mov	r6,r12
800056a0:	2f dd       	sub	sp,-12
800056a2:	f3 e8 00 08 	and	r8,r9,r8
800056a6:	c0 41       	brne	800056ae <_vfprintf_r+0x9ae>
800056a8:	ed b5 00 00 	bld	r5,0x0
800056ac:	c3 81       	brne	8000571c <_vfprintf_r+0xa1c>
800056ae:	ec 02 00 0e 	add	lr,r6,r2
800056b2:	50 3e       	stdsp	sp[0xc],lr
800056b4:	40 4c       	lddsp	r12,sp[0x10]
800056b6:	58 0c       	cp.w	r12,0
800056b8:	c1 50       	breq	800056e2 <_vfprintf_r+0x9e2>
800056ba:	0d 89       	ld.ub	r9,r6[0x0]
800056bc:	33 08       	mov	r8,48
800056be:	f0 09 18 00 	cp.b	r9,r8
800056c2:	c0 b1       	brne	800056d8 <_vfprintf_r+0x9d8>
800056c4:	30 08       	mov	r8,0
800056c6:	30 09       	mov	r9,0
800056c8:	40 6b       	lddsp	r11,sp[0x18]
800056ca:	40 7a       	lddsp	r10,sp[0x1c]
800056cc:	e0 a0 3a ef 	rcall	8000ccaa <__avr32_f64_cmp_eq>
800056d0:	fb b2 00 01 	rsubeq	r2,1
800056d4:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
800056d8:	40 3b       	lddsp	r11,sp[0xc]
800056da:	fa f8 06 ac 	ld.w	r8,sp[1708]
800056de:	10 0b       	add	r11,r8
800056e0:	50 3b       	stdsp	sp[0xc],r11
800056e2:	40 6b       	lddsp	r11,sp[0x18]
800056e4:	30 08       	mov	r8,0
800056e6:	30 09       	mov	r9,0
800056e8:	40 7a       	lddsp	r10,sp[0x1c]
800056ea:	e0 a0 3a e0 	rcall	8000ccaa <__avr32_f64_cmp_eq>
800056ee:	c1 10       	breq	80005710 <_vfprintf_r+0xa10>
800056f0:	40 3a       	lddsp	r10,sp[0xc]
800056f2:	fb 4a 06 a4 	st.w	sp[1700],r10
800056f6:	c0 d8       	rjmp	80005710 <_vfprintf_r+0xa10>
800056f8:	80 00       	ld.sh	r0,r0[0x0]
800056fa:	dc 3c       	*unknown*
800056fc:	80 00       	ld.sh	r0,r0[0x0]
800056fe:	dc 40       	acall	0xc4
80005700:	80 00       	ld.sh	r0,r0[0x0]
80005702:	dc 44       	*unknown*
80005704:	80 00       	ld.sh	r0,r0[0x0]
80005706:	dc 48       	*unknown*
80005708:	10 c9       	st.b	r8++,r9
8000570a:	fb 48 06 a4 	st.w	sp[1700],r8
8000570e:	c0 28       	rjmp	80005712 <_vfprintf_r+0xa12>
80005710:	33 09       	mov	r9,48
80005712:	fa f8 06 a4 	ld.w	r8,sp[1700]
80005716:	40 3e       	lddsp	lr,sp[0xc]
80005718:	1c 38       	cp.w	r8,lr
8000571a:	cf 73       	brcs	80005708 <_vfprintf_r+0xa08>
8000571c:	e0 40 00 47 	cp.w	r0,71
80005720:	5f 09       	sreq	r9
80005722:	e0 40 00 67 	cp.w	r0,103
80005726:	5f 08       	sreq	r8
80005728:	f3 e8 10 08 	or	r8,r9,r8
8000572c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80005730:	0c 19       	sub	r9,r6
80005732:	50 69       	stdsp	sp[0x18],r9
80005734:	58 08       	cp.w	r8,0
80005736:	c0 b0       	breq	8000574c <_vfprintf_r+0xa4c>
80005738:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000573c:	5b d8       	cp.w	r8,-3
8000573e:	c0 55       	brlt	80005748 <_vfprintf_r+0xa48>
80005740:	40 2c       	lddsp	r12,sp[0x8]
80005742:	18 38       	cp.w	r8,r12
80005744:	e0 8a 00 6a 	brle	80005818 <_vfprintf_r+0xb18>
80005748:	20 20       	sub	r0,2
8000574a:	c0 58       	rjmp	80005754 <_vfprintf_r+0xa54>
8000574c:	e0 40 00 65 	cp.w	r0,101
80005750:	e0 89 00 46 	brgt	800057dc <_vfprintf_r+0xadc>
80005754:	fa fb 06 ac 	ld.w	r11,sp[1708]
80005758:	fb 60 06 9c 	st.b	sp[1692],r0
8000575c:	20 1b       	sub	r11,1
8000575e:	fb 4b 06 ac 	st.w	sp[1708],r11
80005762:	c0 47       	brpl	8000576a <_vfprintf_r+0xa6a>
80005764:	5c 3b       	neg	r11
80005766:	32 d8       	mov	r8,45
80005768:	c0 28       	rjmp	8000576c <_vfprintf_r+0xa6c>
8000576a:	32 b8       	mov	r8,43
8000576c:	fb 68 06 9d 	st.b	sp[1693],r8
80005770:	58 9b       	cp.w	r11,9
80005772:	e0 8a 00 1d 	brle	800057ac <_vfprintf_r+0xaac>
80005776:	fa c9 fa 35 	sub	r9,sp,-1483
8000577a:	30 aa       	mov	r10,10
8000577c:	12 98       	mov	r8,r9
8000577e:	0e 9c       	mov	r12,r7
80005780:	0c 92       	mov	r2,r6
80005782:	f6 0a 0c 06 	divs	r6,r11,r10
80005786:	0e 9b       	mov	r11,r7
80005788:	2d 0b       	sub	r11,-48
8000578a:	10 fb       	st.b	--r8,r11
8000578c:	0c 9b       	mov	r11,r6
8000578e:	58 96       	cp.w	r6,9
80005790:	fe 99 ff f9 	brgt	80005782 <_vfprintf_r+0xa82>
80005794:	2d 0b       	sub	r11,-48
80005796:	18 97       	mov	r7,r12
80005798:	04 96       	mov	r6,r2
8000579a:	10 fb       	st.b	--r8,r11
8000579c:	fa ca f9 62 	sub	r10,sp,-1694
800057a0:	c0 38       	rjmp	800057a6 <_vfprintf_r+0xaa6>
800057a2:	11 3b       	ld.ub	r11,r8++
800057a4:	14 cb       	st.b	r10++,r11
800057a6:	12 38       	cp.w	r8,r9
800057a8:	cf d3       	brcs	800057a2 <_vfprintf_r+0xaa2>
800057aa:	c0 98       	rjmp	800057bc <_vfprintf_r+0xabc>
800057ac:	2d 0b       	sub	r11,-48
800057ae:	33 08       	mov	r8,48
800057b0:	fb 6b 06 9f 	st.b	sp[1695],r11
800057b4:	fb 68 06 9e 	st.b	sp[1694],r8
800057b8:	fa ca f9 60 	sub	r10,sp,-1696
800057bc:	fa c8 f9 64 	sub	r8,sp,-1692
800057c0:	f4 08 01 08 	sub	r8,r10,r8
800057c4:	50 e8       	stdsp	sp[0x38],r8
800057c6:	10 92       	mov	r2,r8
800057c8:	40 6b       	lddsp	r11,sp[0x18]
800057ca:	16 02       	add	r2,r11
800057cc:	58 1b       	cp.w	r11,1
800057ce:	e0 89 00 05 	brgt	800057d8 <_vfprintf_r+0xad8>
800057d2:	ed b5 00 00 	bld	r5,0x0
800057d6:	c3 51       	brne	80005840 <_vfprintf_r+0xb40>
800057d8:	2f f2       	sub	r2,-1
800057da:	c3 38       	rjmp	80005840 <_vfprintf_r+0xb40>
800057dc:	e0 40 00 66 	cp.w	r0,102
800057e0:	c1 c1       	brne	80005818 <_vfprintf_r+0xb18>
800057e2:	fa f2 06 ac 	ld.w	r2,sp[1708]
800057e6:	58 02       	cp.w	r2,0
800057e8:	e0 8a 00 0c 	brle	80005800 <_vfprintf_r+0xb00>
800057ec:	40 2a       	lddsp	r10,sp[0x8]
800057ee:	58 0a       	cp.w	r10,0
800057f0:	c0 41       	brne	800057f8 <_vfprintf_r+0xaf8>
800057f2:	ed b5 00 00 	bld	r5,0x0
800057f6:	c2 51       	brne	80005840 <_vfprintf_r+0xb40>
800057f8:	2f f2       	sub	r2,-1
800057fa:	40 29       	lddsp	r9,sp[0x8]
800057fc:	12 02       	add	r2,r9
800057fe:	c0 b8       	rjmp	80005814 <_vfprintf_r+0xb14>
80005800:	40 28       	lddsp	r8,sp[0x8]
80005802:	58 08       	cp.w	r8,0
80005804:	c0 61       	brne	80005810 <_vfprintf_r+0xb10>
80005806:	ed b5 00 00 	bld	r5,0x0
8000580a:	c0 30       	breq	80005810 <_vfprintf_r+0xb10>
8000580c:	30 12       	mov	r2,1
8000580e:	c1 98       	rjmp	80005840 <_vfprintf_r+0xb40>
80005810:	40 22       	lddsp	r2,sp[0x8]
80005812:	2f e2       	sub	r2,-2
80005814:	36 60       	mov	r0,102
80005816:	c1 58       	rjmp	80005840 <_vfprintf_r+0xb40>
80005818:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000581c:	40 6e       	lddsp	lr,sp[0x18]
8000581e:	1c 32       	cp.w	r2,lr
80005820:	c0 65       	brlt	8000582c <_vfprintf_r+0xb2c>
80005822:	ed b5 00 00 	bld	r5,0x0
80005826:	f7 b2 00 ff 	subeq	r2,-1
8000582a:	c0 a8       	rjmp	8000583e <_vfprintf_r+0xb3e>
8000582c:	e4 08 11 02 	rsub	r8,r2,2
80005830:	40 6c       	lddsp	r12,sp[0x18]
80005832:	58 02       	cp.w	r2,0
80005834:	f0 02 17 a0 	movle	r2,r8
80005838:	f9 b2 09 01 	movgt	r2,1
8000583c:	18 02       	add	r2,r12
8000583e:	36 70       	mov	r0,103
80005840:	40 9b       	lddsp	r11,sp[0x24]
80005842:	58 0b       	cp.w	r11,0
80005844:	e0 80 05 94 	breq	8000636c <_vfprintf_r+0x166c>
80005848:	32 d8       	mov	r8,45
8000584a:	fb 68 06 bb 	st.b	sp[1723],r8
8000584e:	e0 8f 05 93 	bral	80006374 <_vfprintf_r+0x1674>
80005852:	50 a7       	stdsp	sp[0x28],r7
80005854:	04 94       	mov	r4,r2
80005856:	0c 97       	mov	r7,r6
80005858:	02 92       	mov	r2,r1
8000585a:	06 96       	mov	r6,r3
8000585c:	40 41       	lddsp	r1,sp[0x10]
8000585e:	40 93       	lddsp	r3,sp[0x24]
80005860:	0e 99       	mov	r9,r7
80005862:	ed b5 00 05 	bld	r5,0x5
80005866:	c4 81       	brne	800058f6 <_vfprintf_r+0xbf6>
80005868:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000586c:	40 3e       	lddsp	lr,sp[0xc]
8000586e:	58 0e       	cp.w	lr,0
80005870:	c1 d0       	breq	800058aa <_vfprintf_r+0xbaa>
80005872:	10 36       	cp.w	r6,r8
80005874:	c0 64       	brge	80005880 <_vfprintf_r+0xb80>
80005876:	fa cc f9 44 	sub	r12,sp,-1724
8000587a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000587e:	c1 d8       	rjmp	800058b8 <_vfprintf_r+0xbb8>
80005880:	fa c8 f9 50 	sub	r8,sp,-1712
80005884:	1a d8       	st.w	--sp,r8
80005886:	fa c8 fa b8 	sub	r8,sp,-1352
8000588a:	04 9a       	mov	r10,r2
8000588c:	1a d8       	st.w	--sp,r8
8000588e:	fa c8 fb b4 	sub	r8,sp,-1100
80005892:	0c 9b       	mov	r11,r6
80005894:	1a d8       	st.w	--sp,r8
80005896:	08 9c       	mov	r12,r4
80005898:	fa c8 f9 40 	sub	r8,sp,-1728
8000589c:	fa c9 ff b4 	sub	r9,sp,-76
800058a0:	fe b0 f8 94 	rcall	800049c8 <get_arg>
800058a4:	2f dd       	sub	sp,-12
800058a6:	78 0a       	ld.w	r10,r12[0x0]
800058a8:	c2 08       	rjmp	800058e8 <_vfprintf_r+0xbe8>
800058aa:	2f f7       	sub	r7,-1
800058ac:	10 39       	cp.w	r9,r8
800058ae:	c0 84       	brge	800058be <_vfprintf_r+0xbbe>
800058b0:	fa cb f9 44 	sub	r11,sp,-1724
800058b4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800058b8:	ec fa fd 88 	ld.w	r10,r6[-632]
800058bc:	c1 68       	rjmp	800058e8 <_vfprintf_r+0xbe8>
800058be:	41 09       	lddsp	r9,sp[0x40]
800058c0:	59 f8       	cp.w	r8,31
800058c2:	e0 89 00 10 	brgt	800058e2 <_vfprintf_r+0xbe2>
800058c6:	f2 ca ff fc 	sub	r10,r9,-4
800058ca:	51 0a       	stdsp	sp[0x40],r10
800058cc:	fa c6 f9 44 	sub	r6,sp,-1724
800058d0:	72 0a       	ld.w	r10,r9[0x0]
800058d2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800058d6:	f3 4a fd 88 	st.w	r9[-632],r10
800058da:	2f f8       	sub	r8,-1
800058dc:	fb 48 06 b4 	st.w	sp[1716],r8
800058e0:	c0 48       	rjmp	800058e8 <_vfprintf_r+0xbe8>
800058e2:	72 0a       	ld.w	r10,r9[0x0]
800058e4:	2f c9       	sub	r9,-4
800058e6:	51 09       	stdsp	sp[0x40],r9
800058e8:	40 be       	lddsp	lr,sp[0x2c]
800058ea:	1c 98       	mov	r8,lr
800058ec:	95 1e       	st.w	r10[0x4],lr
800058ee:	bf 58       	asr	r8,0x1f
800058f0:	95 08       	st.w	r10[0x0],r8
800058f2:	fe 9f fa 92 	bral	80004e16 <_vfprintf_r+0x116>
800058f6:	ed b5 00 04 	bld	r5,0x4
800058fa:	c4 80       	breq	8000598a <_vfprintf_r+0xc8a>
800058fc:	e2 15 00 40 	andl	r5,0x40,COH
80005900:	c4 50       	breq	8000598a <_vfprintf_r+0xc8a>
80005902:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005906:	40 3c       	lddsp	r12,sp[0xc]
80005908:	58 0c       	cp.w	r12,0
8000590a:	c1 d0       	breq	80005944 <_vfprintf_r+0xc44>
8000590c:	10 36       	cp.w	r6,r8
8000590e:	c0 64       	brge	8000591a <_vfprintf_r+0xc1a>
80005910:	fa cb f9 44 	sub	r11,sp,-1724
80005914:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005918:	c1 d8       	rjmp	80005952 <_vfprintf_r+0xc52>
8000591a:	fa c8 f9 50 	sub	r8,sp,-1712
8000591e:	1a d8       	st.w	--sp,r8
80005920:	fa c8 fa b8 	sub	r8,sp,-1352
80005924:	04 9a       	mov	r10,r2
80005926:	1a d8       	st.w	--sp,r8
80005928:	fa c8 fb b4 	sub	r8,sp,-1100
8000592c:	0c 9b       	mov	r11,r6
8000592e:	1a d8       	st.w	--sp,r8
80005930:	08 9c       	mov	r12,r4
80005932:	fa c8 f9 40 	sub	r8,sp,-1728
80005936:	fa c9 ff b4 	sub	r9,sp,-76
8000593a:	fe b0 f8 47 	rcall	800049c8 <get_arg>
8000593e:	2f dd       	sub	sp,-12
80005940:	78 0a       	ld.w	r10,r12[0x0]
80005942:	c2 08       	rjmp	80005982 <_vfprintf_r+0xc82>
80005944:	2f f7       	sub	r7,-1
80005946:	10 39       	cp.w	r9,r8
80005948:	c0 84       	brge	80005958 <_vfprintf_r+0xc58>
8000594a:	fa ca f9 44 	sub	r10,sp,-1724
8000594e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005952:	ec fa fd 88 	ld.w	r10,r6[-632]
80005956:	c1 68       	rjmp	80005982 <_vfprintf_r+0xc82>
80005958:	41 09       	lddsp	r9,sp[0x40]
8000595a:	59 f8       	cp.w	r8,31
8000595c:	e0 89 00 10 	brgt	8000597c <_vfprintf_r+0xc7c>
80005960:	f2 ca ff fc 	sub	r10,r9,-4
80005964:	51 0a       	stdsp	sp[0x40],r10
80005966:	fa c6 f9 44 	sub	r6,sp,-1724
8000596a:	72 0a       	ld.w	r10,r9[0x0]
8000596c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005970:	f3 4a fd 88 	st.w	r9[-632],r10
80005974:	2f f8       	sub	r8,-1
80005976:	fb 48 06 b4 	st.w	sp[1716],r8
8000597a:	c0 48       	rjmp	80005982 <_vfprintf_r+0xc82>
8000597c:	72 0a       	ld.w	r10,r9[0x0]
8000597e:	2f c9       	sub	r9,-4
80005980:	51 09       	stdsp	sp[0x40],r9
80005982:	40 be       	lddsp	lr,sp[0x2c]
80005984:	b4 0e       	st.h	r10[0x0],lr
80005986:	fe 9f fa 48 	bral	80004e16 <_vfprintf_r+0x116>
8000598a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000598e:	40 3c       	lddsp	r12,sp[0xc]
80005990:	58 0c       	cp.w	r12,0
80005992:	c1 d0       	breq	800059cc <_vfprintf_r+0xccc>
80005994:	10 36       	cp.w	r6,r8
80005996:	c0 64       	brge	800059a2 <_vfprintf_r+0xca2>
80005998:	fa cb f9 44 	sub	r11,sp,-1724
8000599c:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059a0:	c1 d8       	rjmp	800059da <_vfprintf_r+0xcda>
800059a2:	fa c8 f9 50 	sub	r8,sp,-1712
800059a6:	1a d8       	st.w	--sp,r8
800059a8:	fa c8 fa b8 	sub	r8,sp,-1352
800059ac:	04 9a       	mov	r10,r2
800059ae:	1a d8       	st.w	--sp,r8
800059b0:	fa c8 fb b4 	sub	r8,sp,-1100
800059b4:	0c 9b       	mov	r11,r6
800059b6:	1a d8       	st.w	--sp,r8
800059b8:	08 9c       	mov	r12,r4
800059ba:	fa c8 f9 40 	sub	r8,sp,-1728
800059be:	fa c9 ff b4 	sub	r9,sp,-76
800059c2:	fe b0 f8 03 	rcall	800049c8 <get_arg>
800059c6:	2f dd       	sub	sp,-12
800059c8:	78 0a       	ld.w	r10,r12[0x0]
800059ca:	c2 08       	rjmp	80005a0a <_vfprintf_r+0xd0a>
800059cc:	2f f7       	sub	r7,-1
800059ce:	10 39       	cp.w	r9,r8
800059d0:	c0 84       	brge	800059e0 <_vfprintf_r+0xce0>
800059d2:	fa ca f9 44 	sub	r10,sp,-1724
800059d6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800059da:	ec fa fd 88 	ld.w	r10,r6[-632]
800059de:	c1 68       	rjmp	80005a0a <_vfprintf_r+0xd0a>
800059e0:	41 09       	lddsp	r9,sp[0x40]
800059e2:	59 f8       	cp.w	r8,31
800059e4:	e0 89 00 10 	brgt	80005a04 <_vfprintf_r+0xd04>
800059e8:	f2 ca ff fc 	sub	r10,r9,-4
800059ec:	51 0a       	stdsp	sp[0x40],r10
800059ee:	fa c6 f9 44 	sub	r6,sp,-1724
800059f2:	72 0a       	ld.w	r10,r9[0x0]
800059f4:	ec 08 00 39 	add	r9,r6,r8<<0x3
800059f8:	f3 4a fd 88 	st.w	r9[-632],r10
800059fc:	2f f8       	sub	r8,-1
800059fe:	fb 48 06 b4 	st.w	sp[1716],r8
80005a02:	c0 48       	rjmp	80005a0a <_vfprintf_r+0xd0a>
80005a04:	72 0a       	ld.w	r10,r9[0x0]
80005a06:	2f c9       	sub	r9,-4
80005a08:	51 09       	stdsp	sp[0x40],r9
80005a0a:	40 be       	lddsp	lr,sp[0x2c]
80005a0c:	95 0e       	st.w	r10[0x0],lr
80005a0e:	fe 9f fa 04 	bral	80004e16 <_vfprintf_r+0x116>
80005a12:	50 a7       	stdsp	sp[0x28],r7
80005a14:	50 80       	stdsp	sp[0x20],r0
80005a16:	0c 97       	mov	r7,r6
80005a18:	04 94       	mov	r4,r2
80005a1a:	06 96       	mov	r6,r3
80005a1c:	02 92       	mov	r2,r1
80005a1e:	40 93       	lddsp	r3,sp[0x24]
80005a20:	10 90       	mov	r0,r8
80005a22:	40 41       	lddsp	r1,sp[0x10]
80005a24:	a5 a5       	sbr	r5,0x4
80005a26:	c0 a8       	rjmp	80005a3a <_vfprintf_r+0xd3a>
80005a28:	50 a7       	stdsp	sp[0x28],r7
80005a2a:	50 80       	stdsp	sp[0x20],r0
80005a2c:	0c 97       	mov	r7,r6
80005a2e:	04 94       	mov	r4,r2
80005a30:	06 96       	mov	r6,r3
80005a32:	02 92       	mov	r2,r1
80005a34:	40 93       	lddsp	r3,sp[0x24]
80005a36:	10 90       	mov	r0,r8
80005a38:	40 41       	lddsp	r1,sp[0x10]
80005a3a:	ed b5 00 05 	bld	r5,0x5
80005a3e:	c5 d1       	brne	80005af8 <_vfprintf_r+0xdf8>
80005a40:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a44:	40 3c       	lddsp	r12,sp[0xc]
80005a46:	58 0c       	cp.w	r12,0
80005a48:	c2 60       	breq	80005a94 <_vfprintf_r+0xd94>
80005a4a:	10 36       	cp.w	r6,r8
80005a4c:	c0 a4       	brge	80005a60 <_vfprintf_r+0xd60>
80005a4e:	fa cb f9 44 	sub	r11,sp,-1724
80005a52:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005a56:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005a5a:	fa e9 00 00 	st.d	sp[0],r8
80005a5e:	c1 88       	rjmp	80005a8e <_vfprintf_r+0xd8e>
80005a60:	fa c8 f9 50 	sub	r8,sp,-1712
80005a64:	1a d8       	st.w	--sp,r8
80005a66:	fa c8 fa b8 	sub	r8,sp,-1352
80005a6a:	04 9a       	mov	r10,r2
80005a6c:	1a d8       	st.w	--sp,r8
80005a6e:	0c 9b       	mov	r11,r6
80005a70:	fa c8 fb b4 	sub	r8,sp,-1100
80005a74:	08 9c       	mov	r12,r4
80005a76:	1a d8       	st.w	--sp,r8
80005a78:	fa c8 f9 40 	sub	r8,sp,-1728
80005a7c:	fa c9 ff b4 	sub	r9,sp,-76
80005a80:	fe b0 f7 a4 	rcall	800049c8 <get_arg>
80005a84:	2f dd       	sub	sp,-12
80005a86:	f8 ea 00 00 	ld.d	r10,r12[0]
80005a8a:	fa eb 00 00 	st.d	sp[0],r10
80005a8e:	30 08       	mov	r8,0
80005a90:	e0 8f 03 de 	bral	8000624c <_vfprintf_r+0x154c>
80005a94:	ee ca ff ff 	sub	r10,r7,-1
80005a98:	10 37       	cp.w	r7,r8
80005a9a:	c0 b4       	brge	80005ab0 <_vfprintf_r+0xdb0>
80005a9c:	fa c9 f9 44 	sub	r9,sp,-1724
80005aa0:	14 97       	mov	r7,r10
80005aa2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005aa6:	ec ea fd 88 	ld.d	r10,r6[-632]
80005aaa:	fa eb 00 00 	st.d	sp[0],r10
80005aae:	c1 88       	rjmp	80005ade <_vfprintf_r+0xdde>
80005ab0:	41 09       	lddsp	r9,sp[0x40]
80005ab2:	59 f8       	cp.w	r8,31
80005ab4:	e0 89 00 18 	brgt	80005ae4 <_vfprintf_r+0xde4>
80005ab8:	f2 e6 00 00 	ld.d	r6,r9[0]
80005abc:	f2 cb ff f8 	sub	r11,r9,-8
80005ac0:	fa e7 00 00 	st.d	sp[0],r6
80005ac4:	51 0b       	stdsp	sp[0x40],r11
80005ac6:	fa c6 f9 44 	sub	r6,sp,-1724
80005aca:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005ace:	fa e6 00 00 	ld.d	r6,sp[0]
80005ad2:	f2 e7 fd 88 	st.d	r9[-632],r6
80005ad6:	2f f8       	sub	r8,-1
80005ad8:	14 97       	mov	r7,r10
80005ada:	fb 48 06 b4 	st.w	sp[1716],r8
80005ade:	40 38       	lddsp	r8,sp[0xc]
80005ae0:	e0 8f 03 b6 	bral	8000624c <_vfprintf_r+0x154c>
80005ae4:	f2 e6 00 00 	ld.d	r6,r9[0]
80005ae8:	40 38       	lddsp	r8,sp[0xc]
80005aea:	fa e7 00 00 	st.d	sp[0],r6
80005aee:	2f 89       	sub	r9,-8
80005af0:	14 97       	mov	r7,r10
80005af2:	51 09       	stdsp	sp[0x40],r9
80005af4:	e0 8f 03 ac 	bral	8000624c <_vfprintf_r+0x154c>
80005af8:	ed b5 00 04 	bld	r5,0x4
80005afc:	c1 61       	brne	80005b28 <_vfprintf_r+0xe28>
80005afe:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005b02:	40 3e       	lddsp	lr,sp[0xc]
80005b04:	58 0e       	cp.w	lr,0
80005b06:	c0 80       	breq	80005b16 <_vfprintf_r+0xe16>
80005b08:	10 36       	cp.w	r6,r8
80005b0a:	c6 74       	brge	80005bd8 <_vfprintf_r+0xed8>
80005b0c:	fa cc f9 44 	sub	r12,sp,-1724
80005b10:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005b14:	c8 08       	rjmp	80005c14 <_vfprintf_r+0xf14>
80005b16:	ee ca ff ff 	sub	r10,r7,-1
80005b1a:	10 37       	cp.w	r7,r8
80005b1c:	c7 f4       	brge	80005c1a <_vfprintf_r+0xf1a>
80005b1e:	fa cb f9 44 	sub	r11,sp,-1724
80005b22:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005b26:	c7 68       	rjmp	80005c12 <_vfprintf_r+0xf12>
80005b28:	ed b5 00 06 	bld	r5,0x6
80005b2c:	c4 a1       	brne	80005bc0 <_vfprintf_r+0xec0>
80005b2e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005b32:	40 3c       	lddsp	r12,sp[0xc]
80005b34:	58 0c       	cp.w	r12,0
80005b36:	c1 d0       	breq	80005b70 <_vfprintf_r+0xe70>
80005b38:	10 36       	cp.w	r6,r8
80005b3a:	c0 64       	brge	80005b46 <_vfprintf_r+0xe46>
80005b3c:	fa cb f9 44 	sub	r11,sp,-1724
80005b40:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005b44:	c1 f8       	rjmp	80005b82 <_vfprintf_r+0xe82>
80005b46:	fa c8 f9 50 	sub	r8,sp,-1712
80005b4a:	1a d8       	st.w	--sp,r8
80005b4c:	fa c8 fa b8 	sub	r8,sp,-1352
80005b50:	1a d8       	st.w	--sp,r8
80005b52:	fa c8 fb b4 	sub	r8,sp,-1100
80005b56:	1a d8       	st.w	--sp,r8
80005b58:	fa c8 f9 40 	sub	r8,sp,-1728
80005b5c:	fa c9 ff b4 	sub	r9,sp,-76
80005b60:	04 9a       	mov	r10,r2
80005b62:	0c 9b       	mov	r11,r6
80005b64:	08 9c       	mov	r12,r4
80005b66:	fe b0 f7 31 	rcall	800049c8 <get_arg>
80005b6a:	2f dd       	sub	sp,-12
80005b6c:	98 18       	ld.sh	r8,r12[0x2]
80005b6e:	c2 68       	rjmp	80005bba <_vfprintf_r+0xeba>
80005b70:	ee ca ff ff 	sub	r10,r7,-1
80005b74:	10 37       	cp.w	r7,r8
80005b76:	c0 94       	brge	80005b88 <_vfprintf_r+0xe88>
80005b78:	fa c9 f9 44 	sub	r9,sp,-1724
80005b7c:	14 97       	mov	r7,r10
80005b7e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005b82:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005b86:	c1 a8       	rjmp	80005bba <_vfprintf_r+0xeba>
80005b88:	41 09       	lddsp	r9,sp[0x40]
80005b8a:	59 f8       	cp.w	r8,31
80005b8c:	e0 89 00 13 	brgt	80005bb2 <_vfprintf_r+0xeb2>
80005b90:	f2 cb ff fc 	sub	r11,r9,-4
80005b94:	51 0b       	stdsp	sp[0x40],r11
80005b96:	72 09       	ld.w	r9,r9[0x0]
80005b98:	fa c6 f9 44 	sub	r6,sp,-1724
80005b9c:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005ba0:	2f f8       	sub	r8,-1
80005ba2:	f7 49 fd 88 	st.w	r11[-632],r9
80005ba6:	fb 48 06 b4 	st.w	sp[1716],r8
80005baa:	14 97       	mov	r7,r10
80005bac:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005bb0:	c0 58       	rjmp	80005bba <_vfprintf_r+0xeba>
80005bb2:	92 18       	ld.sh	r8,r9[0x2]
80005bb4:	14 97       	mov	r7,r10
80005bb6:	2f c9       	sub	r9,-4
80005bb8:	51 09       	stdsp	sp[0x40],r9
80005bba:	5c 78       	castu.h	r8
80005bbc:	50 18       	stdsp	sp[0x4],r8
80005bbe:	c4 68       	rjmp	80005c4a <_vfprintf_r+0xf4a>
80005bc0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005bc4:	40 3c       	lddsp	r12,sp[0xc]
80005bc6:	58 0c       	cp.w	r12,0
80005bc8:	c1 d0       	breq	80005c02 <_vfprintf_r+0xf02>
80005bca:	10 36       	cp.w	r6,r8
80005bcc:	c0 64       	brge	80005bd8 <_vfprintf_r+0xed8>
80005bce:	fa cb f9 44 	sub	r11,sp,-1724
80005bd2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005bd6:	c1 f8       	rjmp	80005c14 <_vfprintf_r+0xf14>
80005bd8:	fa c8 f9 50 	sub	r8,sp,-1712
80005bdc:	1a d8       	st.w	--sp,r8
80005bde:	fa c8 fa b8 	sub	r8,sp,-1352
80005be2:	0c 9b       	mov	r11,r6
80005be4:	1a d8       	st.w	--sp,r8
80005be6:	fa c8 fb b4 	sub	r8,sp,-1100
80005bea:	04 9a       	mov	r10,r2
80005bec:	1a d8       	st.w	--sp,r8
80005bee:	08 9c       	mov	r12,r4
80005bf0:	fa c8 f9 40 	sub	r8,sp,-1728
80005bf4:	fa c9 ff b4 	sub	r9,sp,-76
80005bf8:	fe b0 f6 e8 	rcall	800049c8 <get_arg>
80005bfc:	2f dd       	sub	sp,-12
80005bfe:	78 0b       	ld.w	r11,r12[0x0]
80005c00:	c2 48       	rjmp	80005c48 <_vfprintf_r+0xf48>
80005c02:	ee ca ff ff 	sub	r10,r7,-1
80005c06:	10 37       	cp.w	r7,r8
80005c08:	c0 94       	brge	80005c1a <_vfprintf_r+0xf1a>
80005c0a:	fa c9 f9 44 	sub	r9,sp,-1724
80005c0e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005c12:	14 97       	mov	r7,r10
80005c14:	ec fb fd 88 	ld.w	r11,r6[-632]
80005c18:	c1 88       	rjmp	80005c48 <_vfprintf_r+0xf48>
80005c1a:	41 09       	lddsp	r9,sp[0x40]
80005c1c:	59 f8       	cp.w	r8,31
80005c1e:	e0 89 00 11 	brgt	80005c40 <_vfprintf_r+0xf40>
80005c22:	f2 cb ff fc 	sub	r11,r9,-4
80005c26:	51 0b       	stdsp	sp[0x40],r11
80005c28:	fa c6 f9 44 	sub	r6,sp,-1724
80005c2c:	72 0b       	ld.w	r11,r9[0x0]
80005c2e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005c32:	f3 4b fd 88 	st.w	r9[-632],r11
80005c36:	2f f8       	sub	r8,-1
80005c38:	14 97       	mov	r7,r10
80005c3a:	fb 48 06 b4 	st.w	sp[1716],r8
80005c3e:	c0 58       	rjmp	80005c48 <_vfprintf_r+0xf48>
80005c40:	72 0b       	ld.w	r11,r9[0x0]
80005c42:	14 97       	mov	r7,r10
80005c44:	2f c9       	sub	r9,-4
80005c46:	51 09       	stdsp	sp[0x40],r9
80005c48:	50 1b       	stdsp	sp[0x4],r11
80005c4a:	30 0e       	mov	lr,0
80005c4c:	50 0e       	stdsp	sp[0x0],lr
80005c4e:	1c 98       	mov	r8,lr
80005c50:	e0 8f 02 fe 	bral	8000624c <_vfprintf_r+0x154c>
80005c54:	50 a7       	stdsp	sp[0x28],r7
80005c56:	50 80       	stdsp	sp[0x20],r0
80005c58:	0c 97       	mov	r7,r6
80005c5a:	04 94       	mov	r4,r2
80005c5c:	06 96       	mov	r6,r3
80005c5e:	02 92       	mov	r2,r1
80005c60:	40 93       	lddsp	r3,sp[0x24]
80005c62:	40 41       	lddsp	r1,sp[0x10]
80005c64:	0e 99       	mov	r9,r7
80005c66:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005c6a:	40 3c       	lddsp	r12,sp[0xc]
80005c6c:	58 0c       	cp.w	r12,0
80005c6e:	c1 d0       	breq	80005ca8 <_vfprintf_r+0xfa8>
80005c70:	10 36       	cp.w	r6,r8
80005c72:	c0 64       	brge	80005c7e <_vfprintf_r+0xf7e>
80005c74:	fa cb f9 44 	sub	r11,sp,-1724
80005c78:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005c7c:	c1 d8       	rjmp	80005cb6 <_vfprintf_r+0xfb6>
80005c7e:	fa c8 f9 50 	sub	r8,sp,-1712
80005c82:	1a d8       	st.w	--sp,r8
80005c84:	fa c8 fa b8 	sub	r8,sp,-1352
80005c88:	1a d8       	st.w	--sp,r8
80005c8a:	fa c8 fb b4 	sub	r8,sp,-1100
80005c8e:	1a d8       	st.w	--sp,r8
80005c90:	fa c9 ff b4 	sub	r9,sp,-76
80005c94:	fa c8 f9 40 	sub	r8,sp,-1728
80005c98:	04 9a       	mov	r10,r2
80005c9a:	0c 9b       	mov	r11,r6
80005c9c:	08 9c       	mov	r12,r4
80005c9e:	fe b0 f6 95 	rcall	800049c8 <get_arg>
80005ca2:	2f dd       	sub	sp,-12
80005ca4:	78 09       	ld.w	r9,r12[0x0]
80005ca6:	c2 18       	rjmp	80005ce8 <_vfprintf_r+0xfe8>
80005ca8:	2f f7       	sub	r7,-1
80005caa:	10 39       	cp.w	r9,r8
80005cac:	c0 84       	brge	80005cbc <_vfprintf_r+0xfbc>
80005cae:	fa ca f9 44 	sub	r10,sp,-1724
80005cb2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005cb6:	ec f9 fd 88 	ld.w	r9,r6[-632]
80005cba:	c1 78       	rjmp	80005ce8 <_vfprintf_r+0xfe8>
80005cbc:	41 09       	lddsp	r9,sp[0x40]
80005cbe:	59 f8       	cp.w	r8,31
80005cc0:	e0 89 00 10 	brgt	80005ce0 <_vfprintf_r+0xfe0>
80005cc4:	f2 ca ff fc 	sub	r10,r9,-4
80005cc8:	51 0a       	stdsp	sp[0x40],r10
80005cca:	fa c6 f9 44 	sub	r6,sp,-1724
80005cce:	72 09       	ld.w	r9,r9[0x0]
80005cd0:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80005cd4:	f5 49 fd 88 	st.w	r10[-632],r9
80005cd8:	2f f8       	sub	r8,-1
80005cda:	fb 48 06 b4 	st.w	sp[1716],r8
80005cde:	c0 58       	rjmp	80005ce8 <_vfprintf_r+0xfe8>
80005ce0:	f2 c8 ff fc 	sub	r8,r9,-4
80005ce4:	51 08       	stdsp	sp[0x40],r8
80005ce6:	72 09       	ld.w	r9,r9[0x0]
80005ce8:	33 08       	mov	r8,48
80005cea:	fb 68 06 b8 	st.b	sp[1720],r8
80005cee:	37 88       	mov	r8,120
80005cf0:	30 0e       	mov	lr,0
80005cf2:	fb 68 06 b9 	st.b	sp[1721],r8
80005cf6:	fe cc 80 aa 	sub	r12,pc,-32598
80005cfa:	50 19       	stdsp	sp[0x4],r9
80005cfc:	a1 b5       	sbr	r5,0x1
80005cfe:	50 0e       	stdsp	sp[0x0],lr
80005d00:	50 dc       	stdsp	sp[0x34],r12
80005d02:	30 28       	mov	r8,2
80005d04:	37 80       	mov	r0,120
80005d06:	e0 8f 02 a3 	bral	8000624c <_vfprintf_r+0x154c>
80005d0a:	50 a7       	stdsp	sp[0x28],r7
80005d0c:	50 80       	stdsp	sp[0x20],r0
80005d0e:	10 90       	mov	r0,r8
80005d10:	30 08       	mov	r8,0
80005d12:	fb 68 06 bb 	st.b	sp[1723],r8
80005d16:	0c 97       	mov	r7,r6
80005d18:	04 94       	mov	r4,r2
80005d1a:	06 96       	mov	r6,r3
80005d1c:	02 92       	mov	r2,r1
80005d1e:	40 93       	lddsp	r3,sp[0x24]
80005d20:	40 41       	lddsp	r1,sp[0x10]
80005d22:	0e 99       	mov	r9,r7
80005d24:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005d28:	40 3b       	lddsp	r11,sp[0xc]
80005d2a:	58 0b       	cp.w	r11,0
80005d2c:	c1 d0       	breq	80005d66 <_vfprintf_r+0x1066>
80005d2e:	10 36       	cp.w	r6,r8
80005d30:	c0 64       	brge	80005d3c <_vfprintf_r+0x103c>
80005d32:	fa ca f9 44 	sub	r10,sp,-1724
80005d36:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005d3a:	c1 d8       	rjmp	80005d74 <_vfprintf_r+0x1074>
80005d3c:	fa c8 f9 50 	sub	r8,sp,-1712
80005d40:	1a d8       	st.w	--sp,r8
80005d42:	fa c8 fa b8 	sub	r8,sp,-1352
80005d46:	1a d8       	st.w	--sp,r8
80005d48:	fa c8 fb b4 	sub	r8,sp,-1100
80005d4c:	0c 9b       	mov	r11,r6
80005d4e:	1a d8       	st.w	--sp,r8
80005d50:	04 9a       	mov	r10,r2
80005d52:	fa c8 f9 40 	sub	r8,sp,-1728
80005d56:	fa c9 ff b4 	sub	r9,sp,-76
80005d5a:	08 9c       	mov	r12,r4
80005d5c:	fe b0 f6 36 	rcall	800049c8 <get_arg>
80005d60:	2f dd       	sub	sp,-12
80005d62:	78 06       	ld.w	r6,r12[0x0]
80005d64:	c2 08       	rjmp	80005da4 <_vfprintf_r+0x10a4>
80005d66:	2f f7       	sub	r7,-1
80005d68:	10 39       	cp.w	r9,r8
80005d6a:	c0 84       	brge	80005d7a <_vfprintf_r+0x107a>
80005d6c:	fa c9 f9 44 	sub	r9,sp,-1724
80005d70:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005d74:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005d78:	c1 68       	rjmp	80005da4 <_vfprintf_r+0x10a4>
80005d7a:	41 09       	lddsp	r9,sp[0x40]
80005d7c:	59 f8       	cp.w	r8,31
80005d7e:	e0 89 00 10 	brgt	80005d9e <_vfprintf_r+0x109e>
80005d82:	f2 ca ff fc 	sub	r10,r9,-4
80005d86:	51 0a       	stdsp	sp[0x40],r10
80005d88:	72 06       	ld.w	r6,r9[0x0]
80005d8a:	fa ce f9 44 	sub	lr,sp,-1724
80005d8e:	fc 08 00 39 	add	r9,lr,r8<<0x3
80005d92:	f3 46 fd 88 	st.w	r9[-632],r6
80005d96:	2f f8       	sub	r8,-1
80005d98:	fb 48 06 b4 	st.w	sp[1716],r8
80005d9c:	c0 48       	rjmp	80005da4 <_vfprintf_r+0x10a4>
80005d9e:	72 06       	ld.w	r6,r9[0x0]
80005da0:	2f c9       	sub	r9,-4
80005da2:	51 09       	stdsp	sp[0x40],r9
80005da4:	40 2c       	lddsp	r12,sp[0x8]
80005da6:	58 0c       	cp.w	r12,0
80005da8:	c1 05       	brlt	80005dc8 <_vfprintf_r+0x10c8>
80005daa:	18 9a       	mov	r10,r12
80005dac:	30 0b       	mov	r11,0
80005dae:	0c 9c       	mov	r12,r6
80005db0:	e0 a0 1f a4 	rcall	80009cf8 <memchr>
80005db4:	e0 80 02 df 	breq	80006372 <_vfprintf_r+0x1672>
80005db8:	f8 06 01 02 	sub	r2,r12,r6
80005dbc:	40 2b       	lddsp	r11,sp[0x8]
80005dbe:	16 32       	cp.w	r2,r11
80005dc0:	e0 89 02 d9 	brgt	80006372 <_vfprintf_r+0x1672>
80005dc4:	e0 8f 02 d4 	bral	8000636c <_vfprintf_r+0x166c>
80005dc8:	30 0a       	mov	r10,0
80005dca:	0c 9c       	mov	r12,r6
80005dcc:	50 2a       	stdsp	sp[0x8],r10
80005dce:	e0 a0 26 83 	rcall	8000aad4 <strlen>
80005dd2:	18 92       	mov	r2,r12
80005dd4:	e0 8f 02 d2 	bral	80006378 <_vfprintf_r+0x1678>
80005dd8:	50 a7       	stdsp	sp[0x28],r7
80005dda:	50 80       	stdsp	sp[0x20],r0
80005ddc:	0c 97       	mov	r7,r6
80005dde:	04 94       	mov	r4,r2
80005de0:	06 96       	mov	r6,r3
80005de2:	02 92       	mov	r2,r1
80005de4:	40 93       	lddsp	r3,sp[0x24]
80005de6:	10 90       	mov	r0,r8
80005de8:	40 41       	lddsp	r1,sp[0x10]
80005dea:	a5 a5       	sbr	r5,0x4
80005dec:	c0 a8       	rjmp	80005e00 <_vfprintf_r+0x1100>
80005dee:	50 a7       	stdsp	sp[0x28],r7
80005df0:	50 80       	stdsp	sp[0x20],r0
80005df2:	0c 97       	mov	r7,r6
80005df4:	04 94       	mov	r4,r2
80005df6:	06 96       	mov	r6,r3
80005df8:	02 92       	mov	r2,r1
80005dfa:	40 93       	lddsp	r3,sp[0x24]
80005dfc:	10 90       	mov	r0,r8
80005dfe:	40 41       	lddsp	r1,sp[0x10]
80005e00:	ed b5 00 05 	bld	r5,0x5
80005e04:	c5 61       	brne	80005eb0 <_vfprintf_r+0x11b0>
80005e06:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005e0a:	40 39       	lddsp	r9,sp[0xc]
80005e0c:	58 09       	cp.w	r9,0
80005e0e:	c2 10       	breq	80005e50 <_vfprintf_r+0x1150>
80005e10:	10 36       	cp.w	r6,r8
80005e12:	c0 74       	brge	80005e20 <_vfprintf_r+0x1120>
80005e14:	fa c8 f9 44 	sub	r8,sp,-1724
80005e18:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005e1c:	c2 38       	rjmp	80005e62 <_vfprintf_r+0x1162>
80005e1e:	d7 03       	nop
80005e20:	fa c8 f9 50 	sub	r8,sp,-1712
80005e24:	1a d8       	st.w	--sp,r8
80005e26:	fa c8 fa b8 	sub	r8,sp,-1352
80005e2a:	1a d8       	st.w	--sp,r8
80005e2c:	fa c8 fb b4 	sub	r8,sp,-1100
80005e30:	1a d8       	st.w	--sp,r8
80005e32:	fa c8 f9 40 	sub	r8,sp,-1728
80005e36:	fa c9 ff b4 	sub	r9,sp,-76
80005e3a:	04 9a       	mov	r10,r2
80005e3c:	0c 9b       	mov	r11,r6
80005e3e:	08 9c       	mov	r12,r4
80005e40:	fe b0 f5 c4 	rcall	800049c8 <get_arg>
80005e44:	2f dd       	sub	sp,-12
80005e46:	f8 e8 00 00 	ld.d	r8,r12[0]
80005e4a:	fa e9 00 00 	st.d	sp[0],r8
80005e4e:	c2 e8       	rjmp	80005eaa <_vfprintf_r+0x11aa>
80005e50:	ee ca ff ff 	sub	r10,r7,-1
80005e54:	10 37       	cp.w	r7,r8
80005e56:	c0 b4       	brge	80005e6c <_vfprintf_r+0x116c>
80005e58:	fa c8 f9 44 	sub	r8,sp,-1724
80005e5c:	14 97       	mov	r7,r10
80005e5e:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005e62:	ec ea fd 88 	ld.d	r10,r6[-632]
80005e66:	fa eb 00 00 	st.d	sp[0],r10
80005e6a:	c2 08       	rjmp	80005eaa <_vfprintf_r+0x11aa>
80005e6c:	41 09       	lddsp	r9,sp[0x40]
80005e6e:	59 f8       	cp.w	r8,31
80005e70:	e0 89 00 16 	brgt	80005e9c <_vfprintf_r+0x119c>
80005e74:	f2 e6 00 00 	ld.d	r6,r9[0]
80005e78:	f2 cb ff f8 	sub	r11,r9,-8
80005e7c:	fa e7 00 00 	st.d	sp[0],r6
80005e80:	51 0b       	stdsp	sp[0x40],r11
80005e82:	fa c6 f9 44 	sub	r6,sp,-1724
80005e86:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005e8a:	fa e6 00 00 	ld.d	r6,sp[0]
80005e8e:	f2 e7 fd 88 	st.d	r9[-632],r6
80005e92:	2f f8       	sub	r8,-1
80005e94:	14 97       	mov	r7,r10
80005e96:	fb 48 06 b4 	st.w	sp[1716],r8
80005e9a:	c0 88       	rjmp	80005eaa <_vfprintf_r+0x11aa>
80005e9c:	f2 e6 00 00 	ld.d	r6,r9[0]
80005ea0:	2f 89       	sub	r9,-8
80005ea2:	fa e7 00 00 	st.d	sp[0],r6
80005ea6:	51 09       	stdsp	sp[0x40],r9
80005ea8:	14 97       	mov	r7,r10
80005eaa:	30 18       	mov	r8,1
80005eac:	e0 8f 01 d0 	bral	8000624c <_vfprintf_r+0x154c>
80005eb0:	ed b5 00 04 	bld	r5,0x4
80005eb4:	c1 61       	brne	80005ee0 <_vfprintf_r+0x11e0>
80005eb6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005eba:	40 3e       	lddsp	lr,sp[0xc]
80005ebc:	58 0e       	cp.w	lr,0
80005ebe:	c0 80       	breq	80005ece <_vfprintf_r+0x11ce>
80005ec0:	10 36       	cp.w	r6,r8
80005ec2:	c6 74       	brge	80005f90 <_vfprintf_r+0x1290>
80005ec4:	fa cc f9 44 	sub	r12,sp,-1724
80005ec8:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005ecc:	c8 08       	rjmp	80005fcc <_vfprintf_r+0x12cc>
80005ece:	ee ca ff ff 	sub	r10,r7,-1
80005ed2:	10 37       	cp.w	r7,r8
80005ed4:	c7 f4       	brge	80005fd2 <_vfprintf_r+0x12d2>
80005ed6:	fa cb f9 44 	sub	r11,sp,-1724
80005eda:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005ede:	c7 68       	rjmp	80005fca <_vfprintf_r+0x12ca>
80005ee0:	ed b5 00 06 	bld	r5,0x6
80005ee4:	c4 a1       	brne	80005f78 <_vfprintf_r+0x1278>
80005ee6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005eea:	40 3c       	lddsp	r12,sp[0xc]
80005eec:	58 0c       	cp.w	r12,0
80005eee:	c1 d0       	breq	80005f28 <_vfprintf_r+0x1228>
80005ef0:	10 36       	cp.w	r6,r8
80005ef2:	c0 64       	brge	80005efe <_vfprintf_r+0x11fe>
80005ef4:	fa cb f9 44 	sub	r11,sp,-1724
80005ef8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005efc:	c1 f8       	rjmp	80005f3a <_vfprintf_r+0x123a>
80005efe:	fa c8 f9 50 	sub	r8,sp,-1712
80005f02:	1a d8       	st.w	--sp,r8
80005f04:	fa c8 fa b8 	sub	r8,sp,-1352
80005f08:	1a d8       	st.w	--sp,r8
80005f0a:	fa c8 fb b4 	sub	r8,sp,-1100
80005f0e:	1a d8       	st.w	--sp,r8
80005f10:	fa c8 f9 40 	sub	r8,sp,-1728
80005f14:	fa c9 ff b4 	sub	r9,sp,-76
80005f18:	04 9a       	mov	r10,r2
80005f1a:	0c 9b       	mov	r11,r6
80005f1c:	08 9c       	mov	r12,r4
80005f1e:	fe b0 f5 55 	rcall	800049c8 <get_arg>
80005f22:	2f dd       	sub	sp,-12
80005f24:	98 18       	ld.sh	r8,r12[0x2]
80005f26:	c2 68       	rjmp	80005f72 <_vfprintf_r+0x1272>
80005f28:	ee ca ff ff 	sub	r10,r7,-1
80005f2c:	10 37       	cp.w	r7,r8
80005f2e:	c0 94       	brge	80005f40 <_vfprintf_r+0x1240>
80005f30:	fa c9 f9 44 	sub	r9,sp,-1724
80005f34:	14 97       	mov	r7,r10
80005f36:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005f3a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005f3e:	c1 a8       	rjmp	80005f72 <_vfprintf_r+0x1272>
80005f40:	41 09       	lddsp	r9,sp[0x40]
80005f42:	59 f8       	cp.w	r8,31
80005f44:	e0 89 00 13 	brgt	80005f6a <_vfprintf_r+0x126a>
80005f48:	f2 cb ff fc 	sub	r11,r9,-4
80005f4c:	51 0b       	stdsp	sp[0x40],r11
80005f4e:	72 09       	ld.w	r9,r9[0x0]
80005f50:	fa c6 f9 44 	sub	r6,sp,-1724
80005f54:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005f58:	2f f8       	sub	r8,-1
80005f5a:	f7 49 fd 88 	st.w	r11[-632],r9
80005f5e:	fb 48 06 b4 	st.w	sp[1716],r8
80005f62:	14 97       	mov	r7,r10
80005f64:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005f68:	c0 58       	rjmp	80005f72 <_vfprintf_r+0x1272>
80005f6a:	92 18       	ld.sh	r8,r9[0x2]
80005f6c:	14 97       	mov	r7,r10
80005f6e:	2f c9       	sub	r9,-4
80005f70:	51 09       	stdsp	sp[0x40],r9
80005f72:	5c 78       	castu.h	r8
80005f74:	50 18       	stdsp	sp[0x4],r8
80005f76:	c4 68       	rjmp	80006002 <_vfprintf_r+0x1302>
80005f78:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005f7c:	40 3c       	lddsp	r12,sp[0xc]
80005f7e:	58 0c       	cp.w	r12,0
80005f80:	c1 d0       	breq	80005fba <_vfprintf_r+0x12ba>
80005f82:	10 36       	cp.w	r6,r8
80005f84:	c0 64       	brge	80005f90 <_vfprintf_r+0x1290>
80005f86:	fa cb f9 44 	sub	r11,sp,-1724
80005f8a:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005f8e:	c1 f8       	rjmp	80005fcc <_vfprintf_r+0x12cc>
80005f90:	fa c8 f9 50 	sub	r8,sp,-1712
80005f94:	1a d8       	st.w	--sp,r8
80005f96:	fa c8 fa b8 	sub	r8,sp,-1352
80005f9a:	0c 9b       	mov	r11,r6
80005f9c:	1a d8       	st.w	--sp,r8
80005f9e:	fa c8 fb b4 	sub	r8,sp,-1100
80005fa2:	04 9a       	mov	r10,r2
80005fa4:	1a d8       	st.w	--sp,r8
80005fa6:	08 9c       	mov	r12,r4
80005fa8:	fa c8 f9 40 	sub	r8,sp,-1728
80005fac:	fa c9 ff b4 	sub	r9,sp,-76
80005fb0:	fe b0 f5 0c 	rcall	800049c8 <get_arg>
80005fb4:	2f dd       	sub	sp,-12
80005fb6:	78 0b       	ld.w	r11,r12[0x0]
80005fb8:	c2 48       	rjmp	80006000 <_vfprintf_r+0x1300>
80005fba:	ee ca ff ff 	sub	r10,r7,-1
80005fbe:	10 37       	cp.w	r7,r8
80005fc0:	c0 94       	brge	80005fd2 <_vfprintf_r+0x12d2>
80005fc2:	fa c9 f9 44 	sub	r9,sp,-1724
80005fc6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005fca:	14 97       	mov	r7,r10
80005fcc:	ec fb fd 88 	ld.w	r11,r6[-632]
80005fd0:	c1 88       	rjmp	80006000 <_vfprintf_r+0x1300>
80005fd2:	41 09       	lddsp	r9,sp[0x40]
80005fd4:	59 f8       	cp.w	r8,31
80005fd6:	e0 89 00 11 	brgt	80005ff8 <_vfprintf_r+0x12f8>
80005fda:	f2 cb ff fc 	sub	r11,r9,-4
80005fde:	51 0b       	stdsp	sp[0x40],r11
80005fe0:	fa c6 f9 44 	sub	r6,sp,-1724
80005fe4:	72 0b       	ld.w	r11,r9[0x0]
80005fe6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005fea:	f3 4b fd 88 	st.w	r9[-632],r11
80005fee:	2f f8       	sub	r8,-1
80005ff0:	14 97       	mov	r7,r10
80005ff2:	fb 48 06 b4 	st.w	sp[1716],r8
80005ff6:	c0 58       	rjmp	80006000 <_vfprintf_r+0x1300>
80005ff8:	72 0b       	ld.w	r11,r9[0x0]
80005ffa:	14 97       	mov	r7,r10
80005ffc:	2f c9       	sub	r9,-4
80005ffe:	51 09       	stdsp	sp[0x40],r9
80006000:	50 1b       	stdsp	sp[0x4],r11
80006002:	30 0e       	mov	lr,0
80006004:	30 18       	mov	r8,1
80006006:	50 0e       	stdsp	sp[0x0],lr
80006008:	c2 29       	rjmp	8000624c <_vfprintf_r+0x154c>
8000600a:	50 a7       	stdsp	sp[0x28],r7
8000600c:	50 80       	stdsp	sp[0x20],r0
8000600e:	0c 97       	mov	r7,r6
80006010:	04 94       	mov	r4,r2
80006012:	06 96       	mov	r6,r3
80006014:	02 92       	mov	r2,r1
80006016:	fe cc 83 ca 	sub	r12,pc,-31798
8000601a:	40 93       	lddsp	r3,sp[0x24]
8000601c:	10 90       	mov	r0,r8
8000601e:	40 41       	lddsp	r1,sp[0x10]
80006020:	50 dc       	stdsp	sp[0x34],r12
80006022:	ed b5 00 05 	bld	r5,0x5
80006026:	c5 51       	brne	800060d0 <_vfprintf_r+0x13d0>
80006028:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000602c:	40 3b       	lddsp	r11,sp[0xc]
8000602e:	58 0b       	cp.w	r11,0
80006030:	c2 20       	breq	80006074 <_vfprintf_r+0x1374>
80006032:	10 36       	cp.w	r6,r8
80006034:	c0 a4       	brge	80006048 <_vfprintf_r+0x1348>
80006036:	fa ca f9 44 	sub	r10,sp,-1724
8000603a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000603e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80006042:	fa e9 00 00 	st.d	sp[0],r8
80006046:	cf 28       	rjmp	8000622a <_vfprintf_r+0x152a>
80006048:	fa c8 f9 50 	sub	r8,sp,-1712
8000604c:	1a d8       	st.w	--sp,r8
8000604e:	fa c8 fa b8 	sub	r8,sp,-1352
80006052:	04 9a       	mov	r10,r2
80006054:	1a d8       	st.w	--sp,r8
80006056:	0c 9b       	mov	r11,r6
80006058:	fa c8 fb b4 	sub	r8,sp,-1100
8000605c:	08 9c       	mov	r12,r4
8000605e:	1a d8       	st.w	--sp,r8
80006060:	fa c8 f9 40 	sub	r8,sp,-1728
80006064:	fa c9 ff b4 	sub	r9,sp,-76
80006068:	fe b0 f4 b0 	rcall	800049c8 <get_arg>
8000606c:	2f dd       	sub	sp,-12
8000606e:	f8 ea 00 00 	ld.d	r10,r12[0]
80006072:	c0 c8       	rjmp	8000608a <_vfprintf_r+0x138a>
80006074:	ee ca ff ff 	sub	r10,r7,-1
80006078:	10 37       	cp.w	r7,r8
8000607a:	c0 b4       	brge	80006090 <_vfprintf_r+0x1390>
8000607c:	fa c9 f9 44 	sub	r9,sp,-1724
80006080:	14 97       	mov	r7,r10
80006082:	f2 06 00 36 	add	r6,r9,r6<<0x3
80006086:	ec ea fd 88 	ld.d	r10,r6[-632]
8000608a:	fa eb 00 00 	st.d	sp[0],r10
8000608e:	cc e8       	rjmp	8000622a <_vfprintf_r+0x152a>
80006090:	41 09       	lddsp	r9,sp[0x40]
80006092:	59 f8       	cp.w	r8,31
80006094:	e0 89 00 16 	brgt	800060c0 <_vfprintf_r+0x13c0>
80006098:	f2 e6 00 00 	ld.d	r6,r9[0]
8000609c:	f2 cb ff f8 	sub	r11,r9,-8
800060a0:	fa e7 00 00 	st.d	sp[0],r6
800060a4:	51 0b       	stdsp	sp[0x40],r11
800060a6:	fa c6 f9 44 	sub	r6,sp,-1724
800060aa:	ec 08 00 39 	add	r9,r6,r8<<0x3
800060ae:	fa e6 00 00 	ld.d	r6,sp[0]
800060b2:	f2 e7 fd 88 	st.d	r9[-632],r6
800060b6:	2f f8       	sub	r8,-1
800060b8:	14 97       	mov	r7,r10
800060ba:	fb 48 06 b4 	st.w	sp[1716],r8
800060be:	cb 68       	rjmp	8000622a <_vfprintf_r+0x152a>
800060c0:	f2 e6 00 00 	ld.d	r6,r9[0]
800060c4:	2f 89       	sub	r9,-8
800060c6:	fa e7 00 00 	st.d	sp[0],r6
800060ca:	51 09       	stdsp	sp[0x40],r9
800060cc:	14 97       	mov	r7,r10
800060ce:	ca e8       	rjmp	8000622a <_vfprintf_r+0x152a>
800060d0:	ed b5 00 04 	bld	r5,0x4
800060d4:	c1 71       	brne	80006102 <_vfprintf_r+0x1402>
800060d6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800060da:	40 3e       	lddsp	lr,sp[0xc]
800060dc:	58 0e       	cp.w	lr,0
800060de:	c0 80       	breq	800060ee <_vfprintf_r+0x13ee>
800060e0:	10 36       	cp.w	r6,r8
800060e2:	c6 94       	brge	800061b4 <_vfprintf_r+0x14b4>
800060e4:	fa cc f9 44 	sub	r12,sp,-1724
800060e8:	f8 06 00 36 	add	r6,r12,r6<<0x3
800060ec:	c8 28       	rjmp	800061f0 <_vfprintf_r+0x14f0>
800060ee:	ee ca ff ff 	sub	r10,r7,-1
800060f2:	10 37       	cp.w	r7,r8
800060f4:	e0 84 00 81 	brge	800061f6 <_vfprintf_r+0x14f6>
800060f8:	fa cb f9 44 	sub	r11,sp,-1724
800060fc:	f6 06 00 36 	add	r6,r11,r6<<0x3
80006100:	c7 78       	rjmp	800061ee <_vfprintf_r+0x14ee>
80006102:	ed b5 00 06 	bld	r5,0x6
80006106:	c4 b1       	brne	8000619c <_vfprintf_r+0x149c>
80006108:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000610c:	40 3c       	lddsp	r12,sp[0xc]
8000610e:	58 0c       	cp.w	r12,0
80006110:	c1 d0       	breq	8000614a <_vfprintf_r+0x144a>
80006112:	10 36       	cp.w	r6,r8
80006114:	c0 64       	brge	80006120 <_vfprintf_r+0x1420>
80006116:	fa cb f9 44 	sub	r11,sp,-1724
8000611a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000611e:	c1 f8       	rjmp	8000615c <_vfprintf_r+0x145c>
80006120:	fa c8 f9 50 	sub	r8,sp,-1712
80006124:	1a d8       	st.w	--sp,r8
80006126:	fa c8 fa b8 	sub	r8,sp,-1352
8000612a:	1a d8       	st.w	--sp,r8
8000612c:	fa c8 fb b4 	sub	r8,sp,-1100
80006130:	1a d8       	st.w	--sp,r8
80006132:	fa c8 f9 40 	sub	r8,sp,-1728
80006136:	fa c9 ff b4 	sub	r9,sp,-76
8000613a:	04 9a       	mov	r10,r2
8000613c:	0c 9b       	mov	r11,r6
8000613e:	08 9c       	mov	r12,r4
80006140:	fe b0 f4 44 	rcall	800049c8 <get_arg>
80006144:	2f dd       	sub	sp,-12
80006146:	98 18       	ld.sh	r8,r12[0x2]
80006148:	c2 78       	rjmp	80006196 <_vfprintf_r+0x1496>
8000614a:	ee ca ff ff 	sub	r10,r7,-1
8000614e:	10 37       	cp.w	r7,r8
80006150:	c0 a4       	brge	80006164 <_vfprintf_r+0x1464>
80006152:	fa c9 f9 44 	sub	r9,sp,-1724
80006156:	14 97       	mov	r7,r10
80006158:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000615c:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80006160:	c1 b8       	rjmp	80006196 <_vfprintf_r+0x1496>
80006162:	d7 03       	nop
80006164:	41 09       	lddsp	r9,sp[0x40]
80006166:	59 f8       	cp.w	r8,31
80006168:	e0 89 00 13 	brgt	8000618e <_vfprintf_r+0x148e>
8000616c:	f2 cb ff fc 	sub	r11,r9,-4
80006170:	51 0b       	stdsp	sp[0x40],r11
80006172:	72 09       	ld.w	r9,r9[0x0]
80006174:	fa c6 f9 44 	sub	r6,sp,-1724
80006178:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000617c:	2f f8       	sub	r8,-1
8000617e:	f7 49 fd 88 	st.w	r11[-632],r9
80006182:	fb 48 06 b4 	st.w	sp[1716],r8
80006186:	14 97       	mov	r7,r10
80006188:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000618c:	c0 58       	rjmp	80006196 <_vfprintf_r+0x1496>
8000618e:	92 18       	ld.sh	r8,r9[0x2]
80006190:	14 97       	mov	r7,r10
80006192:	2f c9       	sub	r9,-4
80006194:	51 09       	stdsp	sp[0x40],r9
80006196:	5c 78       	castu.h	r8
80006198:	50 18       	stdsp	sp[0x4],r8
8000619a:	c4 68       	rjmp	80006226 <_vfprintf_r+0x1526>
8000619c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800061a0:	40 3c       	lddsp	r12,sp[0xc]
800061a2:	58 0c       	cp.w	r12,0
800061a4:	c1 d0       	breq	800061de <_vfprintf_r+0x14de>
800061a6:	10 36       	cp.w	r6,r8
800061a8:	c0 64       	brge	800061b4 <_vfprintf_r+0x14b4>
800061aa:	fa cb f9 44 	sub	r11,sp,-1724
800061ae:	f6 06 00 36 	add	r6,r11,r6<<0x3
800061b2:	c1 f8       	rjmp	800061f0 <_vfprintf_r+0x14f0>
800061b4:	fa c8 f9 50 	sub	r8,sp,-1712
800061b8:	1a d8       	st.w	--sp,r8
800061ba:	fa c8 fa b8 	sub	r8,sp,-1352
800061be:	0c 9b       	mov	r11,r6
800061c0:	1a d8       	st.w	--sp,r8
800061c2:	fa c8 fb b4 	sub	r8,sp,-1100
800061c6:	04 9a       	mov	r10,r2
800061c8:	1a d8       	st.w	--sp,r8
800061ca:	08 9c       	mov	r12,r4
800061cc:	fa c8 f9 40 	sub	r8,sp,-1728
800061d0:	fa c9 ff b4 	sub	r9,sp,-76
800061d4:	fe b0 f3 fa 	rcall	800049c8 <get_arg>
800061d8:	2f dd       	sub	sp,-12
800061da:	78 0b       	ld.w	r11,r12[0x0]
800061dc:	c2 48       	rjmp	80006224 <_vfprintf_r+0x1524>
800061de:	ee ca ff ff 	sub	r10,r7,-1
800061e2:	10 37       	cp.w	r7,r8
800061e4:	c0 94       	brge	800061f6 <_vfprintf_r+0x14f6>
800061e6:	fa c9 f9 44 	sub	r9,sp,-1724
800061ea:	f2 06 00 36 	add	r6,r9,r6<<0x3
800061ee:	14 97       	mov	r7,r10
800061f0:	ec fb fd 88 	ld.w	r11,r6[-632]
800061f4:	c1 88       	rjmp	80006224 <_vfprintf_r+0x1524>
800061f6:	41 09       	lddsp	r9,sp[0x40]
800061f8:	59 f8       	cp.w	r8,31
800061fa:	e0 89 00 11 	brgt	8000621c <_vfprintf_r+0x151c>
800061fe:	f2 cb ff fc 	sub	r11,r9,-4
80006202:	51 0b       	stdsp	sp[0x40],r11
80006204:	fa c6 f9 44 	sub	r6,sp,-1724
80006208:	72 0b       	ld.w	r11,r9[0x0]
8000620a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000620e:	f3 4b fd 88 	st.w	r9[-632],r11
80006212:	2f f8       	sub	r8,-1
80006214:	14 97       	mov	r7,r10
80006216:	fb 48 06 b4 	st.w	sp[1716],r8
8000621a:	c0 58       	rjmp	80006224 <_vfprintf_r+0x1524>
8000621c:	72 0b       	ld.w	r11,r9[0x0]
8000621e:	14 97       	mov	r7,r10
80006220:	2f c9       	sub	r9,-4
80006222:	51 09       	stdsp	sp[0x40],r9
80006224:	50 1b       	stdsp	sp[0x4],r11
80006226:	30 0e       	mov	lr,0
80006228:	50 0e       	stdsp	sp[0x0],lr
8000622a:	40 08       	lddsp	r8,sp[0x0]
8000622c:	40 1c       	lddsp	r12,sp[0x4]
8000622e:	18 48       	or	r8,r12
80006230:	5f 19       	srne	r9
80006232:	0a 98       	mov	r8,r5
80006234:	eb e9 00 09 	and	r9,r5,r9
80006238:	a1 b8       	sbr	r8,0x1
8000623a:	58 09       	cp.w	r9,0
8000623c:	c0 70       	breq	8000624a <_vfprintf_r+0x154a>
8000623e:	10 95       	mov	r5,r8
80006240:	fb 60 06 b9 	st.b	sp[1721],r0
80006244:	33 08       	mov	r8,48
80006246:	fb 68 06 b8 	st.b	sp[1720],r8
8000624a:	30 28       	mov	r8,2
8000624c:	30 09       	mov	r9,0
8000624e:	fb 69 06 bb 	st.b	sp[1723],r9
80006252:	0a 99       	mov	r9,r5
80006254:	a7 d9       	cbr	r9,0x7
80006256:	40 2b       	lddsp	r11,sp[0x8]
80006258:	40 16       	lddsp	r6,sp[0x4]
8000625a:	58 0b       	cp.w	r11,0
8000625c:	5f 1a       	srne	r10
8000625e:	f2 05 17 40 	movge	r5,r9
80006262:	fa c2 f9 78 	sub	r2,sp,-1672
80006266:	40 09       	lddsp	r9,sp[0x0]
80006268:	0c 49       	or	r9,r6
8000626a:	5f 19       	srne	r9
8000626c:	f5 e9 10 09 	or	r9,r10,r9
80006270:	c5 c0       	breq	80006328 <_vfprintf_r+0x1628>
80006272:	30 19       	mov	r9,1
80006274:	f2 08 18 00 	cp.b	r8,r9
80006278:	c0 60       	breq	80006284 <_vfprintf_r+0x1584>
8000627a:	30 29       	mov	r9,2
8000627c:	f2 08 18 00 	cp.b	r8,r9
80006280:	c0 41       	brne	80006288 <_vfprintf_r+0x1588>
80006282:	c3 c8       	rjmp	800062fa <_vfprintf_r+0x15fa>
80006284:	04 96       	mov	r6,r2
80006286:	c3 08       	rjmp	800062e6 <_vfprintf_r+0x15e6>
80006288:	04 96       	mov	r6,r2
8000628a:	fa e8 00 00 	ld.d	r8,sp[0]
8000628e:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80006292:	2d 0a       	sub	r10,-48
80006294:	0c fa       	st.b	--r6,r10
80006296:	f0 0b 16 03 	lsr	r11,r8,0x3
8000629a:	f2 0c 16 03 	lsr	r12,r9,0x3
8000629e:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
800062a2:	18 99       	mov	r9,r12
800062a4:	16 98       	mov	r8,r11
800062a6:	58 08       	cp.w	r8,0
800062a8:	5c 29       	cpc	r9
800062aa:	cf 21       	brne	8000628e <_vfprintf_r+0x158e>
800062ac:	fa e9 00 00 	st.d	sp[0],r8
800062b0:	ed b5 00 00 	bld	r5,0x0
800062b4:	c4 51       	brne	8000633e <_vfprintf_r+0x163e>
800062b6:	33 09       	mov	r9,48
800062b8:	f2 0a 18 00 	cp.b	r10,r9
800062bc:	c4 10       	breq	8000633e <_vfprintf_r+0x163e>
800062be:	0c f9       	st.b	--r6,r9
800062c0:	c3 f8       	rjmp	8000633e <_vfprintf_r+0x163e>
800062c2:	fa ea 00 00 	ld.d	r10,sp[0]
800062c6:	30 a8       	mov	r8,10
800062c8:	30 09       	mov	r9,0
800062ca:	e0 a0 38 6e 	rcall	8000d3a6 <__avr32_umod64>
800062ce:	30 a8       	mov	r8,10
800062d0:	2d 0a       	sub	r10,-48
800062d2:	30 09       	mov	r9,0
800062d4:	ac 8a       	st.b	r6[0x0],r10
800062d6:	fa ea 00 00 	ld.d	r10,sp[0]
800062da:	e0 a0 37 34 	rcall	8000d142 <__avr32_udiv64>
800062de:	16 99       	mov	r9,r11
800062e0:	14 98       	mov	r8,r10
800062e2:	fa e9 00 00 	st.d	sp[0],r8
800062e6:	20 16       	sub	r6,1
800062e8:	fa ea 00 00 	ld.d	r10,sp[0]
800062ec:	58 9a       	cp.w	r10,9
800062ee:	5c 2b       	cpc	r11
800062f0:	fe 9b ff e9 	brhi	800062c2 <_vfprintf_r+0x15c2>
800062f4:	1b f8       	ld.ub	r8,sp[0x7]
800062f6:	2d 08       	sub	r8,-48
800062f8:	c2 08       	rjmp	80006338 <_vfprintf_r+0x1638>
800062fa:	04 96       	mov	r6,r2
800062fc:	fa e8 00 00 	ld.d	r8,sp[0]
80006300:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80006304:	40 de       	lddsp	lr,sp[0x34]
80006306:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000630a:	0c fa       	st.b	--r6,r10
8000630c:	f2 0b 16 04 	lsr	r11,r9,0x4
80006310:	f0 0a 16 04 	lsr	r10,r8,0x4
80006314:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80006318:	16 99       	mov	r9,r11
8000631a:	14 98       	mov	r8,r10
8000631c:	58 08       	cp.w	r8,0
8000631e:	5c 29       	cpc	r9
80006320:	cf 01       	brne	80006300 <_vfprintf_r+0x1600>
80006322:	fa e9 00 00 	st.d	sp[0],r8
80006326:	c0 c8       	rjmp	8000633e <_vfprintf_r+0x163e>
80006328:	58 08       	cp.w	r8,0
8000632a:	c0 91       	brne	8000633c <_vfprintf_r+0x163c>
8000632c:	ed b5 00 00 	bld	r5,0x0
80006330:	c0 61       	brne	8000633c <_vfprintf_r+0x163c>
80006332:	fa c6 f9 79 	sub	r6,sp,-1671
80006336:	33 08       	mov	r8,48
80006338:	ac 88       	st.b	r6[0x0],r8
8000633a:	c0 28       	rjmp	8000633e <_vfprintf_r+0x163e>
8000633c:	04 96       	mov	r6,r2
8000633e:	0c 12       	sub	r2,r6
80006340:	c1 c8       	rjmp	80006378 <_vfprintf_r+0x1678>
80006342:	50 a7       	stdsp	sp[0x28],r7
80006344:	50 80       	stdsp	sp[0x20],r0
80006346:	40 93       	lddsp	r3,sp[0x24]
80006348:	0c 97       	mov	r7,r6
8000634a:	10 90       	mov	r0,r8
8000634c:	04 94       	mov	r4,r2
8000634e:	40 41       	lddsp	r1,sp[0x10]
80006350:	58 08       	cp.w	r8,0
80006352:	e0 80 04 4f 	breq	80006bf0 <_vfprintf_r+0x1ef0>
80006356:	fb 68 06 60 	st.b	sp[1632],r8
8000635a:	30 0c       	mov	r12,0
8000635c:	30 08       	mov	r8,0
8000635e:	30 12       	mov	r2,1
80006360:	fb 68 06 bb 	st.b	sp[1723],r8
80006364:	50 2c       	stdsp	sp[0x8],r12
80006366:	fa c6 f9 a0 	sub	r6,sp,-1632
8000636a:	c0 78       	rjmp	80006378 <_vfprintf_r+0x1678>
8000636c:	30 0b       	mov	r11,0
8000636e:	50 2b       	stdsp	sp[0x8],r11
80006370:	c0 48       	rjmp	80006378 <_vfprintf_r+0x1678>
80006372:	40 22       	lddsp	r2,sp[0x8]
80006374:	30 0a       	mov	r10,0
80006376:	50 2a       	stdsp	sp[0x8],r10
80006378:	40 29       	lddsp	r9,sp[0x8]
8000637a:	e4 09 0c 49 	max	r9,r2,r9
8000637e:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80006382:	50 39       	stdsp	sp[0xc],r9
80006384:	0a 9e       	mov	lr,r5
80006386:	30 09       	mov	r9,0
80006388:	e2 1e 00 02 	andl	lr,0x2,COH
8000638c:	f2 08 18 00 	cp.b	r8,r9
80006390:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80006394:	f7 b8 01 ff 	subne	r8,-1
80006398:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000639c:	0a 9b       	mov	r11,r5
8000639e:	58 0e       	cp.w	lr,0
800063a0:	fb fc 10 03 	ld.wne	r12,sp[0xc]
800063a4:	f7 bc 01 fe 	subne	r12,-2
800063a8:	fb fc 1a 03 	st.wne	sp[0xc],r12
800063ac:	e2 1b 00 84 	andl	r11,0x84,COH
800063b0:	50 fe       	stdsp	sp[0x3c],lr
800063b2:	50 9b       	stdsp	sp[0x24],r11
800063b4:	c4 71       	brne	80006442 <_vfprintf_r+0x1742>
800063b6:	40 8a       	lddsp	r10,sp[0x20]
800063b8:	40 39       	lddsp	r9,sp[0xc]
800063ba:	12 1a       	sub	r10,r9
800063bc:	50 4a       	stdsp	sp[0x10],r10
800063be:	58 0a       	cp.w	r10,0
800063c0:	e0 89 00 20 	brgt	80006400 <_vfprintf_r+0x1700>
800063c4:	c3 f8       	rjmp	80006442 <_vfprintf_r+0x1742>
800063c6:	2f 09       	sub	r9,-16
800063c8:	2f f8       	sub	r8,-1
800063ca:	fe ce 87 66 	sub	lr,pc,-30874
800063ce:	31 0c       	mov	r12,16
800063d0:	fb 49 06 90 	st.w	sp[1680],r9
800063d4:	87 0e       	st.w	r3[0x0],lr
800063d6:	87 1c       	st.w	r3[0x4],r12
800063d8:	fb 48 06 8c 	st.w	sp[1676],r8
800063dc:	58 78       	cp.w	r8,7
800063de:	e0 89 00 04 	brgt	800063e6 <_vfprintf_r+0x16e6>
800063e2:	2f 83       	sub	r3,-8
800063e4:	c0 b8       	rjmp	800063fa <_vfprintf_r+0x16fa>
800063e6:	fa ca f9 78 	sub	r10,sp,-1672
800063ea:	02 9b       	mov	r11,r1
800063ec:	08 9c       	mov	r12,r4
800063ee:	fe b0 f4 7b 	rcall	80004ce4 <__sprint_r>
800063f2:	e0 81 04 10 	brne	80006c12 <_vfprintf_r+0x1f12>
800063f6:	fa c3 f9 e0 	sub	r3,sp,-1568
800063fa:	40 4b       	lddsp	r11,sp[0x10]
800063fc:	21 0b       	sub	r11,16
800063fe:	50 4b       	stdsp	sp[0x10],r11
80006400:	fa f9 06 90 	ld.w	r9,sp[1680]
80006404:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006408:	fe ca 87 a4 	sub	r10,pc,-30812
8000640c:	40 4e       	lddsp	lr,sp[0x10]
8000640e:	59 0e       	cp.w	lr,16
80006410:	fe 99 ff db 	brgt	800063c6 <_vfprintf_r+0x16c6>
80006414:	1c 09       	add	r9,lr
80006416:	2f f8       	sub	r8,-1
80006418:	87 0a       	st.w	r3[0x0],r10
8000641a:	fb 49 06 90 	st.w	sp[1680],r9
8000641e:	87 1e       	st.w	r3[0x4],lr
80006420:	fb 48 06 8c 	st.w	sp[1676],r8
80006424:	58 78       	cp.w	r8,7
80006426:	e0 89 00 04 	brgt	8000642e <_vfprintf_r+0x172e>
8000642a:	2f 83       	sub	r3,-8
8000642c:	c0 b8       	rjmp	80006442 <_vfprintf_r+0x1742>
8000642e:	fa ca f9 78 	sub	r10,sp,-1672
80006432:	02 9b       	mov	r11,r1
80006434:	08 9c       	mov	r12,r4
80006436:	fe b0 f4 57 	rcall	80004ce4 <__sprint_r>
8000643a:	e0 81 03 ec 	brne	80006c12 <_vfprintf_r+0x1f12>
8000643e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006442:	30 09       	mov	r9,0
80006444:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80006448:	f2 08 18 00 	cp.b	r8,r9
8000644c:	c1 f0       	breq	8000648a <_vfprintf_r+0x178a>
8000644e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006452:	fa c9 f9 45 	sub	r9,sp,-1723
80006456:	2f f8       	sub	r8,-1
80006458:	87 09       	st.w	r3[0x0],r9
8000645a:	fb 48 06 90 	st.w	sp[1680],r8
8000645e:	30 19       	mov	r9,1
80006460:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006464:	87 19       	st.w	r3[0x4],r9
80006466:	2f f8       	sub	r8,-1
80006468:	fb 48 06 8c 	st.w	sp[1676],r8
8000646c:	58 78       	cp.w	r8,7
8000646e:	e0 89 00 04 	brgt	80006476 <_vfprintf_r+0x1776>
80006472:	2f 83       	sub	r3,-8
80006474:	c0 b8       	rjmp	8000648a <_vfprintf_r+0x178a>
80006476:	fa ca f9 78 	sub	r10,sp,-1672
8000647a:	02 9b       	mov	r11,r1
8000647c:	08 9c       	mov	r12,r4
8000647e:	fe b0 f4 33 	rcall	80004ce4 <__sprint_r>
80006482:	e0 81 03 c8 	brne	80006c12 <_vfprintf_r+0x1f12>
80006486:	fa c3 f9 e0 	sub	r3,sp,-1568
8000648a:	40 fc       	lddsp	r12,sp[0x3c]
8000648c:	58 0c       	cp.w	r12,0
8000648e:	c1 f0       	breq	800064cc <_vfprintf_r+0x17cc>
80006490:	fa f8 06 90 	ld.w	r8,sp[1680]
80006494:	fa c9 f9 48 	sub	r9,sp,-1720
80006498:	2f e8       	sub	r8,-2
8000649a:	87 09       	st.w	r3[0x0],r9
8000649c:	fb 48 06 90 	st.w	sp[1680],r8
800064a0:	30 29       	mov	r9,2
800064a2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800064a6:	87 19       	st.w	r3[0x4],r9
800064a8:	2f f8       	sub	r8,-1
800064aa:	fb 48 06 8c 	st.w	sp[1676],r8
800064ae:	58 78       	cp.w	r8,7
800064b0:	e0 89 00 04 	brgt	800064b8 <_vfprintf_r+0x17b8>
800064b4:	2f 83       	sub	r3,-8
800064b6:	c0 b8       	rjmp	800064cc <_vfprintf_r+0x17cc>
800064b8:	fa ca f9 78 	sub	r10,sp,-1672
800064bc:	02 9b       	mov	r11,r1
800064be:	08 9c       	mov	r12,r4
800064c0:	fe b0 f4 12 	rcall	80004ce4 <__sprint_r>
800064c4:	e0 81 03 a7 	brne	80006c12 <_vfprintf_r+0x1f12>
800064c8:	fa c3 f9 e0 	sub	r3,sp,-1568
800064cc:	40 9b       	lddsp	r11,sp[0x24]
800064ce:	e0 4b 00 80 	cp.w	r11,128
800064d2:	c4 71       	brne	80006560 <_vfprintf_r+0x1860>
800064d4:	40 8a       	lddsp	r10,sp[0x20]
800064d6:	40 39       	lddsp	r9,sp[0xc]
800064d8:	12 1a       	sub	r10,r9
800064da:	50 4a       	stdsp	sp[0x10],r10
800064dc:	58 0a       	cp.w	r10,0
800064de:	e0 89 00 20 	brgt	8000651e <_vfprintf_r+0x181e>
800064e2:	c3 f8       	rjmp	80006560 <_vfprintf_r+0x1860>
800064e4:	2f 09       	sub	r9,-16
800064e6:	2f f8       	sub	r8,-1
800064e8:	fe ce 88 74 	sub	lr,pc,-30604
800064ec:	31 0c       	mov	r12,16
800064ee:	fb 49 06 90 	st.w	sp[1680],r9
800064f2:	87 0e       	st.w	r3[0x0],lr
800064f4:	87 1c       	st.w	r3[0x4],r12
800064f6:	fb 48 06 8c 	st.w	sp[1676],r8
800064fa:	58 78       	cp.w	r8,7
800064fc:	e0 89 00 04 	brgt	80006504 <_vfprintf_r+0x1804>
80006500:	2f 83       	sub	r3,-8
80006502:	c0 b8       	rjmp	80006518 <_vfprintf_r+0x1818>
80006504:	fa ca f9 78 	sub	r10,sp,-1672
80006508:	02 9b       	mov	r11,r1
8000650a:	08 9c       	mov	r12,r4
8000650c:	fe b0 f3 ec 	rcall	80004ce4 <__sprint_r>
80006510:	e0 81 03 81 	brne	80006c12 <_vfprintf_r+0x1f12>
80006514:	fa c3 f9 e0 	sub	r3,sp,-1568
80006518:	40 4b       	lddsp	r11,sp[0x10]
8000651a:	21 0b       	sub	r11,16
8000651c:	50 4b       	stdsp	sp[0x10],r11
8000651e:	fa f9 06 90 	ld.w	r9,sp[1680]
80006522:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006526:	fe ca 88 b2 	sub	r10,pc,-30542
8000652a:	40 4e       	lddsp	lr,sp[0x10]
8000652c:	59 0e       	cp.w	lr,16
8000652e:	fe 99 ff db 	brgt	800064e4 <_vfprintf_r+0x17e4>
80006532:	1c 09       	add	r9,lr
80006534:	2f f8       	sub	r8,-1
80006536:	87 0a       	st.w	r3[0x0],r10
80006538:	fb 49 06 90 	st.w	sp[1680],r9
8000653c:	87 1e       	st.w	r3[0x4],lr
8000653e:	fb 48 06 8c 	st.w	sp[1676],r8
80006542:	58 78       	cp.w	r8,7
80006544:	e0 89 00 04 	brgt	8000654c <_vfprintf_r+0x184c>
80006548:	2f 83       	sub	r3,-8
8000654a:	c0 b8       	rjmp	80006560 <_vfprintf_r+0x1860>
8000654c:	fa ca f9 78 	sub	r10,sp,-1672
80006550:	02 9b       	mov	r11,r1
80006552:	08 9c       	mov	r12,r4
80006554:	fe b0 f3 c8 	rcall	80004ce4 <__sprint_r>
80006558:	e0 81 03 5d 	brne	80006c12 <_vfprintf_r+0x1f12>
8000655c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006560:	40 2c       	lddsp	r12,sp[0x8]
80006562:	04 1c       	sub	r12,r2
80006564:	50 2c       	stdsp	sp[0x8],r12
80006566:	58 0c       	cp.w	r12,0
80006568:	e0 89 00 20 	brgt	800065a8 <_vfprintf_r+0x18a8>
8000656c:	c3 f8       	rjmp	800065ea <_vfprintf_r+0x18ea>
8000656e:	2f 09       	sub	r9,-16
80006570:	2f f8       	sub	r8,-1
80006572:	fe cb 88 fe 	sub	r11,pc,-30466
80006576:	31 0a       	mov	r10,16
80006578:	fb 49 06 90 	st.w	sp[1680],r9
8000657c:	87 0b       	st.w	r3[0x0],r11
8000657e:	87 1a       	st.w	r3[0x4],r10
80006580:	fb 48 06 8c 	st.w	sp[1676],r8
80006584:	58 78       	cp.w	r8,7
80006586:	e0 89 00 04 	brgt	8000658e <_vfprintf_r+0x188e>
8000658a:	2f 83       	sub	r3,-8
8000658c:	c0 b8       	rjmp	800065a2 <_vfprintf_r+0x18a2>
8000658e:	fa ca f9 78 	sub	r10,sp,-1672
80006592:	02 9b       	mov	r11,r1
80006594:	08 9c       	mov	r12,r4
80006596:	fe b0 f3 a7 	rcall	80004ce4 <__sprint_r>
8000659a:	e0 81 03 3c 	brne	80006c12 <_vfprintf_r+0x1f12>
8000659e:	fa c3 f9 e0 	sub	r3,sp,-1568
800065a2:	40 29       	lddsp	r9,sp[0x8]
800065a4:	21 09       	sub	r9,16
800065a6:	50 29       	stdsp	sp[0x8],r9
800065a8:	fa f9 06 90 	ld.w	r9,sp[1680]
800065ac:	fa f8 06 8c 	ld.w	r8,sp[1676]
800065b0:	fe ca 89 3c 	sub	r10,pc,-30404
800065b4:	40 2e       	lddsp	lr,sp[0x8]
800065b6:	59 0e       	cp.w	lr,16
800065b8:	fe 99 ff db 	brgt	8000656e <_vfprintf_r+0x186e>
800065bc:	1c 09       	add	r9,lr
800065be:	2f f8       	sub	r8,-1
800065c0:	87 0a       	st.w	r3[0x0],r10
800065c2:	fb 49 06 90 	st.w	sp[1680],r9
800065c6:	87 1e       	st.w	r3[0x4],lr
800065c8:	fb 48 06 8c 	st.w	sp[1676],r8
800065cc:	58 78       	cp.w	r8,7
800065ce:	e0 89 00 04 	brgt	800065d6 <_vfprintf_r+0x18d6>
800065d2:	2f 83       	sub	r3,-8
800065d4:	c0 b8       	rjmp	800065ea <_vfprintf_r+0x18ea>
800065d6:	fa ca f9 78 	sub	r10,sp,-1672
800065da:	02 9b       	mov	r11,r1
800065dc:	08 9c       	mov	r12,r4
800065de:	fe b0 f3 83 	rcall	80004ce4 <__sprint_r>
800065e2:	e0 81 03 18 	brne	80006c12 <_vfprintf_r+0x1f12>
800065e6:	fa c3 f9 e0 	sub	r3,sp,-1568
800065ea:	ed b5 00 08 	bld	r5,0x8
800065ee:	c0 b0       	breq	80006604 <_vfprintf_r+0x1904>
800065f0:	fa f8 06 90 	ld.w	r8,sp[1680]
800065f4:	87 12       	st.w	r3[0x4],r2
800065f6:	87 06       	st.w	r3[0x0],r6
800065f8:	f0 02 00 02 	add	r2,r8,r2
800065fc:	fb 42 06 90 	st.w	sp[1680],r2
80006600:	e0 8f 01 d4 	bral	800069a8 <_vfprintf_r+0x1ca8>
80006604:	e0 40 00 65 	cp.w	r0,101
80006608:	e0 8a 01 d6 	brle	800069b4 <_vfprintf_r+0x1cb4>
8000660c:	30 08       	mov	r8,0
8000660e:	30 09       	mov	r9,0
80006610:	40 5b       	lddsp	r11,sp[0x14]
80006612:	40 7a       	lddsp	r10,sp[0x1c]
80006614:	e0 a0 33 4b 	rcall	8000ccaa <__avr32_f64_cmp_eq>
80006618:	c7 90       	breq	8000670a <_vfprintf_r+0x1a0a>
8000661a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000661e:	fe c9 89 be 	sub	r9,pc,-30274
80006622:	2f f8       	sub	r8,-1
80006624:	87 09       	st.w	r3[0x0],r9
80006626:	fb 48 06 90 	st.w	sp[1680],r8
8000662a:	30 19       	mov	r9,1
8000662c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006630:	87 19       	st.w	r3[0x4],r9
80006632:	2f f8       	sub	r8,-1
80006634:	fb 48 06 8c 	st.w	sp[1676],r8
80006638:	58 78       	cp.w	r8,7
8000663a:	e0 89 00 05 	brgt	80006644 <_vfprintf_r+0x1944>
8000663e:	2f 83       	sub	r3,-8
80006640:	c0 c8       	rjmp	80006658 <_vfprintf_r+0x1958>
80006642:	d7 03       	nop
80006644:	fa ca f9 78 	sub	r10,sp,-1672
80006648:	02 9b       	mov	r11,r1
8000664a:	08 9c       	mov	r12,r4
8000664c:	fe b0 f3 4c 	rcall	80004ce4 <__sprint_r>
80006650:	e0 81 02 e1 	brne	80006c12 <_vfprintf_r+0x1f12>
80006654:	fa c3 f9 e0 	sub	r3,sp,-1568
80006658:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000665c:	40 6c       	lddsp	r12,sp[0x18]
8000665e:	18 38       	cp.w	r8,r12
80006660:	c0 55       	brlt	8000666a <_vfprintf_r+0x196a>
80006662:	ed b5 00 00 	bld	r5,0x0
80006666:	e0 81 02 6b 	brne	80006b3c <_vfprintf_r+0x1e3c>
8000666a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000666e:	2f f8       	sub	r8,-1
80006670:	40 cb       	lddsp	r11,sp[0x30]
80006672:	fb 48 06 90 	st.w	sp[1680],r8
80006676:	30 19       	mov	r9,1
80006678:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000667c:	87 0b       	st.w	r3[0x0],r11
8000667e:	2f f8       	sub	r8,-1
80006680:	87 19       	st.w	r3[0x4],r9
80006682:	fb 48 06 8c 	st.w	sp[1676],r8
80006686:	58 78       	cp.w	r8,7
80006688:	e0 89 00 04 	brgt	80006690 <_vfprintf_r+0x1990>
8000668c:	2f 83       	sub	r3,-8
8000668e:	c0 b8       	rjmp	800066a4 <_vfprintf_r+0x19a4>
80006690:	fa ca f9 78 	sub	r10,sp,-1672
80006694:	02 9b       	mov	r11,r1
80006696:	08 9c       	mov	r12,r4
80006698:	fe b0 f3 26 	rcall	80004ce4 <__sprint_r>
8000669c:	e0 81 02 bb 	brne	80006c12 <_vfprintf_r+0x1f12>
800066a0:	fa c3 f9 e0 	sub	r3,sp,-1568
800066a4:	40 66       	lddsp	r6,sp[0x18]
800066a6:	20 16       	sub	r6,1
800066a8:	58 06       	cp.w	r6,0
800066aa:	e0 89 00 1d 	brgt	800066e4 <_vfprintf_r+0x19e4>
800066ae:	e0 8f 02 47 	bral	80006b3c <_vfprintf_r+0x1e3c>
800066b2:	2f 09       	sub	r9,-16
800066b4:	2f f8       	sub	r8,-1
800066b6:	fb 49 06 90 	st.w	sp[1680],r9
800066ba:	87 02       	st.w	r3[0x0],r2
800066bc:	87 10       	st.w	r3[0x4],r0
800066be:	fb 48 06 8c 	st.w	sp[1676],r8
800066c2:	58 78       	cp.w	r8,7
800066c4:	e0 89 00 04 	brgt	800066cc <_vfprintf_r+0x19cc>
800066c8:	2f 83       	sub	r3,-8
800066ca:	c0 b8       	rjmp	800066e0 <_vfprintf_r+0x19e0>
800066cc:	fa ca f9 78 	sub	r10,sp,-1672
800066d0:	02 9b       	mov	r11,r1
800066d2:	08 9c       	mov	r12,r4
800066d4:	fe b0 f3 08 	rcall	80004ce4 <__sprint_r>
800066d8:	e0 81 02 9d 	brne	80006c12 <_vfprintf_r+0x1f12>
800066dc:	fa c3 f9 e0 	sub	r3,sp,-1568
800066e0:	21 06       	sub	r6,16
800066e2:	c0 48       	rjmp	800066ea <_vfprintf_r+0x19ea>
800066e4:	fe c2 8a 70 	sub	r2,pc,-30096
800066e8:	31 00       	mov	r0,16
800066ea:	fa f9 06 90 	ld.w	r9,sp[1680]
800066ee:	fa f8 06 8c 	ld.w	r8,sp[1676]
800066f2:	fe ca 8a 7e 	sub	r10,pc,-30082
800066f6:	59 06       	cp.w	r6,16
800066f8:	fe 99 ff dd 	brgt	800066b2 <_vfprintf_r+0x19b2>
800066fc:	0c 09       	add	r9,r6
800066fe:	87 0a       	st.w	r3[0x0],r10
80006700:	fb 49 06 90 	st.w	sp[1680],r9
80006704:	2f f8       	sub	r8,-1
80006706:	87 16       	st.w	r3[0x4],r6
80006708:	c5 39       	rjmp	800069ae <_vfprintf_r+0x1cae>
8000670a:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000670e:	58 0a       	cp.w	r10,0
80006710:	e0 89 00 92 	brgt	80006834 <_vfprintf_r+0x1b34>
80006714:	fa f8 06 90 	ld.w	r8,sp[1680]
80006718:	fe c9 8a b8 	sub	r9,pc,-30024
8000671c:	2f f8       	sub	r8,-1
8000671e:	87 09       	st.w	r3[0x0],r9
80006720:	fb 48 06 90 	st.w	sp[1680],r8
80006724:	30 19       	mov	r9,1
80006726:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000672a:	87 19       	st.w	r3[0x4],r9
8000672c:	2f f8       	sub	r8,-1
8000672e:	fb 48 06 8c 	st.w	sp[1676],r8
80006732:	58 78       	cp.w	r8,7
80006734:	e0 89 00 04 	brgt	8000673c <_vfprintf_r+0x1a3c>
80006738:	2f 83       	sub	r3,-8
8000673a:	c0 b8       	rjmp	80006750 <_vfprintf_r+0x1a50>
8000673c:	fa ca f9 78 	sub	r10,sp,-1672
80006740:	02 9b       	mov	r11,r1
80006742:	08 9c       	mov	r12,r4
80006744:	fe b0 f2 d0 	rcall	80004ce4 <__sprint_r>
80006748:	e0 81 02 65 	brne	80006c12 <_vfprintf_r+0x1f12>
8000674c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006750:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006754:	58 08       	cp.w	r8,0
80006756:	c0 81       	brne	80006766 <_vfprintf_r+0x1a66>
80006758:	40 6a       	lddsp	r10,sp[0x18]
8000675a:	58 0a       	cp.w	r10,0
8000675c:	c0 51       	brne	80006766 <_vfprintf_r+0x1a66>
8000675e:	ed b5 00 00 	bld	r5,0x0
80006762:	e0 81 01 ed 	brne	80006b3c <_vfprintf_r+0x1e3c>
80006766:	40 c9       	lddsp	r9,sp[0x30]
80006768:	fa f8 06 90 	ld.w	r8,sp[1680]
8000676c:	2f f8       	sub	r8,-1
8000676e:	87 09       	st.w	r3[0x0],r9
80006770:	fb 48 06 90 	st.w	sp[1680],r8
80006774:	30 19       	mov	r9,1
80006776:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000677a:	87 19       	st.w	r3[0x4],r9
8000677c:	2f f8       	sub	r8,-1
8000677e:	fb 48 06 8c 	st.w	sp[1676],r8
80006782:	58 78       	cp.w	r8,7
80006784:	e0 89 00 04 	brgt	8000678c <_vfprintf_r+0x1a8c>
80006788:	2f 83       	sub	r3,-8
8000678a:	c0 b8       	rjmp	800067a0 <_vfprintf_r+0x1aa0>
8000678c:	fa ca f9 78 	sub	r10,sp,-1672
80006790:	02 9b       	mov	r11,r1
80006792:	08 9c       	mov	r12,r4
80006794:	fe b0 f2 a8 	rcall	80004ce4 <__sprint_r>
80006798:	e0 81 02 3d 	brne	80006c12 <_vfprintf_r+0x1f12>
8000679c:	fa c3 f9 e0 	sub	r3,sp,-1568
800067a0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800067a4:	5c 32       	neg	r2
800067a6:	58 02       	cp.w	r2,0
800067a8:	e0 89 00 1d 	brgt	800067e2 <_vfprintf_r+0x1ae2>
800067ac:	c3 d8       	rjmp	80006826 <_vfprintf_r+0x1b26>
800067ae:	2f 09       	sub	r9,-16
800067b0:	2f f8       	sub	r8,-1
800067b2:	31 0e       	mov	lr,16
800067b4:	fb 49 06 90 	st.w	sp[1680],r9
800067b8:	87 00       	st.w	r3[0x0],r0
800067ba:	87 1e       	st.w	r3[0x4],lr
800067bc:	fb 48 06 8c 	st.w	sp[1676],r8
800067c0:	58 78       	cp.w	r8,7
800067c2:	e0 89 00 04 	brgt	800067ca <_vfprintf_r+0x1aca>
800067c6:	2f 83       	sub	r3,-8
800067c8:	c0 b8       	rjmp	800067de <_vfprintf_r+0x1ade>
800067ca:	fa ca f9 78 	sub	r10,sp,-1672
800067ce:	02 9b       	mov	r11,r1
800067d0:	08 9c       	mov	r12,r4
800067d2:	fe b0 f2 89 	rcall	80004ce4 <__sprint_r>
800067d6:	e0 81 02 1e 	brne	80006c12 <_vfprintf_r+0x1f12>
800067da:	fa c3 f9 e0 	sub	r3,sp,-1568
800067de:	21 02       	sub	r2,16
800067e0:	c0 38       	rjmp	800067e6 <_vfprintf_r+0x1ae6>
800067e2:	fe c0 8b 6e 	sub	r0,pc,-29842
800067e6:	fa f9 06 90 	ld.w	r9,sp[1680]
800067ea:	fa f8 06 8c 	ld.w	r8,sp[1676]
800067ee:	fe ca 8b 7a 	sub	r10,pc,-29830
800067f2:	59 02       	cp.w	r2,16
800067f4:	fe 99 ff dd 	brgt	800067ae <_vfprintf_r+0x1aae>
800067f8:	04 09       	add	r9,r2
800067fa:	2f f8       	sub	r8,-1
800067fc:	87 0a       	st.w	r3[0x0],r10
800067fe:	fb 49 06 90 	st.w	sp[1680],r9
80006802:	87 12       	st.w	r3[0x4],r2
80006804:	fb 48 06 8c 	st.w	sp[1676],r8
80006808:	58 78       	cp.w	r8,7
8000680a:	e0 89 00 04 	brgt	80006812 <_vfprintf_r+0x1b12>
8000680e:	2f 83       	sub	r3,-8
80006810:	c0 b8       	rjmp	80006826 <_vfprintf_r+0x1b26>
80006812:	fa ca f9 78 	sub	r10,sp,-1672
80006816:	02 9b       	mov	r11,r1
80006818:	08 9c       	mov	r12,r4
8000681a:	fe b0 f2 65 	rcall	80004ce4 <__sprint_r>
8000681e:	e0 81 01 fa 	brne	80006c12 <_vfprintf_r+0x1f12>
80006822:	fa c3 f9 e0 	sub	r3,sp,-1568
80006826:	40 6c       	lddsp	r12,sp[0x18]
80006828:	fa f8 06 90 	ld.w	r8,sp[1680]
8000682c:	87 06       	st.w	r3[0x0],r6
8000682e:	87 1c       	st.w	r3[0x4],r12
80006830:	18 08       	add	r8,r12
80006832:	cb 98       	rjmp	800069a4 <_vfprintf_r+0x1ca4>
80006834:	fa f9 06 90 	ld.w	r9,sp[1680]
80006838:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000683c:	40 6b       	lddsp	r11,sp[0x18]
8000683e:	16 3a       	cp.w	r10,r11
80006840:	c6 f5       	brlt	8000691e <_vfprintf_r+0x1c1e>
80006842:	16 09       	add	r9,r11
80006844:	2f f8       	sub	r8,-1
80006846:	87 06       	st.w	r3[0x0],r6
80006848:	fb 49 06 90 	st.w	sp[1680],r9
8000684c:	87 1b       	st.w	r3[0x4],r11
8000684e:	fb 48 06 8c 	st.w	sp[1676],r8
80006852:	58 78       	cp.w	r8,7
80006854:	e0 89 00 04 	brgt	8000685c <_vfprintf_r+0x1b5c>
80006858:	2f 83       	sub	r3,-8
8000685a:	c0 b8       	rjmp	80006870 <_vfprintf_r+0x1b70>
8000685c:	fa ca f9 78 	sub	r10,sp,-1672
80006860:	02 9b       	mov	r11,r1
80006862:	08 9c       	mov	r12,r4
80006864:	fe b0 f2 40 	rcall	80004ce4 <__sprint_r>
80006868:	e0 81 01 d5 	brne	80006c12 <_vfprintf_r+0x1f12>
8000686c:	fa c3 f9 e0 	sub	r3,sp,-1568
80006870:	fa f6 06 ac 	ld.w	r6,sp[1708]
80006874:	40 6a       	lddsp	r10,sp[0x18]
80006876:	14 16       	sub	r6,r10
80006878:	58 06       	cp.w	r6,0
8000687a:	e0 89 00 1c 	brgt	800068b2 <_vfprintf_r+0x1bb2>
8000687e:	c3 d8       	rjmp	800068f8 <_vfprintf_r+0x1bf8>
80006880:	2f 09       	sub	r9,-16
80006882:	2f f8       	sub	r8,-1
80006884:	fb 49 06 90 	st.w	sp[1680],r9
80006888:	87 02       	st.w	r3[0x0],r2
8000688a:	87 10       	st.w	r3[0x4],r0
8000688c:	fb 48 06 8c 	st.w	sp[1676],r8
80006890:	58 78       	cp.w	r8,7
80006892:	e0 89 00 04 	brgt	8000689a <_vfprintf_r+0x1b9a>
80006896:	2f 83       	sub	r3,-8
80006898:	c0 b8       	rjmp	800068ae <_vfprintf_r+0x1bae>
8000689a:	fa ca f9 78 	sub	r10,sp,-1672
8000689e:	02 9b       	mov	r11,r1
800068a0:	08 9c       	mov	r12,r4
800068a2:	fe b0 f2 21 	rcall	80004ce4 <__sprint_r>
800068a6:	e0 81 01 b6 	brne	80006c12 <_vfprintf_r+0x1f12>
800068aa:	fa c3 f9 e0 	sub	r3,sp,-1568
800068ae:	21 06       	sub	r6,16
800068b0:	c0 48       	rjmp	800068b8 <_vfprintf_r+0x1bb8>
800068b2:	fe c2 8c 3e 	sub	r2,pc,-29634
800068b6:	31 00       	mov	r0,16
800068b8:	fa f9 06 90 	ld.w	r9,sp[1680]
800068bc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800068c0:	fe ca 8c 4c 	sub	r10,pc,-29620
800068c4:	59 06       	cp.w	r6,16
800068c6:	fe 99 ff dd 	brgt	80006880 <_vfprintf_r+0x1b80>
800068ca:	0c 09       	add	r9,r6
800068cc:	2f f8       	sub	r8,-1
800068ce:	87 0a       	st.w	r3[0x0],r10
800068d0:	fb 49 06 90 	st.w	sp[1680],r9
800068d4:	87 16       	st.w	r3[0x4],r6
800068d6:	fb 48 06 8c 	st.w	sp[1676],r8
800068da:	58 78       	cp.w	r8,7
800068dc:	e0 89 00 04 	brgt	800068e4 <_vfprintf_r+0x1be4>
800068e0:	2f 83       	sub	r3,-8
800068e2:	c0 b8       	rjmp	800068f8 <_vfprintf_r+0x1bf8>
800068e4:	fa ca f9 78 	sub	r10,sp,-1672
800068e8:	02 9b       	mov	r11,r1
800068ea:	08 9c       	mov	r12,r4
800068ec:	fe b0 f1 fc 	rcall	80004ce4 <__sprint_r>
800068f0:	e0 81 01 91 	brne	80006c12 <_vfprintf_r+0x1f12>
800068f4:	fa c3 f9 e0 	sub	r3,sp,-1568
800068f8:	ed b5 00 00 	bld	r5,0x0
800068fc:	e0 81 01 20 	brne	80006b3c <_vfprintf_r+0x1e3c>
80006900:	40 c9       	lddsp	r9,sp[0x30]
80006902:	fa f8 06 90 	ld.w	r8,sp[1680]
80006906:	2f f8       	sub	r8,-1
80006908:	87 09       	st.w	r3[0x0],r9
8000690a:	fb 48 06 90 	st.w	sp[1680],r8
8000690e:	30 19       	mov	r9,1
80006910:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006914:	87 19       	st.w	r3[0x4],r9
80006916:	2f f8       	sub	r8,-1
80006918:	fb 48 06 8c 	st.w	sp[1676],r8
8000691c:	c0 29       	rjmp	80006b20 <_vfprintf_r+0x1e20>
8000691e:	14 09       	add	r9,r10
80006920:	2f f8       	sub	r8,-1
80006922:	fb 49 06 90 	st.w	sp[1680],r9
80006926:	87 06       	st.w	r3[0x0],r6
80006928:	87 1a       	st.w	r3[0x4],r10
8000692a:	fb 48 06 8c 	st.w	sp[1676],r8
8000692e:	58 78       	cp.w	r8,7
80006930:	e0 89 00 04 	brgt	80006938 <_vfprintf_r+0x1c38>
80006934:	2f 83       	sub	r3,-8
80006936:	c0 b8       	rjmp	8000694c <_vfprintf_r+0x1c4c>
80006938:	fa ca f9 78 	sub	r10,sp,-1672
8000693c:	02 9b       	mov	r11,r1
8000693e:	08 9c       	mov	r12,r4
80006940:	fe b0 f1 d2 	rcall	80004ce4 <__sprint_r>
80006944:	e0 81 01 67 	brne	80006c12 <_vfprintf_r+0x1f12>
80006948:	fa c3 f9 e0 	sub	r3,sp,-1568
8000694c:	40 c8       	lddsp	r8,sp[0x30]
8000694e:	87 08       	st.w	r3[0x0],r8
80006950:	fa f8 06 90 	ld.w	r8,sp[1680]
80006954:	2f f8       	sub	r8,-1
80006956:	30 19       	mov	r9,1
80006958:	fb 48 06 90 	st.w	sp[1680],r8
8000695c:	87 19       	st.w	r3[0x4],r9
8000695e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006962:	2f f8       	sub	r8,-1
80006964:	fb 48 06 8c 	st.w	sp[1676],r8
80006968:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000696c:	58 78       	cp.w	r8,7
8000696e:	e0 89 00 04 	brgt	80006976 <_vfprintf_r+0x1c76>
80006972:	2f 83       	sub	r3,-8
80006974:	c0 b8       	rjmp	8000698a <_vfprintf_r+0x1c8a>
80006976:	fa ca f9 78 	sub	r10,sp,-1672
8000697a:	02 9b       	mov	r11,r1
8000697c:	08 9c       	mov	r12,r4
8000697e:	fe b0 f1 b3 	rcall	80004ce4 <__sprint_r>
80006982:	e0 81 01 48 	brne	80006c12 <_vfprintf_r+0x1f12>
80006986:	fa c3 f9 e0 	sub	r3,sp,-1568
8000698a:	04 06       	add	r6,r2
8000698c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006990:	87 06       	st.w	r3[0x0],r6
80006992:	fa f9 06 90 	ld.w	r9,sp[1680]
80006996:	40 66       	lddsp	r6,sp[0x18]
80006998:	40 6e       	lddsp	lr,sp[0x18]
8000699a:	10 16       	sub	r6,r8
8000699c:	f2 08 01 08 	sub	r8,r9,r8
800069a0:	87 16       	st.w	r3[0x4],r6
800069a2:	1c 08       	add	r8,lr
800069a4:	fb 48 06 90 	st.w	sp[1680],r8
800069a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800069ac:	2f f8       	sub	r8,-1
800069ae:	fb 48 06 8c 	st.w	sp[1676],r8
800069b2:	cb 78       	rjmp	80006b20 <_vfprintf_r+0x1e20>
800069b4:	40 6c       	lddsp	r12,sp[0x18]
800069b6:	58 1c       	cp.w	r12,1
800069b8:	e0 89 00 06 	brgt	800069c4 <_vfprintf_r+0x1cc4>
800069bc:	ed b5 00 00 	bld	r5,0x0
800069c0:	e0 81 00 85 	brne	80006aca <_vfprintf_r+0x1dca>
800069c4:	fa f8 06 90 	ld.w	r8,sp[1680]
800069c8:	2f f8       	sub	r8,-1
800069ca:	30 19       	mov	r9,1
800069cc:	fb 48 06 90 	st.w	sp[1680],r8
800069d0:	87 06       	st.w	r3[0x0],r6
800069d2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800069d6:	87 19       	st.w	r3[0x4],r9
800069d8:	2f f8       	sub	r8,-1
800069da:	fb 48 06 8c 	st.w	sp[1676],r8
800069de:	58 78       	cp.w	r8,7
800069e0:	e0 89 00 04 	brgt	800069e8 <_vfprintf_r+0x1ce8>
800069e4:	2f 83       	sub	r3,-8
800069e6:	c0 b8       	rjmp	800069fc <_vfprintf_r+0x1cfc>
800069e8:	fa ca f9 78 	sub	r10,sp,-1672
800069ec:	02 9b       	mov	r11,r1
800069ee:	08 9c       	mov	r12,r4
800069f0:	fe b0 f1 7a 	rcall	80004ce4 <__sprint_r>
800069f4:	e0 81 01 0f 	brne	80006c12 <_vfprintf_r+0x1f12>
800069f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800069fc:	fa f8 06 90 	ld.w	r8,sp[1680]
80006a00:	2f f8       	sub	r8,-1
80006a02:	40 cb       	lddsp	r11,sp[0x30]
80006a04:	fb 48 06 90 	st.w	sp[1680],r8
80006a08:	30 19       	mov	r9,1
80006a0a:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006a0e:	87 0b       	st.w	r3[0x0],r11
80006a10:	2f f8       	sub	r8,-1
80006a12:	87 19       	st.w	r3[0x4],r9
80006a14:	fb 48 06 8c 	st.w	sp[1676],r8
80006a18:	58 78       	cp.w	r8,7
80006a1a:	e0 89 00 05 	brgt	80006a24 <_vfprintf_r+0x1d24>
80006a1e:	2f 83       	sub	r3,-8
80006a20:	c0 c8       	rjmp	80006a38 <_vfprintf_r+0x1d38>
80006a22:	d7 03       	nop
80006a24:	fa ca f9 78 	sub	r10,sp,-1672
80006a28:	02 9b       	mov	r11,r1
80006a2a:	08 9c       	mov	r12,r4
80006a2c:	fe b0 f1 5c 	rcall	80004ce4 <__sprint_r>
80006a30:	e0 81 00 f1 	brne	80006c12 <_vfprintf_r+0x1f12>
80006a34:	fa c3 f9 e0 	sub	r3,sp,-1568
80006a38:	30 08       	mov	r8,0
80006a3a:	30 09       	mov	r9,0
80006a3c:	40 5b       	lddsp	r11,sp[0x14]
80006a3e:	40 7a       	lddsp	r10,sp[0x1c]
80006a40:	e0 a0 31 35 	rcall	8000ccaa <__avr32_f64_cmp_eq>
80006a44:	40 68       	lddsp	r8,sp[0x18]
80006a46:	20 18       	sub	r8,1
80006a48:	58 0c       	cp.w	r12,0
80006a4a:	c0 d1       	brne	80006a64 <_vfprintf_r+0x1d64>
80006a4c:	2f f6       	sub	r6,-1
80006a4e:	87 18       	st.w	r3[0x4],r8
80006a50:	87 06       	st.w	r3[0x0],r6
80006a52:	fa f6 06 90 	ld.w	r6,sp[1680]
80006a56:	10 06       	add	r6,r8
80006a58:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006a5c:	fb 46 06 90 	st.w	sp[1680],r6
80006a60:	2f f8       	sub	r8,-1
80006a62:	c3 18       	rjmp	80006ac4 <_vfprintf_r+0x1dc4>
80006a64:	10 96       	mov	r6,r8
80006a66:	58 08       	cp.w	r8,0
80006a68:	e0 89 00 1c 	brgt	80006aa0 <_vfprintf_r+0x1da0>
80006a6c:	c4 b8       	rjmp	80006b02 <_vfprintf_r+0x1e02>
80006a6e:	2f 09       	sub	r9,-16
80006a70:	2f f8       	sub	r8,-1
80006a72:	fb 49 06 90 	st.w	sp[1680],r9
80006a76:	87 02       	st.w	r3[0x0],r2
80006a78:	87 10       	st.w	r3[0x4],r0
80006a7a:	fb 48 06 8c 	st.w	sp[1676],r8
80006a7e:	58 78       	cp.w	r8,7
80006a80:	e0 89 00 04 	brgt	80006a88 <_vfprintf_r+0x1d88>
80006a84:	2f 83       	sub	r3,-8
80006a86:	c0 b8       	rjmp	80006a9c <_vfprintf_r+0x1d9c>
80006a88:	fa ca f9 78 	sub	r10,sp,-1672
80006a8c:	02 9b       	mov	r11,r1
80006a8e:	08 9c       	mov	r12,r4
80006a90:	fe b0 f1 2a 	rcall	80004ce4 <__sprint_r>
80006a94:	e0 81 00 bf 	brne	80006c12 <_vfprintf_r+0x1f12>
80006a98:	fa c3 f9 e0 	sub	r3,sp,-1568
80006a9c:	21 06       	sub	r6,16
80006a9e:	c0 48       	rjmp	80006aa6 <_vfprintf_r+0x1da6>
80006aa0:	fe c2 8e 2c 	sub	r2,pc,-29140
80006aa4:	31 00       	mov	r0,16
80006aa6:	fa f9 06 90 	ld.w	r9,sp[1680]
80006aaa:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006aae:	fe ca 8e 3a 	sub	r10,pc,-29126
80006ab2:	59 06       	cp.w	r6,16
80006ab4:	fe 99 ff dd 	brgt	80006a6e <_vfprintf_r+0x1d6e>
80006ab8:	0c 09       	add	r9,r6
80006aba:	87 0a       	st.w	r3[0x0],r10
80006abc:	fb 49 06 90 	st.w	sp[1680],r9
80006ac0:	2f f8       	sub	r8,-1
80006ac2:	87 16       	st.w	r3[0x4],r6
80006ac4:	fb 48 06 8c 	st.w	sp[1676],r8
80006ac8:	c0 e8       	rjmp	80006ae4 <_vfprintf_r+0x1de4>
80006aca:	fa f8 06 90 	ld.w	r8,sp[1680]
80006ace:	2f f8       	sub	r8,-1
80006ad0:	30 19       	mov	r9,1
80006ad2:	fb 48 06 90 	st.w	sp[1680],r8
80006ad6:	87 06       	st.w	r3[0x0],r6
80006ad8:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006adc:	87 19       	st.w	r3[0x4],r9
80006ade:	2f f8       	sub	r8,-1
80006ae0:	fb 48 06 8c 	st.w	sp[1676],r8
80006ae4:	58 78       	cp.w	r8,7
80006ae6:	e0 89 00 04 	brgt	80006aee <_vfprintf_r+0x1dee>
80006aea:	2f 83       	sub	r3,-8
80006aec:	c0 b8       	rjmp	80006b02 <_vfprintf_r+0x1e02>
80006aee:	fa ca f9 78 	sub	r10,sp,-1672
80006af2:	02 9b       	mov	r11,r1
80006af4:	08 9c       	mov	r12,r4
80006af6:	fe b0 f0 f7 	rcall	80004ce4 <__sprint_r>
80006afa:	e0 81 00 8c 	brne	80006c12 <_vfprintf_r+0x1f12>
80006afe:	fa c3 f9 e0 	sub	r3,sp,-1568
80006b02:	40 ea       	lddsp	r10,sp[0x38]
80006b04:	fa f8 06 90 	ld.w	r8,sp[1680]
80006b08:	14 08       	add	r8,r10
80006b0a:	fa c9 f9 64 	sub	r9,sp,-1692
80006b0e:	fb 48 06 90 	st.w	sp[1680],r8
80006b12:	87 1a       	st.w	r3[0x4],r10
80006b14:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006b18:	87 09       	st.w	r3[0x0],r9
80006b1a:	2f f8       	sub	r8,-1
80006b1c:	fb 48 06 8c 	st.w	sp[1676],r8
80006b20:	58 78       	cp.w	r8,7
80006b22:	e0 89 00 04 	brgt	80006b2a <_vfprintf_r+0x1e2a>
80006b26:	2f 83       	sub	r3,-8
80006b28:	c0 a8       	rjmp	80006b3c <_vfprintf_r+0x1e3c>
80006b2a:	fa ca f9 78 	sub	r10,sp,-1672
80006b2e:	02 9b       	mov	r11,r1
80006b30:	08 9c       	mov	r12,r4
80006b32:	fe b0 f0 d9 	rcall	80004ce4 <__sprint_r>
80006b36:	c6 e1       	brne	80006c12 <_vfprintf_r+0x1f12>
80006b38:	fa c3 f9 e0 	sub	r3,sp,-1568
80006b3c:	e2 15 00 04 	andl	r5,0x4,COH
80006b40:	c3 f0       	breq	80006bbe <_vfprintf_r+0x1ebe>
80006b42:	40 86       	lddsp	r6,sp[0x20]
80006b44:	40 39       	lddsp	r9,sp[0xc]
80006b46:	12 16       	sub	r6,r9
80006b48:	58 06       	cp.w	r6,0
80006b4a:	e0 89 00 1a 	brgt	80006b7e <_vfprintf_r+0x1e7e>
80006b4e:	c3 88       	rjmp	80006bbe <_vfprintf_r+0x1ebe>
80006b50:	2f 09       	sub	r9,-16
80006b52:	2f f8       	sub	r8,-1
80006b54:	fb 49 06 90 	st.w	sp[1680],r9
80006b58:	87 05       	st.w	r3[0x0],r5
80006b5a:	87 12       	st.w	r3[0x4],r2
80006b5c:	fb 48 06 8c 	st.w	sp[1676],r8
80006b60:	58 78       	cp.w	r8,7
80006b62:	e0 89 00 04 	brgt	80006b6a <_vfprintf_r+0x1e6a>
80006b66:	2f 83       	sub	r3,-8
80006b68:	c0 98       	rjmp	80006b7a <_vfprintf_r+0x1e7a>
80006b6a:	00 9a       	mov	r10,r0
80006b6c:	02 9b       	mov	r11,r1
80006b6e:	08 9c       	mov	r12,r4
80006b70:	fe b0 f0 ba 	rcall	80004ce4 <__sprint_r>
80006b74:	c4 f1       	brne	80006c12 <_vfprintf_r+0x1f12>
80006b76:	fa c3 f9 e0 	sub	r3,sp,-1568
80006b7a:	21 06       	sub	r6,16
80006b7c:	c0 68       	rjmp	80006b88 <_vfprintf_r+0x1e88>
80006b7e:	fe c5 8f 1a 	sub	r5,pc,-28902
80006b82:	31 02       	mov	r2,16
80006b84:	fa c0 f9 78 	sub	r0,sp,-1672
80006b88:	fa f9 06 90 	ld.w	r9,sp[1680]
80006b8c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006b90:	fe ca 8f 2c 	sub	r10,pc,-28884
80006b94:	59 06       	cp.w	r6,16
80006b96:	fe 99 ff dd 	brgt	80006b50 <_vfprintf_r+0x1e50>
80006b9a:	0c 09       	add	r9,r6
80006b9c:	2f f8       	sub	r8,-1
80006b9e:	87 0a       	st.w	r3[0x0],r10
80006ba0:	87 16       	st.w	r3[0x4],r6
80006ba2:	fb 49 06 90 	st.w	sp[1680],r9
80006ba6:	fb 48 06 8c 	st.w	sp[1676],r8
80006baa:	58 78       	cp.w	r8,7
80006bac:	e0 8a 00 09 	brle	80006bbe <_vfprintf_r+0x1ebe>
80006bb0:	fa ca f9 78 	sub	r10,sp,-1672
80006bb4:	02 9b       	mov	r11,r1
80006bb6:	08 9c       	mov	r12,r4
80006bb8:	fe b0 f0 96 	rcall	80004ce4 <__sprint_r>
80006bbc:	c2 b1       	brne	80006c12 <_vfprintf_r+0x1f12>
80006bbe:	40 bc       	lddsp	r12,sp[0x2c]
80006bc0:	40 36       	lddsp	r6,sp[0xc]
80006bc2:	40 8e       	lddsp	lr,sp[0x20]
80006bc4:	ec 0e 0c 48 	max	r8,r6,lr
80006bc8:	10 0c       	add	r12,r8
80006bca:	50 bc       	stdsp	sp[0x2c],r12
80006bcc:	fa f8 06 90 	ld.w	r8,sp[1680]
80006bd0:	58 08       	cp.w	r8,0
80006bd2:	c0 80       	breq	80006be2 <_vfprintf_r+0x1ee2>
80006bd4:	fa ca f9 78 	sub	r10,sp,-1672
80006bd8:	02 9b       	mov	r11,r1
80006bda:	08 9c       	mov	r12,r4
80006bdc:	fe b0 f0 84 	rcall	80004ce4 <__sprint_r>
80006be0:	c1 91       	brne	80006c12 <_vfprintf_r+0x1f12>
80006be2:	30 0b       	mov	r11,0
80006be4:	fa c3 f9 e0 	sub	r3,sp,-1568
80006be8:	fb 4b 06 8c 	st.w	sp[1676],r11
80006bec:	fe 9f f1 15 	bral	80004e16 <_vfprintf_r+0x116>
80006bf0:	08 95       	mov	r5,r4
80006bf2:	fa f8 06 90 	ld.w	r8,sp[1680]
80006bf6:	58 08       	cp.w	r8,0
80006bf8:	c0 80       	breq	80006c08 <_vfprintf_r+0x1f08>
80006bfa:	08 9c       	mov	r12,r4
80006bfc:	fa ca f9 78 	sub	r10,sp,-1672
80006c00:	02 9b       	mov	r11,r1
80006c02:	fe b0 f0 71 	rcall	80004ce4 <__sprint_r>
80006c06:	c0 61       	brne	80006c12 <_vfprintf_r+0x1f12>
80006c08:	30 08       	mov	r8,0
80006c0a:	fb 48 06 8c 	st.w	sp[1676],r8
80006c0e:	c0 28       	rjmp	80006c12 <_vfprintf_r+0x1f12>
80006c10:	40 41       	lddsp	r1,sp[0x10]
80006c12:	82 68       	ld.sh	r8,r1[0xc]
80006c14:	ed b8 00 06 	bld	r8,0x6
80006c18:	c0 31       	brne	80006c1e <_vfprintf_r+0x1f1e>
80006c1a:	3f fa       	mov	r10,-1
80006c1c:	50 ba       	stdsp	sp[0x2c],r10
80006c1e:	40 bc       	lddsp	r12,sp[0x2c]
80006c20:	fe 3d f9 44 	sub	sp,-1724
80006c24:	d8 32       	popm	r0-r7,pc
80006c26:	d7 03       	nop

80006c28 <__svfscanf_r>:
80006c28:	d4 31       	pushm	r0-r7,lr
80006c2a:	fa cd 03 2c 	sub	sp,sp,812
80006c2e:	30 07       	mov	r7,0
80006c30:	50 4c       	stdsp	sp[0x10],r12
80006c32:	16 95       	mov	r5,r11
80006c34:	12 96       	mov	r6,r9
80006c36:	50 9a       	stdsp	sp[0x24],r10
80006c38:	50 a7       	stdsp	sp[0x28],r7
80006c3a:	50 87       	stdsp	sp[0x20],r7
80006c3c:	0e 93       	mov	r3,r7
80006c3e:	50 37       	stdsp	sp[0xc],r7
80006c40:	50 77       	stdsp	sp[0x1c],r7
80006c42:	c0 28       	rjmp	80006c46 <__svfscanf_r+0x1e>
80006c44:	50 34       	stdsp	sp[0xc],r4
80006c46:	40 9b       	lddsp	r11,sp[0x24]
80006c48:	17 89       	ld.ub	r9,r11[0x0]
80006c4a:	fb 49 03 28 	st.w	sp[808],r9
80006c4e:	58 09       	cp.w	r9,0
80006c50:	e0 80 0a 63 	breq	80008116 <__svfscanf_r+0x14ee>
80006c54:	2f fb       	sub	r11,-1
80006c56:	50 9b       	stdsp	sp[0x24],r11
80006c58:	e0 6a 01 98 	mov	r10,408
80006c5c:	74 01       	ld.w	r1,r10[0x0]
80006c5e:	e2 09 07 08 	ld.ub	r8,r1[r9]
80006c62:	e2 18 00 08 	andl	r8,0x8,COH
80006c66:	c1 d0       	breq	80006ca0 <__svfscanf_r+0x78>
80006c68:	40 34       	lddsp	r4,sp[0xc]
80006c6a:	6a 18       	ld.w	r8,r5[0x4]
80006c6c:	58 08       	cp.w	r8,0
80006c6e:	e0 89 00 07 	brgt	80006c7c <__svfscanf_r+0x54>
80006c72:	0a 9b       	mov	r11,r5
80006c74:	40 4c       	lddsp	r12,sp[0x10]
80006c76:	e0 a0 1d cb 	rcall	8000a80c <__srefill_r>
80006c7a:	ce 51       	brne	80006c44 <__svfscanf_r+0x1c>
80006c7c:	6a 08       	ld.w	r8,r5[0x0]
80006c7e:	e0 6b 01 98 	mov	r11,408
80006c82:	f0 c9 ff ff 	sub	r9,r8,-1
80006c86:	76 0a       	ld.w	r10,r11[0x0]
80006c88:	11 88       	ld.ub	r8,r8[0x0]
80006c8a:	f4 08 07 08 	ld.ub	r8,r10[r8]
80006c8e:	ed b8 00 03 	bld	r8,0x3
80006c92:	cd 91       	brne	80006c44 <__svfscanf_r+0x1c>
80006c94:	6a 18       	ld.w	r8,r5[0x4]
80006c96:	8b 09       	st.w	r5[0x0],r9
80006c98:	20 18       	sub	r8,1
80006c9a:	2f f4       	sub	r4,-1
80006c9c:	8b 18       	st.w	r5[0x4],r8
80006c9e:	ce 6b       	rjmp	80006c6a <__svfscanf_r+0x42>
80006ca0:	e0 49 00 25 	cp.w	r9,37
80006ca4:	e0 81 00 8a 	brne	80006db8 <__svfscanf_r+0x190>
80006ca8:	50 68       	stdsp	sp[0x18],r8
80006caa:	06 94       	mov	r4,r3
80006cac:	10 90       	mov	r0,r8
80006cae:	10 92       	mov	r2,r8
80006cb0:	36 8a       	mov	r10,104
80006cb2:	36 c9       	mov	r9,108
80006cb4:	34 5c       	mov	r12,69
80006cb6:	34 fe       	mov	lr,79
80006cb8:	40 9b       	lddsp	r11,sp[0x24]
80006cba:	17 38       	ld.ub	r8,r11++
80006cbc:	50 9b       	stdsp	sp[0x24],r11
80006cbe:	36 4b       	mov	r11,100
80006cc0:	f6 08 18 00 	cp.b	r8,r11
80006cc4:	e0 80 00 c2 	breq	80006e48 <__svfscanf_r+0x220>
80006cc8:	e0 8b 00 48 	brhi	80006d58 <__svfscanf_r+0x130>
80006ccc:	f8 08 18 00 	cp.b	r8,r12
80006cd0:	c7 20       	breq	80006db4 <__svfscanf_r+0x18c>
80006cd2:	e0 8b 00 27 	brhi	80006d20 <__svfscanf_r+0xf8>
80006cd6:	33 9b       	mov	r11,57
80006cd8:	f6 08 18 00 	cp.b	r8,r11
80006cdc:	e0 8b 00 1c 	brhi	80006d14 <__svfscanf_r+0xec>
80006ce0:	33 0b       	mov	r11,48
80006ce2:	f6 08 18 00 	cp.b	r8,r11
80006ce6:	e0 82 00 9b 	brhs	80006e1c <__svfscanf_r+0x1f4>
80006cea:	32 5b       	mov	r11,37
80006cec:	f6 08 18 00 	cp.b	r8,r11
80006cf0:	c6 40       	breq	80006db8 <__svfscanf_r+0x190>
80006cf2:	e0 8b 00 0b 	brhi	80006d08 <__svfscanf_r+0xe0>
80006cf6:	58 08       	cp.w	r8,0
80006cf8:	e0 80 0a 0d 	breq	80008112 <__svfscanf_r+0x14ea>
80006cfc:	32 4b       	mov	r11,36
80006cfe:	f6 08 18 00 	cp.b	r8,r11
80006d02:	e0 81 01 f5 	brne	800070ec <__svfscanf_r+0x4c4>
80006d06:	c9 18       	rjmp	80006e28 <__svfscanf_r+0x200>
80006d08:	32 ab       	mov	r11,42
80006d0a:	f6 08 18 00 	cp.b	r8,r11
80006d0e:	e0 81 01 ef 	brne	800070ec <__svfscanf_r+0x4c4>
80006d12:	c6 f8       	rjmp	80006df0 <__svfscanf_r+0x1c8>
80006d14:	34 49       	mov	r9,68
80006d16:	f2 08 18 00 	cp.b	r8,r9
80006d1a:	e0 81 01 e9 	brne	800070ec <__svfscanf_r+0x4c4>
80006d1e:	c9 48       	rjmp	80006e46 <__svfscanf_r+0x21e>
80006d20:	fc 08 18 00 	cp.b	r8,lr
80006d24:	e0 80 00 9c 	breq	80006e5c <__svfscanf_r+0x234>
80006d28:	e0 8b 00 0c 	brhi	80006d40 <__svfscanf_r+0x118>
80006d2c:	34 7b       	mov	r11,71
80006d2e:	f6 08 18 00 	cp.b	r8,r11
80006d32:	c4 10       	breq	80006db4 <__svfscanf_r+0x18c>
80006d34:	34 cb       	mov	r11,76
80006d36:	f6 08 18 00 	cp.b	r8,r11
80006d3a:	e0 81 01 d9 	brne	800070ec <__svfscanf_r+0x4c4>
80006d3e:	c6 b8       	rjmp	80006e14 <__svfscanf_r+0x1ec>
80006d40:	35 b9       	mov	r9,91
80006d42:	f2 08 18 00 	cp.b	r8,r9
80006d46:	e0 80 00 9f 	breq	80006e84 <__svfscanf_r+0x25c>
80006d4a:	36 39       	mov	r9,99
80006d4c:	f2 08 18 00 	cp.b	r8,r9
80006d50:	e0 80 00 a3 	breq	80006e96 <__svfscanf_r+0x26e>
80006d54:	35 89       	mov	r9,88
80006d56:	c2 a8       	rjmp	80006daa <__svfscanf_r+0x182>
80006d58:	36 eb       	mov	r11,110
80006d5a:	f6 08 18 00 	cp.b	r8,r11
80006d5e:	e0 80 00 a7 	breq	80006eac <__svfscanf_r+0x284>
80006d62:	e0 8b 00 0f 	brhi	80006d80 <__svfscanf_r+0x158>
80006d66:	f4 08 18 00 	cp.b	r8,r10
80006d6a:	c5 70       	breq	80006e18 <__svfscanf_r+0x1f0>
80006d6c:	c2 43       	brcs	80006db4 <__svfscanf_r+0x18c>
80006d6e:	36 9b       	mov	r11,105
80006d70:	f6 08 18 00 	cp.b	r8,r11
80006d74:	c6 f0       	breq	80006e52 <__svfscanf_r+0x22a>
80006d76:	f2 08 18 00 	cp.b	r8,r9
80006d7a:	e0 81 01 b9 	brne	800070ec <__svfscanf_r+0x4c4>
80006d7e:	c3 b8       	rjmp	80006df4 <__svfscanf_r+0x1cc>
80006d80:	37 39       	mov	r9,115
80006d82:	f2 08 18 00 	cp.b	r8,r9
80006d86:	c7 d0       	breq	80006e80 <__svfscanf_r+0x258>
80006d88:	e0 8b 00 0c 	brhi	80006da0 <__svfscanf_r+0x178>
80006d8c:	36 f9       	mov	r9,111
80006d8e:	f2 08 18 00 	cp.b	r8,r9
80006d92:	c6 60       	breq	80006e5e <__svfscanf_r+0x236>
80006d94:	37 09       	mov	r9,112
80006d96:	f2 08 18 00 	cp.b	r8,r9
80006d9a:	e0 81 01 a9 	brne	800070ec <__svfscanf_r+0x4c4>
80006d9e:	c7 f8       	rjmp	80006e9c <__svfscanf_r+0x274>
80006da0:	37 59       	mov	r9,117
80006da2:	f2 08 18 00 	cp.b	r8,r9
80006da6:	c6 20       	breq	80006e6a <__svfscanf_r+0x242>
80006da8:	37 89       	mov	r9,120
80006daa:	f2 08 18 00 	cp.b	r8,r9
80006dae:	e0 81 01 9f 	brne	800070ec <__svfscanf_r+0x4c4>
80006db2:	c6 18       	rjmp	80006e74 <__svfscanf_r+0x24c>
80006db4:	30 41       	mov	r1,4
80006db6:	ca 69       	rjmp	80007102 <__svfscanf_r+0x4da>
80006db8:	6a 18       	ld.w	r8,r5[0x4]
80006dba:	58 08       	cp.w	r8,0
80006dbc:	e0 89 00 08 	brgt	80006dcc <__svfscanf_r+0x1a4>
80006dc0:	0a 9b       	mov	r11,r5
80006dc2:	40 4c       	lddsp	r12,sp[0x10]
80006dc4:	e0 a0 1d 24 	rcall	8000a80c <__srefill_r>
80006dc8:	e0 81 09 9e 	brne	80008104 <__svfscanf_r+0x14dc>
80006dcc:	40 9a       	lddsp	r10,sp[0x24]
80006dce:	6a 08       	ld.w	r8,r5[0x0]
80006dd0:	f5 39 ff ff 	ld.ub	r9,r10[-1]
80006dd4:	11 8a       	ld.ub	r10,r8[0x0]
80006dd6:	f2 0a 18 00 	cp.b	r10,r9
80006dda:	e0 81 09 9e 	brne	80008116 <__svfscanf_r+0x14ee>
80006dde:	2f f8       	sub	r8,-1
80006de0:	40 39       	lddsp	r9,sp[0xc]
80006de2:	8b 08       	st.w	r5[0x0],r8
80006de4:	2f f9       	sub	r9,-1
80006de6:	6a 18       	ld.w	r8,r5[0x4]
80006de8:	50 39       	stdsp	sp[0xc],r9
80006dea:	20 18       	sub	r8,1
80006dec:	8b 18       	st.w	r5[0x4],r8
80006dee:	c2 cb       	rjmp	80006c46 <__svfscanf_r+0x1e>
80006df0:	a5 a0       	sbr	r0,0x4
80006df2:	c6 3b       	rjmp	80006cb8 <__svfscanf_r+0x90>
80006df4:	00 98       	mov	r8,r0
80006df6:	a1 b0       	sbr	r0,0x1
80006df8:	40 9b       	lddsp	r11,sp[0x24]
80006dfa:	a1 a8       	sbr	r8,0x0
80006dfc:	17 8b       	ld.ub	r11,r11[0x0]
80006dfe:	f2 0b 18 00 	cp.b	r11,r9
80006e02:	fb f8 00 09 	ld.weq	r8,sp[0x24]
80006e06:	f7 b8 00 ff 	subeq	r8,-1
80006e0a:	fb f8 0a 09 	st.weq	sp[0x24],r8
80006e0e:	f0 00 17 10 	movne	r0,r8
80006e12:	c5 3b       	rjmp	80006cb8 <__svfscanf_r+0x90>
80006e14:	a1 b0       	sbr	r0,0x1
80006e16:	c5 1b       	rjmp	80006cb8 <__svfscanf_r+0x90>
80006e18:	a3 a0       	sbr	r0,0x2
80006e1a:	c4 fb       	rjmp	80006cb8 <__svfscanf_r+0x90>
80006e1c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80006e20:	a1 72       	lsl	r2,0x1
80006e22:	23 02       	sub	r2,48
80006e24:	10 02       	add	r2,r8
80006e26:	c4 9b       	rjmp	80006cb8 <__svfscanf_r+0x90>
80006e28:	e0 42 00 20 	cp.w	r2,32
80006e2c:	e0 8b 00 08 	brhi	80006e3c <__svfscanf_r+0x214>
80006e30:	e4 c4 00 01 	sub	r4,r2,1
80006e34:	30 1b       	mov	r11,1
80006e36:	30 02       	mov	r2,0
80006e38:	50 6b       	stdsp	sp[0x18],r11
80006e3a:	c3 fb       	rjmp	80006cb8 <__svfscanf_r+0x90>
80006e3c:	31 68       	mov	r8,22
80006e3e:	40 4a       	lddsp	r10,sp[0x10]
80006e40:	95 38       	st.w	r10[0xc],r8
80006e42:	e0 8f 09 61 	bral	80008104 <__svfscanf_r+0x14dc>
80006e46:	a1 a0       	sbr	r0,0x0
80006e48:	fe c9 b6 f8 	sub	r9,pc,-18696
80006e4c:	30 a8       	mov	r8,10
80006e4e:	50 a9       	stdsp	sp[0x28],r9
80006e50:	c0 b8       	rjmp	80006e66 <__svfscanf_r+0x23e>
80006e52:	fe cb b7 02 	sub	r11,pc,-18686
80006e56:	30 0a       	mov	r10,0
80006e58:	50 ab       	stdsp	sp[0x28],r11
80006e5a:	c2 78       	rjmp	80006ea8 <__svfscanf_r+0x280>
80006e5c:	a1 a0       	sbr	r0,0x0
80006e5e:	fe c9 b4 3e 	sub	r9,pc,-19394
80006e62:	30 88       	mov	r8,8
80006e64:	50 a9       	stdsp	sp[0x28],r9
80006e66:	50 88       	stdsp	sp[0x20],r8
80006e68:	c4 c9       	rjmp	80007100 <__svfscanf_r+0x4d8>
80006e6a:	fe cb b4 4a 	sub	r11,pc,-19382
80006e6e:	30 aa       	mov	r10,10
80006e70:	50 ab       	stdsp	sp[0x28],r11
80006e72:	c1 b8       	rjmp	80006ea8 <__svfscanf_r+0x280>
80006e74:	fe c9 b4 54 	sub	r9,pc,-19372
80006e78:	a9 b0       	sbr	r0,0x9
80006e7a:	50 a9       	stdsp	sp[0x28],r9
80006e7c:	31 08       	mov	r8,16
80006e7e:	cf 4b       	rjmp	80006e66 <__svfscanf_r+0x23e>
80006e80:	30 21       	mov	r1,2
80006e82:	c4 09       	rjmp	80007102 <__svfscanf_r+0x4da>
80006e84:	40 9b       	lddsp	r11,sp[0x24]
80006e86:	fa cc fe 60 	sub	r12,sp,-416
80006e8a:	a7 a0       	sbr	r0,0x6
80006e8c:	e0 a0 1d 7a 	rcall	8000a980 <__sccl>
80006e90:	30 11       	mov	r1,1
80006e92:	50 9c       	stdsp	sp[0x24],r12
80006e94:	c3 79       	rjmp	80007102 <__svfscanf_r+0x4da>
80006e96:	a7 a0       	sbr	r0,0x6
80006e98:	30 01       	mov	r1,0
80006e9a:	c3 49       	rjmp	80007102 <__svfscanf_r+0x4da>
80006e9c:	fe cb b4 7c 	sub	r11,pc,-19332
80006ea0:	e8 10 02 20 	orl	r0,0x220
80006ea4:	50 ab       	stdsp	sp[0x28],r11
80006ea6:	31 0a       	mov	r10,16
80006ea8:	50 8a       	stdsp	sp[0x20],r10
80006eaa:	c2 b9       	rjmp	80007100 <__svfscanf_r+0x4d8>
80006eac:	ed b0 00 04 	bld	r0,0x4
80006eb0:	fe 90 fe cb 	breq	80006c46 <__svfscanf_r+0x1e>
80006eb4:	ed b0 00 02 	bld	r0,0x2
80006eb8:	c4 61       	brne	80006f44 <__svfscanf_r+0x31c>
80006eba:	40 69       	lddsp	r9,sp[0x18]
80006ebc:	58 09       	cp.w	r9,0
80006ebe:	c2 50       	breq	80006f08 <__svfscanf_r+0x2e0>
80006ec0:	0e 34       	cp.w	r4,r7
80006ec2:	c0 64       	brge	80006ece <__svfscanf_r+0x2a6>
80006ec4:	fa c8 fc d4 	sub	r8,sp,-812
80006ec8:	f0 04 00 24 	add	r4,r8,r4<<0x2
80006ecc:	c2 78       	rjmp	80006f1a <__svfscanf_r+0x2f2>
80006ece:	fa ca fd 60 	sub	r10,sp,-672
80006ed2:	0c 99       	mov	r9,r6
80006ed4:	f4 07 00 2a 	add	r10,r10,r7<<0x2
80006ed8:	0e 98       	mov	r8,r7
80006eda:	13 0b       	ld.w	r11,r9++
80006edc:	14 ab       	st.w	r10++,r11
80006ede:	2f f8       	sub	r8,-1
80006ee0:	10 34       	cp.w	r4,r8
80006ee2:	cf c4       	brge	80006eda <__svfscanf_r+0x2b2>
80006ee4:	ee c9 ff ff 	sub	r9,r7,-1
80006ee8:	ee 08 11 ff 	rsub	r8,r7,-1
80006eec:	f0 c7 ff ff 	sub	r7,r8,-1
80006ef0:	2f e8       	sub	r8,-2
80006ef2:	08 08       	add	r8,r4
80006ef4:	08 07       	add	r7,r4
80006ef6:	ec 08 00 26 	add	r6,r6,r8<<0x2
80006efa:	f2 07 00 07 	add	r7,r9,r7
80006efe:	fa c8 fd 60 	sub	r8,sp,-672
80006f02:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
80006f06:	c1 c8       	rjmp	80006f3e <__svfscanf_r+0x316>
80006f08:	e6 c8 ff ff 	sub	r8,r3,-1
80006f0c:	0e 33       	cp.w	r3,r7
80006f0e:	c0 94       	brge	80006f20 <__svfscanf_r+0x2f8>
80006f10:	fa cb fc d4 	sub	r11,sp,-812
80006f14:	10 93       	mov	r3,r8
80006f16:	f6 04 00 24 	add	r4,r11,r4<<0x2
80006f1a:	e8 f4 ff 74 	ld.w	r4,r4[-140]
80006f1e:	c1 08       	rjmp	80006f3e <__svfscanf_r+0x316>
80006f20:	6c 04       	ld.w	r4,r6[0x0]
80006f22:	2f c6       	sub	r6,-4
80006f24:	59 f7       	cp.w	r7,31
80006f26:	e0 89 00 0b 	brgt	80006f3c <__svfscanf_r+0x314>
80006f2a:	10 93       	mov	r3,r8
80006f2c:	fa ca fc d4 	sub	r10,sp,-812
80006f30:	f4 07 00 28 	add	r8,r10,r7<<0x2
80006f34:	2f f7       	sub	r7,-1
80006f36:	f1 44 ff 74 	st.w	r8[-140],r4
80006f3a:	c0 28       	rjmp	80006f3e <__svfscanf_r+0x316>
80006f3c:	10 93       	mov	r3,r8
80006f3e:	40 39       	lddsp	r9,sp[0xc]
80006f40:	a8 09       	st.h	r4[0x0],r9
80006f42:	c8 2a       	rjmp	80006c46 <__svfscanf_r+0x1e>
80006f44:	ed b0 00 00 	bld	r0,0x0
80006f48:	c4 61       	brne	80006fd4 <__svfscanf_r+0x3ac>
80006f4a:	40 68       	lddsp	r8,sp[0x18]
80006f4c:	58 08       	cp.w	r8,0
80006f4e:	c2 60       	breq	80006f9a <__svfscanf_r+0x372>
80006f50:	0e 34       	cp.w	r4,r7
80006f52:	c0 74       	brge	80006f60 <__svfscanf_r+0x338>
80006f54:	fa cb fc d4 	sub	r11,sp,-812
80006f58:	f6 04 00 24 	add	r4,r11,r4<<0x2
80006f5c:	c2 88       	rjmp	80006fac <__svfscanf_r+0x384>
80006f5e:	d7 03       	nop
80006f60:	fa ca fd 60 	sub	r10,sp,-672
80006f64:	0c 99       	mov	r9,r6
80006f66:	f4 07 00 2a 	add	r10,r10,r7<<0x2
80006f6a:	0e 98       	mov	r8,r7
80006f6c:	13 0b       	ld.w	r11,r9++
80006f6e:	14 ab       	st.w	r10++,r11
80006f70:	2f f8       	sub	r8,-1
80006f72:	10 34       	cp.w	r4,r8
80006f74:	cf c4       	brge	80006f6c <__svfscanf_r+0x344>
80006f76:	ee c9 ff ff 	sub	r9,r7,-1
80006f7a:	ee 08 11 ff 	rsub	r8,r7,-1
80006f7e:	f0 c7 ff ff 	sub	r7,r8,-1
80006f82:	2f e8       	sub	r8,-2
80006f84:	08 08       	add	r8,r4
80006f86:	08 07       	add	r7,r4
80006f88:	ec 08 00 26 	add	r6,r6,r8<<0x2
80006f8c:	f2 07 00 07 	add	r7,r9,r7
80006f90:	fa c8 fd 60 	sub	r8,sp,-672
80006f94:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
80006f98:	c1 c8       	rjmp	80006fd0 <__svfscanf_r+0x3a8>
80006f9a:	e6 c8 ff ff 	sub	r8,r3,-1
80006f9e:	0e 33       	cp.w	r3,r7
80006fa0:	c0 94       	brge	80006fb2 <__svfscanf_r+0x38a>
80006fa2:	fa ca fc d4 	sub	r10,sp,-812
80006fa6:	10 93       	mov	r3,r8
80006fa8:	f4 04 00 24 	add	r4,r10,r4<<0x2
80006fac:	e8 f4 ff 74 	ld.w	r4,r4[-140]
80006fb0:	c1 08       	rjmp	80006fd0 <__svfscanf_r+0x3a8>
80006fb2:	6c 04       	ld.w	r4,r6[0x0]
80006fb4:	2f c6       	sub	r6,-4
80006fb6:	59 f7       	cp.w	r7,31
80006fb8:	e0 89 00 0b 	brgt	80006fce <__svfscanf_r+0x3a6>
80006fbc:	10 93       	mov	r3,r8
80006fbe:	fa c9 fc d4 	sub	r9,sp,-812
80006fc2:	f2 07 00 28 	add	r8,r9,r7<<0x2
80006fc6:	2f f7       	sub	r7,-1
80006fc8:	f1 44 ff 74 	st.w	r8[-140],r4
80006fcc:	c0 28       	rjmp	80006fd0 <__svfscanf_r+0x3a8>
80006fce:	10 93       	mov	r3,r8
80006fd0:	40 38       	lddsp	r8,sp[0xc]
80006fd2:	c4 a8       	rjmp	80007066 <__svfscanf_r+0x43e>
80006fd4:	e2 10 00 02 	andl	r0,0x2,COH
80006fd8:	c4 a0       	breq	8000706c <__svfscanf_r+0x444>
80006fda:	40 6b       	lddsp	r11,sp[0x18]
80006fdc:	58 0b       	cp.w	r11,0
80006fde:	c2 50       	breq	80007028 <__svfscanf_r+0x400>
80006fe0:	0e 34       	cp.w	r4,r7
80006fe2:	c0 64       	brge	80006fee <__svfscanf_r+0x3c6>
80006fe4:	fa ca fc d4 	sub	r10,sp,-812
80006fe8:	f4 04 00 24 	add	r4,r10,r4<<0x2
80006fec:	c2 78       	rjmp	8000703a <__svfscanf_r+0x412>
80006fee:	fa ca fd 60 	sub	r10,sp,-672
80006ff2:	0c 99       	mov	r9,r6
80006ff4:	f4 07 00 2a 	add	r10,r10,r7<<0x2
80006ff8:	0e 98       	mov	r8,r7
80006ffa:	13 0b       	ld.w	r11,r9++
80006ffc:	14 ab       	st.w	r10++,r11
80006ffe:	2f f8       	sub	r8,-1
80007000:	10 34       	cp.w	r4,r8
80007002:	cf c4       	brge	80006ffa <__svfscanf_r+0x3d2>
80007004:	ee c9 ff ff 	sub	r9,r7,-1
80007008:	ee 08 11 ff 	rsub	r8,r7,-1
8000700c:	f0 c7 ff ff 	sub	r7,r8,-1
80007010:	2f e8       	sub	r8,-2
80007012:	08 08       	add	r8,r4
80007014:	08 07       	add	r7,r4
80007016:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000701a:	f2 07 00 07 	add	r7,r9,r7
8000701e:	fa c8 fd 60 	sub	r8,sp,-672
80007022:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
80007026:	c1 c8       	rjmp	8000705e <__svfscanf_r+0x436>
80007028:	e6 c8 ff ff 	sub	r8,r3,-1
8000702c:	0e 33       	cp.w	r3,r7
8000702e:	c0 94       	brge	80007040 <__svfscanf_r+0x418>
80007030:	fa c9 fc d4 	sub	r9,sp,-812
80007034:	10 93       	mov	r3,r8
80007036:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000703a:	e8 f4 ff 74 	ld.w	r4,r4[-140]
8000703e:	c1 08       	rjmp	8000705e <__svfscanf_r+0x436>
80007040:	6c 04       	ld.w	r4,r6[0x0]
80007042:	2f c6       	sub	r6,-4
80007044:	59 f7       	cp.w	r7,31
80007046:	e0 89 00 0b 	brgt	8000705c <__svfscanf_r+0x434>
8000704a:	10 93       	mov	r3,r8
8000704c:	fa cb fc d4 	sub	r11,sp,-812
80007050:	f6 07 00 28 	add	r8,r11,r7<<0x2
80007054:	2f f7       	sub	r7,-1
80007056:	f1 44 ff 74 	st.w	r8[-140],r4
8000705a:	c0 28       	rjmp	8000705e <__svfscanf_r+0x436>
8000705c:	10 93       	mov	r3,r8
8000705e:	40 3a       	lddsp	r10,sp[0xc]
80007060:	14 98       	mov	r8,r10
80007062:	89 1a       	st.w	r4[0x4],r10
80007064:	bf 58       	asr	r8,0x1f
80007066:	89 08       	st.w	r4[0x0],r8
80007068:	fe 9f fd ef 	bral	80006c46 <__svfscanf_r+0x1e>
8000706c:	40 69       	lddsp	r9,sp[0x18]
8000706e:	58 09       	cp.w	r9,0
80007070:	c1 f0       	breq	800070ae <__svfscanf_r+0x486>
80007072:	0e 34       	cp.w	r4,r7
80007074:	c0 85       	brlt	80007084 <__svfscanf_r+0x45c>
80007076:	fa ca fd 60 	sub	r10,sp,-672
8000707a:	0c 99       	mov	r9,r6
8000707c:	f4 07 00 2a 	add	r10,r10,r7<<0x2
80007080:	0e 98       	mov	r8,r7
80007082:	c0 68       	rjmp	8000708e <__svfscanf_r+0x466>
80007084:	fa c8 fc d4 	sub	r8,sp,-812
80007088:	f0 04 00 24 	add	r4,r8,r4<<0x2
8000708c:	c1 a8       	rjmp	800070c0 <__svfscanf_r+0x498>
8000708e:	13 0b       	ld.w	r11,r9++
80007090:	14 ab       	st.w	r10++,r11
80007092:	2f f8       	sub	r8,-1
80007094:	10 34       	cp.w	r4,r8
80007096:	cf c4       	brge	8000708e <__svfscanf_r+0x466>
80007098:	ee 08 11 01 	rsub	r8,r7,1
8000709c:	08 08       	add	r8,r4
8000709e:	10 07       	add	r7,r8
800070a0:	ec 08 00 26 	add	r6,r6,r8<<0x2
800070a4:	fa c8 fd 60 	sub	r8,sp,-672
800070a8:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
800070ac:	c1 c8       	rjmp	800070e4 <__svfscanf_r+0x4bc>
800070ae:	e6 c8 ff ff 	sub	r8,r3,-1
800070b2:	0e 33       	cp.w	r3,r7
800070b4:	c0 94       	brge	800070c6 <__svfscanf_r+0x49e>
800070b6:	fa cb fc d4 	sub	r11,sp,-812
800070ba:	10 93       	mov	r3,r8
800070bc:	f6 04 00 24 	add	r4,r11,r4<<0x2
800070c0:	e8 f4 ff 74 	ld.w	r4,r4[-140]
800070c4:	c1 08       	rjmp	800070e4 <__svfscanf_r+0x4bc>
800070c6:	6c 04       	ld.w	r4,r6[0x0]
800070c8:	2f c6       	sub	r6,-4
800070ca:	59 f7       	cp.w	r7,31
800070cc:	e0 89 00 0b 	brgt	800070e2 <__svfscanf_r+0x4ba>
800070d0:	10 93       	mov	r3,r8
800070d2:	fa ca fc d4 	sub	r10,sp,-812
800070d6:	f4 07 00 28 	add	r8,r10,r7<<0x2
800070da:	2f f7       	sub	r7,-1
800070dc:	f1 44 ff 74 	st.w	r8[-140],r4
800070e0:	c0 28       	rjmp	800070e4 <__svfscanf_r+0x4bc>
800070e2:	10 93       	mov	r3,r8
800070e4:	40 39       	lddsp	r9,sp[0xc]
800070e6:	89 09       	st.w	r4[0x0],r9
800070e8:	fe 9f fd af 	bral	80006c46 <__svfscanf_r+0x1e>
800070ec:	e2 08 07 08 	ld.ub	r8,r1[r8]
800070f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800070f4:	30 ab       	mov	r11,10
800070f6:	10 40       	or	r0,r8
800070f8:	50 8b       	stdsp	sp[0x20],r11
800070fa:	fe c8 b9 aa 	sub	r8,pc,-18006
800070fe:	50 a8       	stdsp	sp[0x28],r8
80007100:	30 31       	mov	r1,3
80007102:	6a 18       	ld.w	r8,r5[0x4]
80007104:	58 08       	cp.w	r8,0
80007106:	e0 89 00 08 	brgt	80007116 <__svfscanf_r+0x4ee>
8000710a:	0a 9b       	mov	r11,r5
8000710c:	40 4c       	lddsp	r12,sp[0x10]
8000710e:	e0 a0 1b 7f 	rcall	8000a80c <__srefill_r>
80007112:	e0 81 07 f9 	brne	80008104 <__svfscanf_r+0x14dc>
80007116:	ed b0 00 06 	bld	r0,0x6
8000711a:	c1 31       	brne	80007140 <__svfscanf_r+0x518>
8000711c:	c1 e8       	rjmp	80007158 <__svfscanf_r+0x530>
8000711e:	6a 18       	ld.w	r8,r5[0x4]
80007120:	20 18       	sub	r8,1
80007122:	8b 18       	st.w	r5[0x4],r8
80007124:	58 08       	cp.w	r8,0
80007126:	e0 8a 00 04 	brle	8000712e <__svfscanf_r+0x506>
8000712a:	8b 0a       	st.w	r5[0x0],r10
8000712c:	c0 78       	rjmp	8000713a <__svfscanf_r+0x512>
8000712e:	0a 9b       	mov	r11,r5
80007130:	40 4c       	lddsp	r12,sp[0x10]
80007132:	e0 a0 1b 6d 	rcall	8000a80c <__srefill_r>
80007136:	e0 81 07 e7 	brne	80008104 <__svfscanf_r+0x14dc>
8000713a:	40 3a       	lddsp	r10,sp[0xc]
8000713c:	2f fa       	sub	r10,-1
8000713e:	50 3a       	stdsp	sp[0xc],r10
80007140:	6a 08       	ld.w	r8,r5[0x0]
80007142:	e0 6b 01 98 	mov	r11,408
80007146:	f0 ca ff ff 	sub	r10,r8,-1
8000714a:	76 09       	ld.w	r9,r11[0x0]
8000714c:	11 88       	ld.ub	r8,r8[0x0]
8000714e:	f2 08 07 08 	ld.ub	r8,r9[r8]
80007152:	ed b8 00 03 	bld	r8,0x3
80007156:	ce 40       	breq	8000711e <__svfscanf_r+0x4f6>
80007158:	58 21       	cp.w	r1,2
8000715a:	e0 80 01 c1 	breq	800074dc <__svfscanf_r+0x8b4>
8000715e:	e0 89 00 05 	brgt	80007168 <__svfscanf_r+0x540>
80007162:	58 11       	cp.w	r1,1
80007164:	c0 81       	brne	80007174 <__svfscanf_r+0x54c>
80007166:	c1 b9       	rjmp	8000739c <__svfscanf_r+0x774>
80007168:	58 31       	cp.w	r1,3
8000716a:	e0 80 03 13 	breq	80007790 <__svfscanf_r+0xb68>
8000716e:	58 41       	cp.w	r1,4
80007170:	e0 80 05 1c 	breq	80007ba8 <__svfscanf_r+0xf80>
80007174:	00 9a       	mov	r10,r0
80007176:	e2 1a 00 10 	andl	r10,0x10,COH
8000717a:	50 5a       	stdsp	sp[0x14],r10
8000717c:	58 02       	cp.w	r2,0
8000717e:	f9 b2 00 01 	moveq	r2,1
80007182:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80007186:	e0 80 00 9d 	breq	800072c0 <__svfscanf_r+0x698>
8000718a:	58 0a       	cp.w	r10,0
8000718c:	c0 30       	breq	80007192 <__svfscanf_r+0x56a>
8000718e:	30 00       	mov	r0,0
80007190:	c4 48       	rjmp	80007218 <__svfscanf_r+0x5f0>
80007192:	40 69       	lddsp	r9,sp[0x18]
80007194:	58 09       	cp.w	r9,0
80007196:	c2 50       	breq	800071e0 <__svfscanf_r+0x5b8>
80007198:	0e 34       	cp.w	r4,r7
8000719a:	c0 64       	brge	800071a6 <__svfscanf_r+0x57e>
8000719c:	fa c8 fc d4 	sub	r8,sp,-812
800071a0:	f0 04 00 24 	add	r4,r8,r4<<0x2
800071a4:	c2 78       	rjmp	800071f2 <__svfscanf_r+0x5ca>
800071a6:	fa ca fd 60 	sub	r10,sp,-672
800071aa:	0c 99       	mov	r9,r6
800071ac:	f4 07 00 2a 	add	r10,r10,r7<<0x2
800071b0:	0e 98       	mov	r8,r7
800071b2:	13 0b       	ld.w	r11,r9++
800071b4:	14 ab       	st.w	r10++,r11
800071b6:	2f f8       	sub	r8,-1
800071b8:	10 34       	cp.w	r4,r8
800071ba:	cf c4       	brge	800071b2 <__svfscanf_r+0x58a>
800071bc:	ee c9 ff ff 	sub	r9,r7,-1
800071c0:	ee 08 11 ff 	rsub	r8,r7,-1
800071c4:	f0 c7 ff ff 	sub	r7,r8,-1
800071c8:	2f e8       	sub	r8,-2
800071ca:	08 08       	add	r8,r4
800071cc:	08 07       	add	r7,r4
800071ce:	ec 08 00 26 	add	r6,r6,r8<<0x2
800071d2:	f2 07 00 07 	add	r7,r9,r7
800071d6:	fa c8 fd 60 	sub	r8,sp,-672
800071da:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
800071de:	c1 c8       	rjmp	80007216 <__svfscanf_r+0x5ee>
800071e0:	e6 c8 ff ff 	sub	r8,r3,-1
800071e4:	0e 33       	cp.w	r3,r7
800071e6:	c0 94       	brge	800071f8 <__svfscanf_r+0x5d0>
800071e8:	fa cb fc d4 	sub	r11,sp,-812
800071ec:	10 93       	mov	r3,r8
800071ee:	f6 04 00 24 	add	r4,r11,r4<<0x2
800071f2:	e8 f4 ff 74 	ld.w	r4,r4[-140]
800071f6:	c1 08       	rjmp	80007216 <__svfscanf_r+0x5ee>
800071f8:	6c 04       	ld.w	r4,r6[0x0]
800071fa:	2f c6       	sub	r6,-4
800071fc:	59 f7       	cp.w	r7,31
800071fe:	e0 89 00 0b 	brgt	80007214 <__svfscanf_r+0x5ec>
80007202:	10 93       	mov	r3,r8
80007204:	fa ca fc d4 	sub	r10,sp,-812
80007208:	f4 07 00 28 	add	r8,r10,r7<<0x2
8000720c:	2f f7       	sub	r7,-1
8000720e:	f1 44 ff 74 	st.w	r8[-140],r4
80007212:	c0 28       	rjmp	80007216 <__svfscanf_r+0x5ee>
80007214:	10 93       	mov	r3,r8
80007216:	08 90       	mov	r0,r4
80007218:	30 04       	mov	r4,0
8000721a:	e0 61 01 9c 	mov	r1,412
8000721e:	62 08       	ld.w	r8,r1[0x0]
80007220:	10 34       	cp.w	r4,r8
80007222:	e0 80 07 71 	breq	80008104 <__svfscanf_r+0x14dc>
80007226:	6a 08       	ld.w	r8,r5[0x0]
80007228:	11 89       	ld.ub	r9,r8[0x0]
8000722a:	fa c8 fc d4 	sub	r8,sp,-812
8000722e:	08 08       	add	r8,r4
80007230:	f1 69 fd 14 	st.b	r8[-748],r9
80007234:	6a 18       	ld.w	r8,r5[0x4]
80007236:	20 18       	sub	r8,1
80007238:	8b 18       	st.w	r5[0x4],r8
8000723a:	6a 08       	ld.w	r8,r5[0x0]
8000723c:	2f f8       	sub	r8,-1
8000723e:	30 8a       	mov	r10,8
80007240:	8b 08       	st.w	r5[0x0],r8
80007242:	30 0b       	mov	r11,0
80007244:	fa cc fc e0 	sub	r12,sp,-800
80007248:	fe b0 ea f6 	rcall	80004834 <memset>
8000724c:	2f f4       	sub	r4,-1
8000724e:	fa c8 fc e0 	sub	r8,sp,-800
80007252:	08 99       	mov	r9,r4
80007254:	fa ca ff c0 	sub	r10,sp,-64
80007258:	00 9b       	mov	r11,r0
8000725a:	40 4c       	lddsp	r12,sp[0x10]
8000725c:	e0 a0 15 20 	rcall	80009c9c <_mbrtowc_r>
80007260:	5b fc       	cp.w	r12,-1
80007262:	e0 80 07 51 	breq	80008104 <__svfscanf_r+0x14dc>
80007266:	58 0c       	cp.w	r12,0
80007268:	c0 61       	brne	80007274 <__svfscanf_r+0x64c>
8000726a:	40 59       	lddsp	r9,sp[0x14]
8000726c:	58 09       	cp.w	r9,0
8000726e:	c0 51       	brne	80007278 <__svfscanf_r+0x650>
80007270:	81 09       	st.w	r0[0x0],r9
80007272:	c0 38       	rjmp	80007278 <__svfscanf_r+0x650>
80007274:	5b ec       	cp.w	r12,-2
80007276:	c0 d0       	breq	80007290 <__svfscanf_r+0x668>
80007278:	40 38       	lddsp	r8,sp[0xc]
8000727a:	40 5b       	lddsp	r11,sp[0x14]
8000727c:	08 08       	add	r8,r4
8000727e:	20 12       	sub	r2,1
80007280:	58 0b       	cp.w	r11,0
80007282:	f9 b4 01 00 	movne	r4,0
80007286:	f7 b0 00 fc 	subeq	r0,-4
8000728a:	fb f4 00 05 	ld.weq	r4,sp[0x14]
8000728e:	50 38       	stdsp	sp[0xc],r8
80007290:	6a 18       	ld.w	r8,r5[0x4]
80007292:	58 08       	cp.w	r8,0
80007294:	e0 89 00 0b 	brgt	800072aa <__svfscanf_r+0x682>
80007298:	0a 9b       	mov	r11,r5
8000729a:	40 4c       	lddsp	r12,sp[0x10]
8000729c:	e0 a0 1a b8 	rcall	8000a80c <__srefill_r>
800072a0:	c0 50       	breq	800072aa <__svfscanf_r+0x682>
800072a2:	58 04       	cp.w	r4,0
800072a4:	c0 50       	breq	800072ae <__svfscanf_r+0x686>
800072a6:	e0 8f 07 2f 	bral	80008104 <__svfscanf_r+0x14dc>
800072aa:	58 02       	cp.w	r2,0
800072ac:	cb 91       	brne	8000721e <__svfscanf_r+0x5f6>
800072ae:	40 5a       	lddsp	r10,sp[0x14]
800072b0:	58 0a       	cp.w	r10,0
800072b2:	fe 91 fc ca 	brne	80006c46 <__svfscanf_r+0x1e>
800072b6:	40 79       	lddsp	r9,sp[0x1c]
800072b8:	2f f9       	sub	r9,-1
800072ba:	50 79       	stdsp	sp[0x1c],r9
800072bc:	fe 9f fc c5 	bral	80006c46 <__svfscanf_r+0x1e>
800072c0:	40 58       	lddsp	r8,sp[0x14]
800072c2:	58 08       	cp.w	r8,0
800072c4:	c1 d0       	breq	800072fe <__svfscanf_r+0x6d6>
800072c6:	6a 18       	ld.w	r8,r5[0x4]
800072c8:	6a 09       	ld.w	r9,r5[0x0]
800072ca:	04 38       	cp.w	r8,r2
800072cc:	c0 e4       	brge	800072e8 <__svfscanf_r+0x6c0>
800072ce:	10 09       	add	r9,r8
800072d0:	10 12       	sub	r2,r8
800072d2:	8b 09       	st.w	r5[0x0],r9
800072d4:	10 00       	add	r0,r8
800072d6:	0a 9b       	mov	r11,r5
800072d8:	40 4c       	lddsp	r12,sp[0x10]
800072da:	e0 a0 1a 99 	rcall	8000a80c <__srefill_r>
800072de:	cf 40       	breq	800072c6 <__svfscanf_r+0x69e>
800072e0:	58 00       	cp.w	r0,0
800072e2:	c0 81       	brne	800072f2 <__svfscanf_r+0x6ca>
800072e4:	e0 8f 07 10 	bral	80008104 <__svfscanf_r+0x14dc>
800072e8:	04 09       	add	r9,r2
800072ea:	04 18       	sub	r8,r2
800072ec:	8b 09       	st.w	r5[0x0],r9
800072ee:	8b 18       	st.w	r5[0x4],r8
800072f0:	04 00       	add	r0,r2
800072f2:	40 3b       	lddsp	r11,sp[0xc]
800072f4:	e0 0b 00 0b 	add	r11,r0,r11
800072f8:	50 3b       	stdsp	sp[0xc],r11
800072fa:	fe 9f fc a6 	bral	80006c46 <__svfscanf_r+0x1e>
800072fe:	40 6a       	lddsp	r10,sp[0x18]
80007300:	58 0a       	cp.w	r10,0
80007302:	c2 50       	breq	8000734c <__svfscanf_r+0x724>
80007304:	0e 34       	cp.w	r4,r7
80007306:	c0 64       	brge	80007312 <__svfscanf_r+0x6ea>
80007308:	fa c9 fc d4 	sub	r9,sp,-812
8000730c:	f2 04 00 24 	add	r4,r9,r4<<0x2
80007310:	c2 78       	rjmp	8000735e <__svfscanf_r+0x736>
80007312:	fa ca fd 60 	sub	r10,sp,-672
80007316:	0c 99       	mov	r9,r6
80007318:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000731c:	0e 98       	mov	r8,r7
8000731e:	13 0b       	ld.w	r11,r9++
80007320:	14 ab       	st.w	r10++,r11
80007322:	2f f8       	sub	r8,-1
80007324:	10 34       	cp.w	r4,r8
80007326:	cf c4       	brge	8000731e <__svfscanf_r+0x6f6>
80007328:	ee c9 ff ff 	sub	r9,r7,-1
8000732c:	ee 08 11 ff 	rsub	r8,r7,-1
80007330:	f0 c7 ff ff 	sub	r7,r8,-1
80007334:	2f e8       	sub	r8,-2
80007336:	08 08       	add	r8,r4
80007338:	08 07       	add	r7,r4
8000733a:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000733e:	f2 07 00 07 	add	r7,r9,r7
80007342:	fa c8 fd 60 	sub	r8,sp,-672
80007346:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000734a:	c1 c8       	rjmp	80007382 <__svfscanf_r+0x75a>
8000734c:	e6 c8 ff ff 	sub	r8,r3,-1
80007350:	0e 33       	cp.w	r3,r7
80007352:	c0 94       	brge	80007364 <__svfscanf_r+0x73c>
80007354:	fa cb fc d4 	sub	r11,sp,-812
80007358:	10 93       	mov	r3,r8
8000735a:	f6 04 00 24 	add	r4,r11,r4<<0x2
8000735e:	e8 f4 ff 74 	ld.w	r4,r4[-140]
80007362:	c1 08       	rjmp	80007382 <__svfscanf_r+0x75a>
80007364:	6c 04       	ld.w	r4,r6[0x0]
80007366:	2f c6       	sub	r6,-4
80007368:	59 f7       	cp.w	r7,31
8000736a:	e0 89 00 0b 	brgt	80007380 <__svfscanf_r+0x758>
8000736e:	10 93       	mov	r3,r8
80007370:	fa ca fc d4 	sub	r10,sp,-812
80007374:	f4 07 00 28 	add	r8,r10,r7<<0x2
80007378:	2f f7       	sub	r7,-1
8000737a:	f1 44 ff 74 	st.w	r8[-140],r4
8000737e:	c0 28       	rjmp	80007382 <__svfscanf_r+0x75a>
80007380:	10 93       	mov	r3,r8
80007382:	04 9a       	mov	r10,r2
80007384:	08 9c       	mov	r12,r4
80007386:	0a 99       	mov	r9,r5
80007388:	30 1b       	mov	r11,1
8000738a:	e0 a0 0f 3f 	rcall	80009208 <fread>
8000738e:	e0 80 06 bb 	breq	80008104 <__svfscanf_r+0x14dc>
80007392:	40 39       	lddsp	r9,sp[0xc]
80007394:	f8 09 00 09 	add	r9,r12,r9
80007398:	50 39       	stdsp	sp[0xc],r9
8000739a:	c6 39       	rjmp	80007660 <__svfscanf_r+0xa38>
8000739c:	58 02       	cp.w	r2,0
8000739e:	f9 b2 00 ff 	moveq	r2,-1
800073a2:	e2 10 00 10 	andl	r0,0x10,COH
800073a6:	c2 60       	breq	800073f2 <__svfscanf_r+0x7ca>
800073a8:	30 04       	mov	r4,0
800073aa:	08 91       	mov	r1,r4
800073ac:	c1 28       	rjmp	800073d0 <__svfscanf_r+0x7a8>
800073ae:	6a 18       	ld.w	r8,r5[0x4]
800073b0:	8b 09       	st.w	r5[0x0],r9
800073b2:	20 18       	sub	r8,1
800073b4:	8b 18       	st.w	r5[0x4],r8
800073b6:	2f f4       	sub	r4,-1
800073b8:	08 32       	cp.w	r2,r4
800073ba:	e0 80 00 8c 	breq	800074d2 <__svfscanf_r+0x8aa>
800073be:	58 08       	cp.w	r8,0
800073c0:	e0 89 00 08 	brgt	800073d0 <__svfscanf_r+0x7a8>
800073c4:	0a 9b       	mov	r11,r5
800073c6:	40 4c       	lddsp	r12,sp[0x10]
800073c8:	e0 a0 1a 22 	rcall	8000a80c <__srefill_r>
800073cc:	e0 81 00 83 	brne	800074d2 <__svfscanf_r+0x8aa>
800073d0:	6a 08       	ld.w	r8,r5[0x0]
800073d2:	fa cb fc d4 	sub	r11,sp,-812
800073d6:	f0 c9 ff ff 	sub	r9,r8,-1
800073da:	11 88       	ld.ub	r8,r8[0x0]
800073dc:	f6 08 00 08 	add	r8,r11,r8
800073e0:	f1 38 fe 74 	ld.ub	r8,r8[-396]
800073e4:	e2 08 18 00 	cp.b	r8,r1
800073e8:	ce 31       	brne	800073ae <__svfscanf_r+0x786>
800073ea:	58 04       	cp.w	r4,0
800073ec:	c7 31       	brne	800074d2 <__svfscanf_r+0x8aa>
800073ee:	e0 8f 06 94 	bral	80008116 <__svfscanf_r+0x14ee>
800073f2:	40 6a       	lddsp	r10,sp[0x18]
800073f4:	58 0a       	cp.w	r10,0
800073f6:	c2 50       	breq	80007440 <__svfscanf_r+0x818>
800073f8:	0e 34       	cp.w	r4,r7
800073fa:	c0 64       	brge	80007406 <__svfscanf_r+0x7de>
800073fc:	fa c9 fc d4 	sub	r9,sp,-812
80007400:	f2 04 00 24 	add	r4,r9,r4<<0x2
80007404:	c2 78       	rjmp	80007452 <__svfscanf_r+0x82a>
80007406:	fa ca fd 60 	sub	r10,sp,-672
8000740a:	0c 99       	mov	r9,r6
8000740c:	f4 07 00 2a 	add	r10,r10,r7<<0x2
80007410:	0e 98       	mov	r8,r7
80007412:	13 0b       	ld.w	r11,r9++
80007414:	14 ab       	st.w	r10++,r11
80007416:	2f f8       	sub	r8,-1
80007418:	10 34       	cp.w	r4,r8
8000741a:	cf c4       	brge	80007412 <__svfscanf_r+0x7ea>
8000741c:	ee c9 ff ff 	sub	r9,r7,-1
80007420:	ee 08 11 ff 	rsub	r8,r7,-1
80007424:	f0 c7 ff ff 	sub	r7,r8,-1
80007428:	2f e8       	sub	r8,-2
8000742a:	08 08       	add	r8,r4
8000742c:	08 07       	add	r7,r4
8000742e:	ec 08 00 26 	add	r6,r6,r8<<0x2
80007432:	f2 07 00 07 	add	r7,r9,r7
80007436:	fa c8 fd 60 	sub	r8,sp,-672
8000743a:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
8000743e:	c1 c8       	rjmp	80007476 <__svfscanf_r+0x84e>
80007440:	e6 c8 ff ff 	sub	r8,r3,-1
80007444:	0e 33       	cp.w	r3,r7
80007446:	c0 94       	brge	80007458 <__svfscanf_r+0x830>
80007448:	fa cb fc d4 	sub	r11,sp,-812
8000744c:	10 93       	mov	r3,r8
8000744e:	f6 04 00 24 	add	r4,r11,r4<<0x2
80007452:	e8 f4 ff 74 	ld.w	r4,r4[-140]
80007456:	c1 08       	rjmp	80007476 <__svfscanf_r+0x84e>
80007458:	6c 04       	ld.w	r4,r6[0x0]
8000745a:	2f c6       	sub	r6,-4
8000745c:	59 f7       	cp.w	r7,31
8000745e:	e0 89 00 0b 	brgt	80007474 <__svfscanf_r+0x84c>
80007462:	10 93       	mov	r3,r8
80007464:	fa ca fc d4 	sub	r10,sp,-812
80007468:	f4 07 00 28 	add	r8,r10,r7<<0x2
8000746c:	2f f7       	sub	r7,-1
8000746e:	f1 44 ff 74 	st.w	r8[-140],r4
80007472:	c0 28       	rjmp	80007476 <__svfscanf_r+0x84e>
80007474:	10 93       	mov	r3,r8
80007476:	08 91       	mov	r1,r4
80007478:	30 00       	mov	r0,0
8000747a:	c1 68       	rjmp	800074a6 <__svfscanf_r+0x87e>
8000747c:	6a 19       	ld.w	r9,r5[0x4]
8000747e:	20 19       	sub	r9,1
80007480:	8b 19       	st.w	r5[0x4],r9
80007482:	11 39       	ld.ub	r9,r8++
80007484:	02 c9       	st.b	r1++,r9
80007486:	8b 08       	st.w	r5[0x0],r8
80007488:	58 02       	cp.w	r2,0
8000748a:	c1 b0       	breq	800074c0 <__svfscanf_r+0x898>
8000748c:	6a 18       	ld.w	r8,r5[0x4]
8000748e:	58 08       	cp.w	r8,0
80007490:	e0 89 00 0b 	brgt	800074a6 <__svfscanf_r+0x87e>
80007494:	0a 9b       	mov	r11,r5
80007496:	40 4c       	lddsp	r12,sp[0x10]
80007498:	e0 a0 19 ba 	rcall	8000a80c <__srefill_r>
8000749c:	c0 50       	breq	800074a6 <__svfscanf_r+0x87e>
8000749e:	08 31       	cp.w	r1,r4
800074a0:	c1 01       	brne	800074c0 <__svfscanf_r+0x898>
800074a2:	e0 8f 06 31 	bral	80008104 <__svfscanf_r+0x14dc>
800074a6:	6a 09       	ld.w	r9,r5[0x0]
800074a8:	fa cb fc d4 	sub	r11,sp,-812
800074ac:	12 98       	mov	r8,r9
800074ae:	20 12       	sub	r2,1
800074b0:	13 89       	ld.ub	r9,r9[0x0]
800074b2:	f6 09 00 09 	add	r9,r11,r9
800074b6:	f3 39 fe 74 	ld.ub	r9,r9[-396]
800074ba:	e0 09 18 00 	cp.b	r9,r0
800074be:	cd f1       	brne	8000747c <__svfscanf_r+0x854>
800074c0:	e2 04 01 04 	sub	r4,r1,r4
800074c4:	e0 80 06 29 	breq	80008116 <__svfscanf_r+0x14ee>
800074c8:	40 7a       	lddsp	r10,sp[0x1c]
800074ca:	2f fa       	sub	r10,-1
800074cc:	50 7a       	stdsp	sp[0x1c],r10
800074ce:	30 08       	mov	r8,0
800074d0:	a2 88       	st.b	r1[0x0],r8
800074d2:	40 39       	lddsp	r9,sp[0xc]
800074d4:	08 09       	add	r9,r4
800074d6:	50 39       	stdsp	sp[0xc],r9
800074d8:	fe 9f fb b7 	bral	80006c46 <__svfscanf_r+0x1e>
800074dc:	00 98       	mov	r8,r0
800074de:	e2 18 00 10 	andl	r8,0x10,COH
800074e2:	50 58       	stdsp	sp[0x14],r8
800074e4:	58 02       	cp.w	r2,0
800074e6:	f9 b2 00 ff 	moveq	r2,-1
800074ea:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
800074ee:	e0 80 00 be 	breq	8000766a <__svfscanf_r+0xa42>
800074f2:	58 08       	cp.w	r8,0
800074f4:	c0 40       	breq	800074fc <__svfscanf_r+0x8d4>
800074f6:	fa c0 fc d8 	sub	r0,sp,-808
800074fa:	c4 48       	rjmp	80007582 <__svfscanf_r+0x95a>
800074fc:	40 6b       	lddsp	r11,sp[0x18]
800074fe:	58 0b       	cp.w	r11,0
80007500:	c2 50       	breq	8000754a <__svfscanf_r+0x922>
80007502:	0e 34       	cp.w	r4,r7
80007504:	c0 64       	brge	80007510 <__svfscanf_r+0x8e8>
80007506:	fa ca fc d4 	sub	r10,sp,-812
8000750a:	f4 04 00 24 	add	r4,r10,r4<<0x2
8000750e:	c2 78       	rjmp	8000755c <__svfscanf_r+0x934>
80007510:	fa ca fd 60 	sub	r10,sp,-672
80007514:	0c 99       	mov	r9,r6
80007516:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000751a:	0e 98       	mov	r8,r7
8000751c:	13 0b       	ld.w	r11,r9++
8000751e:	14 ab       	st.w	r10++,r11
80007520:	2f f8       	sub	r8,-1
80007522:	10 34       	cp.w	r4,r8
80007524:	cf c4       	brge	8000751c <__svfscanf_r+0x8f4>
80007526:	ee c9 ff ff 	sub	r9,r7,-1
8000752a:	ee 08 11 ff 	rsub	r8,r7,-1
8000752e:	f0 c7 ff ff 	sub	r7,r8,-1
80007532:	2f e8       	sub	r8,-2
80007534:	08 08       	add	r8,r4
80007536:	08 07       	add	r7,r4
80007538:	ec 08 00 26 	add	r6,r6,r8<<0x2
8000753c:	f2 07 00 07 	add	r7,r9,r7
80007540:	fa c8 fd 60 	sub	r8,sp,-672
80007544:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
80007548:	c1 c8       	rjmp	80007580 <__svfscanf_r+0x958>
8000754a:	e6 c8 ff ff 	sub	r8,r3,-1
8000754e:	0e 33       	cp.w	r3,r7
80007550:	c0 94       	brge	80007562 <__svfscanf_r+0x93a>
80007552:	fa c9 fc d4 	sub	r9,sp,-812
80007556:	10 93       	mov	r3,r8
80007558:	f2 04 00 24 	add	r4,r9,r4<<0x2
8000755c:	e8 f4 ff 74 	ld.w	r4,r4[-140]
80007560:	c1 08       	rjmp	80007580 <__svfscanf_r+0x958>
80007562:	6c 04       	ld.w	r4,r6[0x0]
80007564:	2f c6       	sub	r6,-4
80007566:	59 f7       	cp.w	r7,31
80007568:	e0 89 00 0b 	brgt	8000757e <__svfscanf_r+0x956>
8000756c:	10 93       	mov	r3,r8
8000756e:	fa cb fc d4 	sub	r11,sp,-812
80007572:	f6 07 00 28 	add	r8,r11,r7<<0x2
80007576:	2f f7       	sub	r7,-1
80007578:	f1 44 ff 74 	st.w	r8[-140],r4
8000757c:	c0 28       	rjmp	80007580 <__svfscanf_r+0x958>
8000757e:	10 93       	mov	r3,r8
80007580:	08 90       	mov	r0,r4
80007582:	30 01       	mov	r1,0
80007584:	e0 64 01 9c 	mov	r4,412
80007588:	c5 68       	rjmp	80007634 <__svfscanf_r+0xa0c>
8000758a:	68 08       	ld.w	r8,r4[0x0]
8000758c:	10 31       	cp.w	r1,r8
8000758e:	e0 80 05 bb 	breq	80008104 <__svfscanf_r+0x14dc>
80007592:	fa c8 fc d4 	sub	r8,sp,-812
80007596:	02 08       	add	r8,r1
80007598:	f1 69 fd 14 	st.b	r8[-748],r9
8000759c:	6a 18       	ld.w	r8,r5[0x4]
8000759e:	20 18       	sub	r8,1
800075a0:	8b 18       	st.w	r5[0x4],r8
800075a2:	6a 08       	ld.w	r8,r5[0x0]
800075a4:	2f f8       	sub	r8,-1
800075a6:	30 8a       	mov	r10,8
800075a8:	8b 08       	st.w	r5[0x0],r8
800075aa:	30 0b       	mov	r11,0
800075ac:	fa cc fc e0 	sub	r12,sp,-800
800075b0:	fe b0 e9 42 	rcall	80004834 <memset>
800075b4:	2f f1       	sub	r1,-1
800075b6:	fa c8 fc e0 	sub	r8,sp,-800
800075ba:	02 99       	mov	r9,r1
800075bc:	fa ca ff c0 	sub	r10,sp,-64
800075c0:	00 9b       	mov	r11,r0
800075c2:	40 4c       	lddsp	r12,sp[0x10]
800075c4:	e0 a0 13 6c 	rcall	80009c9c <_mbrtowc_r>
800075c8:	5b fc       	cp.w	r12,-1
800075ca:	e0 80 05 9d 	breq	80008104 <__svfscanf_r+0x14dc>
800075ce:	58 0c       	cp.w	r12,0
800075d0:	c0 31       	brne	800075d6 <__svfscanf_r+0x9ae>
800075d2:	81 0c       	st.w	r0[0x0],r12
800075d4:	c0 38       	rjmp	800075da <__svfscanf_r+0x9b2>
800075d6:	5b ec       	cp.w	r12,-2
800075d8:	c2 10       	breq	8000761a <__svfscanf_r+0x9f2>
800075da:	60 0c       	ld.w	r12,r0[0x0]
800075dc:	e0 a0 10 d0 	rcall	8000977c <iswspace>
800075e0:	c1 10       	breq	80007602 <__svfscanf_r+0x9da>
800075e2:	fa c4 fc d4 	sub	r4,sp,-812
800075e6:	02 04       	add	r4,r1
800075e8:	e8 c4 02 ed 	sub	r4,r4,749
800075ec:	c0 88       	rjmp	800075fc <__svfscanf_r+0x9d4>
800075ee:	09 8b       	ld.ub	r11,r4[0x0]
800075f0:	20 11       	sub	r1,1
800075f2:	20 14       	sub	r4,1
800075f4:	0a 9a       	mov	r10,r5
800075f6:	40 4c       	lddsp	r12,sp[0x10]
800075f8:	e0 a0 23 f6 	rcall	8000bde4 <_ungetc_r>
800075fc:	58 01       	cp.w	r1,0
800075fe:	cf 81       	brne	800075ee <__svfscanf_r+0x9c6>
80007600:	c2 b8       	rjmp	80007656 <__svfscanf_r+0xa2e>
80007602:	40 3a       	lddsp	r10,sp[0xc]
80007604:	40 59       	lddsp	r9,sp[0x14]
80007606:	02 0a       	add	r10,r1
80007608:	20 12       	sub	r2,1
8000760a:	58 09       	cp.w	r9,0
8000760c:	f8 01 17 10 	movne	r1,r12
80007610:	f7 b0 00 fc 	subeq	r0,-4
80007614:	fb f1 00 05 	ld.weq	r1,sp[0x14]
80007618:	50 3a       	stdsp	sp[0xc],r10
8000761a:	6a 18       	ld.w	r8,r5[0x4]
8000761c:	58 08       	cp.w	r8,0
8000761e:	e0 89 00 0b 	brgt	80007634 <__svfscanf_r+0xa0c>
80007622:	0a 9b       	mov	r11,r5
80007624:	40 4c       	lddsp	r12,sp[0x10]
80007626:	e0 a0 18 f3 	rcall	8000a80c <__srefill_r>
8000762a:	c0 50       	breq	80007634 <__svfscanf_r+0xa0c>
8000762c:	58 01       	cp.w	r1,0
8000762e:	e0 81 05 6b 	brne	80008104 <__svfscanf_r+0x14dc>
80007632:	c1 28       	rjmp	80007656 <__svfscanf_r+0xa2e>
80007634:	6a 08       	ld.w	r8,r5[0x0]
80007636:	58 02       	cp.w	r2,0
80007638:	5f 1a       	srne	r10
8000763a:	11 89       	ld.ub	r9,r8[0x0]
8000763c:	e0 6b 01 98 	mov	r11,408
80007640:	76 08       	ld.w	r8,r11[0x0]
80007642:	f0 09 07 08 	ld.ub	r8,r8[r9]
80007646:	ec 18 00 08 	eorl	r8,0x8
8000764a:	f5 e8 02 38 	and	r8,r10,r8>>0x3
8000764e:	30 0a       	mov	r10,0
80007650:	f4 08 18 00 	cp.b	r8,r10
80007654:	c9 b1       	brne	8000758a <__svfscanf_r+0x962>
80007656:	40 59       	lddsp	r9,sp[0x14]
80007658:	58 09       	cp.w	r9,0
8000765a:	fe 91 fa f6 	brne	80006c46 <__svfscanf_r+0x1e>
8000765e:	81 09       	st.w	r0[0x0],r9
80007660:	40 78       	lddsp	r8,sp[0x1c]
80007662:	2f f8       	sub	r8,-1
80007664:	50 78       	stdsp	sp[0x1c],r8
80007666:	fe 9f fa f0 	bral	80006c46 <__svfscanf_r+0x1e>
8000766a:	40 5b       	lddsp	r11,sp[0x14]
8000766c:	58 0b       	cp.w	r11,0
8000766e:	c2 30       	breq	800076b4 <__svfscanf_r+0xa8c>
80007670:	c1 08       	rjmp	80007690 <__svfscanf_r+0xa68>
80007672:	6a 18       	ld.w	r8,r5[0x4]
80007674:	8b 0a       	st.w	r5[0x0],r10
80007676:	20 18       	sub	r8,1
80007678:	8b 18       	st.w	r5[0x4],r8
8000767a:	2f f0       	sub	r0,-1
8000767c:	00 32       	cp.w	r2,r0
8000767e:	c1 50       	breq	800076a8 <__svfscanf_r+0xa80>
80007680:	58 08       	cp.w	r8,0
80007682:	e0 89 00 07 	brgt	80007690 <__svfscanf_r+0xa68>
80007686:	0a 9b       	mov	r11,r5
80007688:	40 4c       	lddsp	r12,sp[0x10]
8000768a:	e0 a0 18 c1 	rcall	8000a80c <__srefill_r>
8000768e:	c0 d1       	brne	800076a8 <__svfscanf_r+0xa80>
80007690:	6a 08       	ld.w	r8,r5[0x0]
80007692:	e0 6b 01 98 	mov	r11,408
80007696:	f0 ca ff ff 	sub	r10,r8,-1
8000769a:	76 09       	ld.w	r9,r11[0x0]
8000769c:	11 88       	ld.ub	r8,r8[0x0]
8000769e:	f2 08 07 08 	ld.ub	r8,r9[r8]
800076a2:	ed b8 00 03 	bld	r8,0x3
800076a6:	ce 61       	brne	80007672 <__svfscanf_r+0xa4a>
800076a8:	40 3a       	lddsp	r10,sp[0xc]
800076aa:	00 0a       	add	r10,r0
800076ac:	50 3a       	stdsp	sp[0xc],r10
800076ae:	fe 9f fa cc 	bral	80006c46 <__svfscanf_r+0x1e>
800076b2:	d7 03       	nop
800076b4:	40 69       	lddsp	r9,sp[0x18]
800076b6:	58 09       	cp.w	r9,0
800076b8:	c2 50       	breq	80007702 <__svfscanf_r+0xada>
800076ba:	0e 34       	cp.w	r4,r7
800076bc:	c0 64       	brge	800076c8 <__svfscanf_r+0xaa0>
800076be:	fa c8 fc d4 	sub	r8,sp,-812
800076c2:	f0 04 00 24 	add	r4,r8,r4<<0x2
800076c6:	c2 78       	rjmp	80007714 <__svfscanf_r+0xaec>
800076c8:	fa ca fd 60 	sub	r10,sp,-672
800076cc:	0c 99       	mov	r9,r6
800076ce:	f4 07 00 2a 	add	r10,r10,r7<<0x2
800076d2:	0e 98       	mov	r8,r7
800076d4:	13 0b       	ld.w	r11,r9++
800076d6:	14 ab       	st.w	r10++,r11
800076d8:	2f f8       	sub	r8,-1
800076da:	10 34       	cp.w	r4,r8
800076dc:	cf c4       	brge	800076d4 <__svfscanf_r+0xaac>
800076de:	ee c9 ff ff 	sub	r9,r7,-1
800076e2:	ee 08 11 ff 	rsub	r8,r7,-1
800076e6:	f0 c7 ff ff 	sub	r7,r8,-1
800076ea:	2f e8       	sub	r8,-2
800076ec:	08 08       	add	r8,r4
800076ee:	08 07       	add	r7,r4
800076f0:	ec 08 00 26 	add	r6,r6,r8<<0x2
800076f4:	f2 07 00 07 	add	r7,r9,r7
800076f8:	fa c8 fd 60 	sub	r8,sp,-672
800076fc:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
80007700:	c1 c8       	rjmp	80007738 <__svfscanf_r+0xb10>
80007702:	e6 c8 ff ff 	sub	r8,r3,-1
80007706:	0e 33       	cp.w	r3,r7
80007708:	c0 94       	brge	8000771a <__svfscanf_r+0xaf2>
8000770a:	fa cb fc d4 	sub	r11,sp,-812
8000770e:	10 93       	mov	r3,r8
80007710:	f6 04 00 24 	add	r4,r11,r4<<0x2
80007714:	e8 f4 ff 74 	ld.w	r4,r4[-140]
80007718:	c1 08       	rjmp	80007738 <__svfscanf_r+0xb10>
8000771a:	6c 04       	ld.w	r4,r6[0x0]
8000771c:	2f c6       	sub	r6,-4
8000771e:	59 f7       	cp.w	r7,31
80007720:	e0 89 00 0b 	brgt	80007736 <__svfscanf_r+0xb0e>
80007724:	10 93       	mov	r3,r8
80007726:	fa ca fc d4 	sub	r10,sp,-812
8000772a:	f4 07 00 28 	add	r8,r10,r7<<0x2
8000772e:	2f f7       	sub	r7,-1
80007730:	f1 44 ff 74 	st.w	r8[-140],r4
80007734:	c0 28       	rjmp	80007738 <__svfscanf_r+0xb10>
80007736:	10 93       	mov	r3,r8
80007738:	08 91       	mov	r1,r4
8000773a:	c1 28       	rjmp	8000775e <__svfscanf_r+0xb36>
8000773c:	6a 19       	ld.w	r9,r5[0x4]
8000773e:	20 19       	sub	r9,1
80007740:	8b 19       	st.w	r5[0x4],r9
80007742:	11 39       	ld.ub	r9,r8++
80007744:	02 c9       	st.b	r1++,r9
80007746:	8b 08       	st.w	r5[0x0],r8
80007748:	58 02       	cp.w	r2,0
8000774a:	c1 60       	breq	80007776 <__svfscanf_r+0xb4e>
8000774c:	6a 18       	ld.w	r8,r5[0x4]
8000774e:	58 08       	cp.w	r8,0
80007750:	e0 89 00 07 	brgt	8000775e <__svfscanf_r+0xb36>
80007754:	0a 9b       	mov	r11,r5
80007756:	40 4c       	lddsp	r12,sp[0x10]
80007758:	e0 a0 18 5a 	rcall	8000a80c <__srefill_r>
8000775c:	c0 d1       	brne	80007776 <__svfscanf_r+0xb4e>
8000775e:	6a 09       	ld.w	r9,r5[0x0]
80007760:	e0 6b 01 98 	mov	r11,408
80007764:	12 98       	mov	r8,r9
80007766:	76 0a       	ld.w	r10,r11[0x0]
80007768:	13 89       	ld.ub	r9,r9[0x0]
8000776a:	20 12       	sub	r2,1
8000776c:	f4 09 07 09 	ld.ub	r9,r10[r9]
80007770:	ed b9 00 03 	bld	r9,0x3
80007774:	ce 41       	brne	8000773c <__svfscanf_r+0xb14>
80007776:	40 3a       	lddsp	r10,sp[0xc]
80007778:	40 79       	lddsp	r9,sp[0x1c]
8000777a:	f4 04 01 04 	sub	r4,r10,r4
8000777e:	2f f9       	sub	r9,-1
80007780:	e2 04 00 04 	add	r4,r1,r4
80007784:	50 79       	stdsp	sp[0x1c],r9
80007786:	50 34       	stdsp	sp[0xc],r4
80007788:	30 08       	mov	r8,0
8000778a:	a2 88       	st.b	r1[0x0],r8
8000778c:	fe 9f fa 5d 	bral	80006c46 <__svfscanf_r+0x1e>
80007790:	e4 c9 00 01 	sub	r9,r2,1
80007794:	e4 c8 01 5d 	sub	r8,r2,349
80007798:	e0 6a 01 5d 	mov	r10,349
8000779c:	e0 49 01 5c 	cp.w	r9,348
800077a0:	f9 b8 08 00 	movls	r8,0
800077a4:	f4 02 17 b0 	movhi	r2,r10
800077a8:	30 0b       	mov	r11,0
800077aa:	50 c7       	stdsp	sp[0x30],r7
800077ac:	50 b3       	stdsp	sp[0x2c],r3
800077ae:	e8 10 0d 80 	orl	r0,0xd80
800077b2:	50 5b       	stdsp	sp[0x14],r11
800077b4:	fa c1 ff c0 	sub	r1,sp,-64
800077b8:	35 89       	mov	r9,88
800077ba:	40 87       	lddsp	r7,sp[0x20]
800077bc:	10 93       	mov	r3,r8
800077be:	6a 0a       	ld.w	r10,r5[0x0]
800077c0:	33 98       	mov	r8,57
800077c2:	15 8a       	ld.ub	r10,r10[0x0]
800077c4:	f0 0a 18 00 	cp.b	r10,r8
800077c8:	e0 8b 00 15 	brhi	800077f2 <__svfscanf_r+0xbca>
800077cc:	33 8b       	mov	r11,56
800077ce:	f6 0a 18 00 	cp.b	r10,r11
800077d2:	c4 b2       	brcc	80007868 <__svfscanf_r+0xc40>
800077d4:	33 0b       	mov	r11,48
800077d6:	f6 0a 18 00 	cp.b	r10,r11
800077da:	c2 70       	breq	80007828 <__svfscanf_r+0xc00>
800077dc:	e0 8b 00 41 	brhi	8000785e <__svfscanf_r+0xc36>
800077e0:	32 bb       	mov	r11,43
800077e2:	f6 0a 18 00 	cp.b	r10,r11
800077e6:	c4 f0       	breq	80007884 <__svfscanf_r+0xc5c>
800077e8:	32 db       	mov	r11,45
800077ea:	f6 0a 18 00 	cp.b	r10,r11
800077ee:	c6 f1       	brne	800078cc <__svfscanf_r+0xca4>
800077f0:	c4 a8       	rjmp	80007884 <__svfscanf_r+0xc5c>
800077f2:	f2 0a 18 00 	cp.b	r10,r9
800077f6:	c4 c0       	breq	8000788e <__svfscanf_r+0xc66>
800077f8:	e0 8b 00 0a 	brhi	8000780c <__svfscanf_r+0xbe4>
800077fc:	f4 cb 00 41 	sub	r11,r10,65
80007800:	30 58       	mov	r8,5
80007802:	f0 0b 18 00 	cp.b	r11,r8
80007806:	e0 8b 00 63 	brhi	800078cc <__svfscanf_r+0xca4>
8000780a:	c3 78       	rjmp	80007878 <__svfscanf_r+0xc50>
8000780c:	36 1b       	mov	r11,97
8000780e:	f6 0a 18 00 	cp.b	r10,r11
80007812:	c5 d3       	brcs	800078cc <__svfscanf_r+0xca4>
80007814:	36 68       	mov	r8,102
80007816:	f0 0a 18 00 	cp.b	r10,r8
8000781a:	e0 88 00 2f 	brls	80007878 <__svfscanf_r+0xc50>
8000781e:	37 8b       	mov	r11,120
80007820:	f6 0a 18 00 	cp.b	r10,r11
80007824:	c5 41       	brne	800078cc <__svfscanf_r+0xca4>
80007826:	c3 48       	rjmp	8000788e <__svfscanf_r+0xc66>
80007828:	ed b0 00 0b 	bld	r0,0xb
8000782c:	c3 b1       	brne	800078a2 <__svfscanf_r+0xc7a>
8000782e:	00 9b       	mov	r11,r0
80007830:	a9 bb       	sbr	r11,0x9
80007832:	58 07       	cp.w	r7,0
80007834:	f6 00 17 00 	moveq	r0,r11
80007838:	f9 b7 00 08 	moveq	r7,8
8000783c:	ed b0 00 0a 	bld	r0,0xa
80007840:	c0 41       	brne	80007848 <__svfscanf_r+0xc20>
80007842:	e0 10 fa 7f 	andl	r0,0xfa7f
80007846:	c2 e8       	rjmp	800078a2 <__svfscanf_r+0xc7a>
80007848:	40 5a       	lddsp	r10,sp[0x14]
8000784a:	58 03       	cp.w	r3,0
8000784c:	f7 b3 01 01 	subne	r3,1
80007850:	f7 b2 01 ff 	subne	r2,-1
80007854:	2f fa       	sub	r10,-1
80007856:	e0 10 fc 7f 	andl	r0,0xfc7f
8000785a:	50 5a       	stdsp	sp[0x14],r10
8000785c:	c2 48       	rjmp	800078a4 <__svfscanf_r+0xc7c>
8000785e:	fe c8 9a da 	sub	r8,pc,-25894
80007862:	f0 07 04 17 	ld.sh	r7,r8[r7<<0x1]
80007866:	c0 c8       	rjmp	8000787e <__svfscanf_r+0xc56>
80007868:	fe cb 9a e4 	sub	r11,pc,-25884
8000786c:	f6 07 04 17 	ld.sh	r7,r11[r7<<0x1]
80007870:	58 87       	cp.w	r7,8
80007872:	e0 89 00 06 	brgt	8000787e <__svfscanf_r+0xc56>
80007876:	c2 b8       	rjmp	800078cc <__svfscanf_r+0xca4>
80007878:	58 a7       	cp.w	r7,10
8000787a:	e0 8a 00 29 	brle	800078cc <__svfscanf_r+0xca4>
8000787e:	e0 10 f4 7f 	andl	r0,0xf47f
80007882:	c1 08       	rjmp	800078a2 <__svfscanf_r+0xc7a>
80007884:	ed b0 00 07 	bld	r0,0x7
80007888:	c2 21       	brne	800078cc <__svfscanf_r+0xca4>
8000788a:	a7 d0       	cbr	r0,0x7
8000788c:	c0 b8       	rjmp	800078a2 <__svfscanf_r+0xc7a>
8000788e:	00 9b       	mov	r11,r0
80007890:	e2 1b 06 00 	andl	r11,0x600,COH
80007894:	e0 4b 02 00 	cp.w	r11,512
80007898:	c1 a1       	brne	800078cc <__svfscanf_r+0xca4>
8000789a:	a9 d0       	cbr	r0,0x9
8000789c:	31 07       	mov	r7,16
8000789e:	e8 10 05 00 	orl	r0,0x500
800078a2:	02 ca       	st.b	r1++,r10
800078a4:	6a 1a       	ld.w	r10,r5[0x4]
800078a6:	20 1a       	sub	r10,1
800078a8:	8b 1a       	st.w	r5[0x4],r10
800078aa:	58 0a       	cp.w	r10,0
800078ac:	e0 8a 00 06 	brle	800078b8 <__svfscanf_r+0xc90>
800078b0:	6a 0a       	ld.w	r10,r5[0x0]
800078b2:	2f fa       	sub	r10,-1
800078b4:	8b 0a       	st.w	r5[0x0],r10
800078b6:	c0 88       	rjmp	800078c6 <__svfscanf_r+0xc9e>
800078b8:	50 19       	stdsp	sp[0x4],r9
800078ba:	0a 9b       	mov	r11,r5
800078bc:	40 4c       	lddsp	r12,sp[0x10]
800078be:	e0 a0 17 a7 	rcall	8000a80c <__srefill_r>
800078c2:	40 19       	lddsp	r9,sp[0x4]
800078c4:	c0 41       	brne	800078cc <__svfscanf_r+0xca4>
800078c6:	20 12       	sub	r2,1
800078c8:	fe 91 ff 7b 	brne	800077be <__svfscanf_r+0xb96>
800078cc:	50 87       	stdsp	sp[0x20],r7
800078ce:	40 b3       	lddsp	r3,sp[0x2c]
800078d0:	40 c7       	lddsp	r7,sp[0x30]
800078d2:	ed b0 00 08 	bld	r0,0x8
800078d6:	c1 01       	brne	800078f6 <__svfscanf_r+0xcce>
800078d8:	fa c8 ff c0 	sub	r8,sp,-64
800078dc:	10 31       	cp.w	r1,r8
800078de:	e0 88 00 07 	brls	800078ec <__svfscanf_r+0xcc4>
800078e2:	0a 9a       	mov	r10,r5
800078e4:	03 7b       	ld.ub	r11,--r1
800078e6:	40 4c       	lddsp	r12,sp[0x10]
800078e8:	e0 a0 22 7e 	rcall	8000bde4 <_ungetc_r>
800078ec:	fa c8 ff c0 	sub	r8,sp,-64
800078f0:	10 31       	cp.w	r1,r8
800078f2:	e0 80 04 12 	breq	80008116 <__svfscanf_r+0x14ee>
800078f6:	00 9a       	mov	r10,r0
800078f8:	e2 1a 00 10 	andl	r10,0x10,COH
800078fc:	e0 81 01 49 	brne	80007b8e <__svfscanf_r+0xf66>
80007900:	a2 8a       	st.b	r1[0x0],r10
80007902:	fa c2 ff c0 	sub	r2,sp,-64
80007906:	40 89       	lddsp	r9,sp[0x20]
80007908:	04 9b       	mov	r11,r2
8000790a:	40 4c       	lddsp	r12,sp[0x10]
8000790c:	40 a8       	lddsp	r8,sp[0x28]
8000790e:	5d 18       	icall	r8
80007910:	ed b0 00 05 	bld	r0,0x5
80007914:	c2 b1       	brne	8000796a <__svfscanf_r+0xd42>
80007916:	40 6b       	lddsp	r11,sp[0x18]
80007918:	58 0b       	cp.w	r11,0
8000791a:	c1 40       	breq	80007942 <__svfscanf_r+0xd1a>
8000791c:	0e 34       	cp.w	r4,r7
8000791e:	c0 64       	brge	8000792a <__svfscanf_r+0xd02>
80007920:	fa ca fc d4 	sub	r10,sp,-812
80007924:	f4 04 00 24 	add	r4,r10,r4<<0x2
80007928:	c1 d9       	rjmp	80007b62 <__svfscanf_r+0xf3a>
8000792a:	fa ca fd 60 	sub	r10,sp,-672
8000792e:	0c 99       	mov	r9,r6
80007930:	f4 07 00 2a 	add	r10,r10,r7<<0x2
80007934:	0e 98       	mov	r8,r7
80007936:	13 0b       	ld.w	r11,r9++
80007938:	14 ab       	st.w	r10++,r11
8000793a:	2f f8       	sub	r8,-1
8000793c:	10 34       	cp.w	r4,r8
8000793e:	cf c4       	brge	80007936 <__svfscanf_r+0xd0e>
80007940:	cf 68       	rjmp	80007b2c <__svfscanf_r+0xf04>
80007942:	e6 c8 ff ff 	sub	r8,r3,-1
80007946:	0e 33       	cp.w	r3,r7
80007948:	c0 64       	brge	80007954 <__svfscanf_r+0xd2c>
8000794a:	fa c9 fc d4 	sub	r9,sp,-812
8000794e:	f2 04 00 24 	add	r4,r9,r4<<0x2
80007952:	c0 79       	rjmp	80007b60 <__svfscanf_r+0xf38>
80007954:	6c 04       	ld.w	r4,r6[0x0]
80007956:	2f c6       	sub	r6,-4
80007958:	59 f7       	cp.w	r7,31
8000795a:	e0 89 01 15 	brgt	80007b84 <__svfscanf_r+0xf5c>
8000795e:	10 93       	mov	r3,r8
80007960:	fa cb fc d4 	sub	r11,sp,-812
80007964:	f6 07 00 28 	add	r8,r11,r7<<0x2
80007968:	c0 a9       	rjmp	80007b7c <__svfscanf_r+0xf54>
8000796a:	ed b0 00 02 	bld	r0,0x2
8000796e:	c4 51       	brne	800079f8 <__svfscanf_r+0xdd0>
80007970:	40 6a       	lddsp	r10,sp[0x18]
80007972:	58 0a       	cp.w	r10,0
80007974:	c2 50       	breq	800079be <__svfscanf_r+0xd96>
80007976:	0e 34       	cp.w	r4,r7
80007978:	c0 64       	brge	80007984 <__svfscanf_r+0xd5c>
8000797a:	fa c9 fc d4 	sub	r9,sp,-812
8000797e:	f2 04 00 24 	add	r4,r9,r4<<0x2
80007982:	c2 78       	rjmp	800079d0 <__svfscanf_r+0xda8>
80007984:	fa ca fd 60 	sub	r10,sp,-672
80007988:	0c 99       	mov	r9,r6
8000798a:	f4 07 00 2a 	add	r10,r10,r7<<0x2
8000798e:	0e 98       	mov	r8,r7
80007990:	13 0b       	ld.w	r11,r9++
80007992:	14 ab       	st.w	r10++,r11
80007994:	2f f8       	sub	r8,-1
80007996:	10 34       	cp.w	r4,r8
80007998:	cf c4       	brge	80007990 <__svfscanf_r+0xd68>
8000799a:	ee c9 ff ff 	sub	r9,r7,-1
8000799e:	ee 08 11 ff 	rsub	r8,r7,-1
800079a2:	f0 c7 ff ff 	sub	r7,r8,-1
800079a6:	2f e8       	sub	r8,-2
800079a8:	08 08       	add	r8,r4
800079aa:	08 07       	add	r7,r4
800079ac:	ec 08 00 26 	add	r6,r6,r8<<0x2
800079b0:	f2 07 00 07 	add	r7,r9,r7
800079b4:	fa c8 fd 60 	sub	r8,sp,-672
800079b8:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
800079bc:	c1 c8       	rjmp	800079f4 <__svfscanf_r+0xdcc>
800079be:	e6 c8 ff ff 	sub	r8,r3,-1
800079c2:	0e 33       	cp.w	r3,r7
800079c4:	c0 94       	brge	800079d6 <__svfscanf_r+0xdae>
800079c6:	fa cb fc d4 	sub	r11,sp,-812
800079ca:	10 93       	mov	r3,r8
800079cc:	f6 04 00 24 	add	r4,r11,r4<<0x2
800079d0:	e8 f4 ff 74 	ld.w	r4,r4[-140]
800079d4:	c1 08       	rjmp	800079f4 <__svfscanf_r+0xdcc>
800079d6:	6c 04       	ld.w	r4,r6[0x0]
800079d8:	2f c6       	sub	r6,-4
800079da:	59 f7       	cp.w	r7,31
800079dc:	e0 89 00 0b 	brgt	800079f2 <__svfscanf_r+0xdca>
800079e0:	10 93       	mov	r3,r8
800079e2:	fa ca fc d4 	sub	r10,sp,-812
800079e6:	f4 07 00 28 	add	r8,r10,r7<<0x2
800079ea:	2f f7       	sub	r7,-1
800079ec:	f1 44 ff 74 	st.w	r8[-140],r4
800079f0:	c0 28       	rjmp	800079f4 <__svfscanf_r+0xdcc>
800079f2:	10 93       	mov	r3,r8
800079f4:	a8 0c       	st.h	r4[0x0],r12
800079f6:	cc 98       	rjmp	80007b88 <__svfscanf_r+0xf60>
800079f8:	f5 d0 c0 01 	bfextu	r10,r0,0x0,0x1
800079fc:	c2 b0       	breq	80007a52 <__svfscanf_r+0xe2a>
800079fe:	40 69       	lddsp	r9,sp[0x18]
80007a00:	58 09       	cp.w	r9,0
80007a02:	c1 40       	breq	80007a2a <__svfscanf_r+0xe02>
80007a04:	0e 34       	cp.w	r4,r7
80007a06:	c0 64       	brge	80007a12 <__svfscanf_r+0xdea>
80007a08:	fa c8 fc d4 	sub	r8,sp,-812
80007a0c:	f0 04 00 24 	add	r4,r8,r4<<0x2
80007a10:	ca 98       	rjmp	80007b62 <__svfscanf_r+0xf3a>
80007a12:	fa ca fd 60 	sub	r10,sp,-672
80007a16:	0c 99       	mov	r9,r6
80007a18:	f4 07 00 2a 	add	r10,r10,r7<<0x2
80007a1c:	0e 98       	mov	r8,r7
80007a1e:	13 0b       	ld.w	r11,r9++
80007a20:	14 ab       	st.w	r10++,r11
80007a22:	2f f8       	sub	r8,-1
80007a24:	10 34       	cp.w	r4,r8
80007a26:	cf c4       	brge	80007a1e <__svfscanf_r+0xdf6>
80007a28:	c8 28       	rjmp	80007b2c <__svfscanf_r+0xf04>
80007a2a:	e6 c8 ff ff 	sub	r8,r3,-1
80007a2e:	0e 33       	cp.w	r3,r7
80007a30:	c0 64       	brge	80007a3c <__svfscanf_r+0xe14>
80007a32:	fa cb fc d4 	sub	r11,sp,-812
80007a36:	f6 04 00 24 	add	r4,r11,r4<<0x2
80007a3a:	c9 38       	rjmp	80007b60 <__svfscanf_r+0xf38>
80007a3c:	6c 04       	ld.w	r4,r6[0x0]
80007a3e:	2f c6       	sub	r6,-4
80007a40:	59 f7       	cp.w	r7,31
80007a42:	e0 89 00 a1 	brgt	80007b84 <__svfscanf_r+0xf5c>
80007a46:	10 93       	mov	r3,r8
80007a48:	fa ca fc d4 	sub	r10,sp,-812
80007a4c:	f4 07 00 28 	add	r8,r10,r7<<0x2
80007a50:	c9 68       	rjmp	80007b7c <__svfscanf_r+0xf54>
80007a52:	e2 10 00 02 	andl	r0,0x2,COH
80007a56:	c5 60       	breq	80007b02 <__svfscanf_r+0xeda>
80007a58:	fe c8 c0 38 	sub	r8,pc,-16328
80007a5c:	40 a9       	lddsp	r9,sp[0x28]
80007a5e:	10 39       	cp.w	r9,r8
80007a60:	c0 71       	brne	80007a6e <__svfscanf_r+0xe46>
80007a62:	04 9b       	mov	r11,r2
80007a64:	40 89       	lddsp	r9,sp[0x20]
80007a66:	40 4c       	lddsp	r12,sp[0x10]
80007a68:	e0 a0 20 66 	rcall	8000bb34 <_strtoull_r>
80007a6c:	c0 68       	rjmp	80007a78 <__svfscanf_r+0xe50>
80007a6e:	04 9b       	mov	r11,r2
80007a70:	40 89       	lddsp	r9,sp[0x20]
80007a72:	40 4c       	lddsp	r12,sp[0x10]
80007a74:	e0 a0 1f 08 	rcall	8000b884 <_strtoll_r>
80007a78:	40 68       	lddsp	r8,sp[0x18]
80007a7a:	58 08       	cp.w	r8,0
80007a7c:	c2 50       	breq	80007ac6 <__svfscanf_r+0xe9e>
80007a7e:	0e 34       	cp.w	r4,r7
80007a80:	c0 64       	brge	80007a8c <__svfscanf_r+0xe64>
80007a82:	fa c9 fc d4 	sub	r9,sp,-812
80007a86:	f2 04 00 24 	add	r4,r9,r4<<0x2
80007a8a:	c2 78       	rjmp	80007ad8 <__svfscanf_r+0xeb0>
80007a8c:	fa cc fd 60 	sub	r12,sp,-672
80007a90:	0c 99       	mov	r9,r6
80007a92:	f8 07 00 2c 	add	r12,r12,r7<<0x2
80007a96:	0e 98       	mov	r8,r7
80007a98:	13 0e       	ld.w	lr,r9++
80007a9a:	18 ae       	st.w	r12++,lr
80007a9c:	2f f8       	sub	r8,-1
80007a9e:	10 34       	cp.w	r4,r8
80007aa0:	cf c4       	brge	80007a98 <__svfscanf_r+0xe70>
80007aa2:	ee c9 ff ff 	sub	r9,r7,-1
80007aa6:	ee 08 11 ff 	rsub	r8,r7,-1
80007aaa:	f0 c7 ff ff 	sub	r7,r8,-1
80007aae:	2f e8       	sub	r8,-2
80007ab0:	08 08       	add	r8,r4
80007ab2:	08 07       	add	r7,r4
80007ab4:	ec 08 00 26 	add	r6,r6,r8<<0x2
80007ab8:	f2 07 00 07 	add	r7,r9,r7
80007abc:	fa c8 fd 60 	sub	r8,sp,-672
80007ac0:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
80007ac4:	c1 c8       	rjmp	80007afc <__svfscanf_r+0xed4>
80007ac6:	e6 c8 ff ff 	sub	r8,r3,-1
80007aca:	0e 33       	cp.w	r3,r7
80007acc:	c0 94       	brge	80007ade <__svfscanf_r+0xeb6>
80007ace:	fa c9 fc d4 	sub	r9,sp,-812
80007ad2:	10 93       	mov	r3,r8
80007ad4:	f2 04 00 24 	add	r4,r9,r4<<0x2
80007ad8:	e8 f4 ff 74 	ld.w	r4,r4[-140]
80007adc:	c1 08       	rjmp	80007afc <__svfscanf_r+0xed4>
80007ade:	6c 04       	ld.w	r4,r6[0x0]
80007ae0:	2f c6       	sub	r6,-4
80007ae2:	59 f7       	cp.w	r7,31
80007ae4:	e0 89 00 0b 	brgt	80007afa <__svfscanf_r+0xed2>
80007ae8:	10 93       	mov	r3,r8
80007aea:	fa c9 fc d4 	sub	r9,sp,-812
80007aee:	f2 07 00 28 	add	r8,r9,r7<<0x2
80007af2:	2f f7       	sub	r7,-1
80007af4:	f1 44 ff 74 	st.w	r8[-140],r4
80007af8:	c0 28       	rjmp	80007afc <__svfscanf_r+0xed4>
80007afa:	10 93       	mov	r3,r8
80007afc:	89 1a       	st.w	r4[0x4],r10
80007afe:	89 0b       	st.w	r4[0x0],r11
80007b00:	c4 48       	rjmp	80007b88 <__svfscanf_r+0xf60>
80007b02:	40 68       	lddsp	r8,sp[0x18]
80007b04:	58 08       	cp.w	r8,0
80007b06:	c2 50       	breq	80007b50 <__svfscanf_r+0xf28>
80007b08:	0e 34       	cp.w	r4,r7
80007b0a:	c0 64       	brge	80007b16 <__svfscanf_r+0xeee>
80007b0c:	fa cb fc d4 	sub	r11,sp,-812
80007b10:	f6 04 00 24 	add	r4,r11,r4<<0x2
80007b14:	c2 78       	rjmp	80007b62 <__svfscanf_r+0xf3a>
80007b16:	fa ca fd 60 	sub	r10,sp,-672
80007b1a:	0c 99       	mov	r9,r6
80007b1c:	f4 07 00 2a 	add	r10,r10,r7<<0x2
80007b20:	0e 98       	mov	r8,r7
80007b22:	13 0b       	ld.w	r11,r9++
80007b24:	14 ab       	st.w	r10++,r11
80007b26:	2f f8       	sub	r8,-1
80007b28:	10 34       	cp.w	r4,r8
80007b2a:	cf c4       	brge	80007b22 <__svfscanf_r+0xefa>
80007b2c:	ee c9 ff ff 	sub	r9,r7,-1
80007b30:	ee 08 11 ff 	rsub	r8,r7,-1
80007b34:	f0 c7 ff ff 	sub	r7,r8,-1
80007b38:	2f e8       	sub	r8,-2
80007b3a:	08 08       	add	r8,r4
80007b3c:	08 07       	add	r7,r4
80007b3e:	ec 08 00 26 	add	r6,r6,r8<<0x2
80007b42:	f2 07 00 07 	add	r7,r9,r7
80007b46:	fa c8 fd 60 	sub	r8,sp,-672
80007b4a:	f0 04 03 24 	ld.w	r4,r8[r4<<0x2]
80007b4e:	c1 c8       	rjmp	80007b86 <__svfscanf_r+0xf5e>
80007b50:	e6 c8 ff ff 	sub	r8,r3,-1
80007b54:	0e 33       	cp.w	r3,r7
80007b56:	c0 94       	brge	80007b68 <__svfscanf_r+0xf40>
80007b58:	fa ca fc d4 	sub	r10,sp,-812
80007b5c:	f4 04 00 24 	add	r4,r10,r4<<0x2
80007b60:	10 93       	mov	r3,r8
80007b62:	e8 f4 ff 74 	ld.w	r4,r4[-140]
80007b66:	c1 08       	rjmp	80007b86 <__svfscanf_r+0xf5e>
80007b68:	6c 04       	ld.w	r4,r6[0x0]
80007b6a:	2f c6       	sub	r6,-4
80007b6c:	59 f7       	cp.w	r7,31
80007b6e:	e0 89 00 0b 	brgt	80007b84 <__svfscanf_r+0xf5c>
80007b72:	10 93       	mov	r3,r8
80007b74:	fa c9 fc d4 	sub	r9,sp,-812
80007b78:	f2 07 00 28 	add	r8,r9,r7<<0x2
80007b7c:	f1 44 ff 74 	st.w	r8[-140],r4
80007b80:	2f f7       	sub	r7,-1
80007b82:	c0 28       	rjmp	80007b86 <__svfscanf_r+0xf5e>
80007b84:	10 93       	mov	r3,r8
80007b86:	89 0c       	st.w	r4[0x0],r12
80007b88:	40 78       	lddsp	r8,sp[0x1c]
80007b8a:	2f f8       	sub	r8,-1
80007b8c:	50 78       	stdsp	sp[0x1c],r8
80007b8e:	40 3b       	lddsp	r11,sp[0xc]
80007b90:	fa c8 ff c0 	sub	r8,sp,-64
80007b94:	40 5a       	lddsp	r10,sp[0x14]
80007b96:	f6 08 01 08 	sub	r8,r11,r8
80007b9a:	14 08       	add	r8,r10
80007b9c:	e2 08 00 08 	add	r8,r1,r8
80007ba0:	50 38       	stdsp	sp[0xc],r8
80007ba2:	fe 9f f8 52 	bral	80006c46 <__svfscanf_r+0x1e>
80007ba6:	d7 03       	nop
80007ba8:	30 01       	mov	r1,0
80007baa:	e4 c8 00 01 	sub	r8,r2,1
80007bae:	e4 c9 01 5d 	sub	r9,r2,349
80007bb2:	e0 48 01 5c 	cp.w	r8,348
80007bb6:	e2 09 17 80 	movls	r9,r1
80007bba:	50 b9       	stdsp	sp[0x2c],r9
80007bbc:	e0 69 01 5d 	mov	r9,349
80007bc0:	50 f7       	stdsp	sp[0x3c],r7
80007bc2:	f2 02 17 b0 	movhi	r2,r9
80007bc6:	e8 10 07 80 	orl	r0,0x780
80007bca:	fa c8 ff c0 	sub	r8,sp,-64
80007bce:	02 99       	mov	r9,r1
80007bd0:	50 51       	stdsp	sp[0x14],r1
80007bd2:	50 d1       	stdsp	sp[0x34],r1
80007bd4:	50 c1       	stdsp	sp[0x30],r1
80007bd6:	50 e1       	stdsp	sp[0x38],r1
80007bd8:	10 97       	mov	r7,r8
80007bda:	02 9a       	mov	r10,r1
80007bdc:	6a 0b       	ld.w	r11,r5[0x0]
80007bde:	34 e8       	mov	r8,78
80007be0:	17 8b       	ld.ub	r11,r11[0x0]
80007be2:	f0 0b 18 00 	cp.b	r11,r8
80007be6:	e0 80 00 86 	breq	80007cf2 <__svfscanf_r+0x10ca>
80007bea:	e0 8b 00 36 	brhi	80007c56 <__svfscanf_r+0x102e>
80007bee:	33 9c       	mov	r12,57
80007bf0:	f8 0b 18 00 	cp.b	r11,r12
80007bf4:	e0 8b 00 1d 	brhi	80007c2e <__svfscanf_r+0x1006>
80007bf8:	33 1c       	mov	r12,49
80007bfa:	f8 0b 18 00 	cp.b	r11,r12
80007bfe:	c6 d2       	brcc	80007cd8 <__svfscanf_r+0x10b0>
80007c00:	32 ec       	mov	r12,46
80007c02:	f8 0b 18 00 	cp.b	r11,r12
80007c06:	e0 80 00 c6 	breq	80007d92 <__svfscanf_r+0x116a>
80007c0a:	e0 8b 00 0c 	brhi	80007c22 <__svfscanf_r+0xffa>
80007c0e:	32 bc       	mov	r12,43
80007c10:	f8 0b 18 00 	cp.b	r11,r12
80007c14:	c6 90       	breq	80007ce6 <__svfscanf_r+0x10be>
80007c16:	32 dc       	mov	r12,45
80007c18:	f8 0b 18 00 	cp.b	r11,r12
80007c1c:	e0 81 00 fa 	brne	80007e10 <__svfscanf_r+0x11e8>
80007c20:	c6 38       	rjmp	80007ce6 <__svfscanf_r+0x10be>
80007c22:	33 0c       	mov	r12,48
80007c24:	f8 0b 18 00 	cp.b	r11,r12
80007c28:	e0 81 00 f4 	brne	80007e10 <__svfscanf_r+0x11e8>
80007c2c:	c4 98       	rjmp	80007cbe <__svfscanf_r+0x1096>
80007c2e:	34 5c       	mov	r12,69
80007c30:	f8 0b 18 00 	cp.b	r11,r12
80007c34:	e0 80 00 b6 	breq	80007da0 <__svfscanf_r+0x1178>
80007c38:	e0 8b 00 08 	brhi	80007c48 <__svfscanf_r+0x1020>
80007c3c:	34 1c       	mov	r12,65
80007c3e:	f8 0b 18 00 	cp.b	r11,r12
80007c42:	e0 81 00 e7 	brne	80007e10 <__svfscanf_r+0x11e8>
80007c46:	c7 18       	rjmp	80007d28 <__svfscanf_r+0x1100>
80007c48:	34 6c       	mov	r12,70
80007c4a:	f8 0b 18 00 	cp.b	r11,r12
80007c4e:	e0 80 00 90 	breq	80007d6e <__svfscanf_r+0x1146>
80007c52:	34 9c       	mov	r12,73
80007c54:	c2 68       	rjmp	80007ca0 <__svfscanf_r+0x1078>
80007c56:	36 6c       	mov	r12,102
80007c58:	f8 0b 18 00 	cp.b	r11,r12
80007c5c:	e0 80 00 89 	breq	80007d6e <__svfscanf_r+0x1146>
80007c60:	e0 8b 00 19 	brhi	80007c92 <__svfscanf_r+0x106a>
80007c64:	35 9c       	mov	r12,89
80007c66:	f8 0b 18 00 	cp.b	r11,r12
80007c6a:	e0 80 00 8e 	breq	80007d86 <__svfscanf_r+0x115e>
80007c6e:	e0 8b 00 08 	brhi	80007c7e <__svfscanf_r+0x1056>
80007c72:	35 4c       	mov	r12,84
80007c74:	f8 0b 18 00 	cp.b	r11,r12
80007c78:	e0 81 00 cc 	brne	80007e10 <__svfscanf_r+0x11e8>
80007c7c:	c7 f8       	rjmp	80007d7a <__svfscanf_r+0x1152>
80007c7e:	36 1c       	mov	r12,97
80007c80:	f8 0b 18 00 	cp.b	r11,r12
80007c84:	c5 20       	breq	80007d28 <__svfscanf_r+0x1100>
80007c86:	36 5c       	mov	r12,101
80007c88:	f8 0b 18 00 	cp.b	r11,r12
80007c8c:	e0 81 00 c2 	brne	80007e10 <__svfscanf_r+0x11e8>
80007c90:	c8 88       	rjmp	80007da0 <__svfscanf_r+0x1178>
80007c92:	36 e8       	mov	r8,110
80007c94:	f0 0b 18 00 	cp.b	r11,r8
80007c98:	c2 d0       	breq	80007cf2 <__svfscanf_r+0x10ca>
80007c9a:	e0 8b 00 08 	brhi	80007caa <__svfscanf_r+0x1082>
80007c9e:	36 9c       	mov	r12,105
80007ca0:	f8 0b 18 00 	cp.b	r11,r12
80007ca4:	e0 81 00 b6 	brne	80007e10 <__svfscanf_r+0x11e8>
80007ca8:	c4 68       	rjmp	80007d34 <__svfscanf_r+0x110c>
80007caa:	37 4c       	mov	r12,116
80007cac:	f8 0b 18 00 	cp.b	r11,r12
80007cb0:	c6 50       	breq	80007d7a <__svfscanf_r+0x1152>
80007cb2:	37 9c       	mov	r12,121
80007cb4:	f8 0b 18 00 	cp.b	r11,r12
80007cb8:	e0 81 00 ac 	brne	80007e10 <__svfscanf_r+0x11e8>
80007cbc:	c6 58       	rjmp	80007d86 <__svfscanf_r+0x115e>
80007cbe:	ed b0 00 08 	bld	r0,0x8
80007cc2:	c0 b1       	brne	80007cd8 <__svfscanf_r+0x10b0>
80007cc4:	a7 d0       	cbr	r0,0x7
80007cc6:	2f fa       	sub	r10,-1
80007cc8:	40 bb       	lddsp	r11,sp[0x2c]
80007cca:	58 0b       	cp.w	r11,0
80007ccc:	e0 80 00 89 	breq	80007dde <__svfscanf_r+0x11b6>
80007cd0:	20 1b       	sub	r11,1
80007cd2:	2f f2       	sub	r2,-1
80007cd4:	50 bb       	stdsp	sp[0x2c],r11
80007cd6:	c8 48       	rjmp	80007dde <__svfscanf_r+0x11b6>
80007cd8:	e2 09 00 0c 	add	r12,r1,r9
80007cdc:	e0 81 00 9a 	brne	80007e10 <__svfscanf_r+0x11e8>
80007ce0:	e0 10 fe 7f 	andl	r0,0xfe7f
80007ce4:	c7 c8       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007ce6:	ed b0 00 07 	bld	r0,0x7
80007cea:	e0 81 00 93 	brne	80007e10 <__svfscanf_r+0x11e8>
80007cee:	a7 d0       	cbr	r0,0x7
80007cf0:	c7 68       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007cf2:	58 09       	cp.w	r9,0
80007cf4:	c0 b1       	brne	80007d0a <__svfscanf_r+0x10e2>
80007cf6:	00 9c       	mov	r12,r0
80007cf8:	e2 1c 07 00 	andl	r12,0x700,COH
80007cfc:	e0 4c 07 00 	cp.w	r12,1792
80007d00:	c0 b1       	brne	80007d16 <__svfscanf_r+0x10ee>
80007d02:	e0 10 f8 7f 	andl	r0,0xf87f
80007d06:	30 19       	mov	r9,1
80007d08:	c6 a8       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007d0a:	30 28       	mov	r8,2
80007d0c:	f0 09 18 00 	cp.b	r9,r8
80007d10:	c0 31       	brne	80007d16 <__svfscanf_r+0x10ee>
80007d12:	30 39       	mov	r9,3
80007d14:	c6 48       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007d16:	30 48       	mov	r8,4
80007d18:	f0 01 18 00 	cp.b	r1,r8
80007d1c:	5f 0e       	sreq	lr
80007d1e:	30 18       	mov	r8,1
80007d20:	f0 01 18 00 	cp.b	r1,r8
80007d24:	5f 0c       	sreq	r12
80007d26:	c1 b8       	rjmp	80007d5c <__svfscanf_r+0x1134>
80007d28:	30 18       	mov	r8,1
80007d2a:	f0 09 18 00 	cp.b	r9,r8
80007d2e:	c7 11       	brne	80007e10 <__svfscanf_r+0x11e8>
80007d30:	30 29       	mov	r9,2
80007d32:	c5 58       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007d34:	58 01       	cp.w	r1,0
80007d36:	c0 b1       	brne	80007d4c <__svfscanf_r+0x1124>
80007d38:	00 9c       	mov	r12,r0
80007d3a:	e2 1c 07 00 	andl	r12,0x700,COH
80007d3e:	e0 4c 07 00 	cp.w	r12,1792
80007d42:	c0 51       	brne	80007d4c <__svfscanf_r+0x1124>
80007d44:	e0 10 f8 7f 	andl	r0,0xf87f
80007d48:	30 11       	mov	r1,1
80007d4a:	c4 98       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007d4c:	30 58       	mov	r8,5
80007d4e:	30 3c       	mov	r12,3
80007d50:	f0 01 18 00 	cp.b	r1,r8
80007d54:	5f 0e       	sreq	lr
80007d56:	f8 01 18 00 	cp.b	r1,r12
80007d5a:	5f 0c       	sreq	r12
80007d5c:	fd ec 10 0c 	or	r12,lr,r12
80007d60:	30 08       	mov	r8,0
80007d62:	f0 0c 18 00 	cp.b	r12,r8
80007d66:	c5 50       	breq	80007e10 <__svfscanf_r+0x11e8>
80007d68:	2f f1       	sub	r1,-1
80007d6a:	5c 51       	castu.b	r1
80007d6c:	c3 88       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007d6e:	30 28       	mov	r8,2
80007d70:	f0 01 18 00 	cp.b	r1,r8
80007d74:	c4 e1       	brne	80007e10 <__svfscanf_r+0x11e8>
80007d76:	30 31       	mov	r1,3
80007d78:	c3 28       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007d7a:	30 6c       	mov	r12,6
80007d7c:	f8 01 18 00 	cp.b	r1,r12
80007d80:	c4 81       	brne	80007e10 <__svfscanf_r+0x11e8>
80007d82:	30 71       	mov	r1,7
80007d84:	c2 c8       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007d86:	30 7c       	mov	r12,7
80007d88:	f8 01 18 00 	cp.b	r1,r12
80007d8c:	c4 21       	brne	80007e10 <__svfscanf_r+0x11e8>
80007d8e:	30 81       	mov	r1,8
80007d90:	c2 68       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007d92:	ed b0 00 09 	bld	r0,0x9
80007d96:	c3 d1       	brne	80007e10 <__svfscanf_r+0x11e8>
80007d98:	e0 10 fd 7f 	andl	r0,0xfd7f
80007d9c:	50 ea       	stdsp	sp[0x38],r10
80007d9e:	c1 f8       	rjmp	80007ddc <__svfscanf_r+0x11b4>
80007da0:	00 9c       	mov	r12,r0
80007da2:	e2 1c 05 00 	andl	r12,0x500,COH
80007da6:	e0 4c 04 00 	cp.w	r12,1024
80007daa:	c0 90       	breq	80007dbc <__svfscanf_r+0x1194>
80007dac:	58 0a       	cp.w	r10,0
80007dae:	5f 1c       	srne	r12
80007db0:	30 08       	mov	r8,0
80007db2:	f9 e0 02 ac 	and	r12,r12,r0>>0xa
80007db6:	f0 0c 18 00 	cp.b	r12,r8
80007dba:	c2 b0       	breq	80007e10 <__svfscanf_r+0x11e8>
80007dbc:	ed b0 00 09 	bld	r0,0x9
80007dc0:	fb f8 10 0e 	ld.wne	r8,sp[0x38]
80007dc4:	f5 d8 e1 1a 	subne	r10,r10,r8
80007dc8:	fb fa 1a 0d 	st.wne	sp[0x34],r10
80007dcc:	fb f7 1a 05 	st.wne	sp[0x14],r7
80007dd0:	00 9c       	mov	r12,r0
80007dd2:	30 0a       	mov	r10,0
80007dd4:	e0 10 f8 7f 	andl	r0,0xf87f
80007dd8:	e8 10 01 80 	orl	r0,0x180
80007ddc:	0e cb       	st.b	r7++,r11
80007dde:	6a 1b       	ld.w	r11,r5[0x4]
80007de0:	40 38       	lddsp	r8,sp[0xc]
80007de2:	20 1b       	sub	r11,1
80007de4:	2f f8       	sub	r8,-1
80007de6:	8b 1b       	st.w	r5[0x4],r11
80007de8:	50 38       	stdsp	sp[0xc],r8
80007dea:	58 0b       	cp.w	r11,0
80007dec:	e0 8a 00 06 	brle	80007df8 <__svfscanf_r+0x11d0>
80007df0:	6a 0b       	ld.w	r11,r5[0x0]
80007df2:	2f fb       	sub	r11,-1
80007df4:	8b 0b       	st.w	r5[0x0],r11
80007df6:	c0 a8       	rjmp	80007e0a <__svfscanf_r+0x11e2>
80007df8:	50 2a       	stdsp	sp[0x8],r10
80007dfa:	50 19       	stdsp	sp[0x4],r9
80007dfc:	0a 9b       	mov	r11,r5
80007dfe:	40 4c       	lddsp	r12,sp[0x10]
80007e00:	e0 a0 15 06 	rcall	8000a80c <__srefill_r>
80007e04:	40 2a       	lddsp	r10,sp[0x8]
80007e06:	40 19       	lddsp	r9,sp[0x4]
80007e08:	c0 41       	brne	80007e10 <__svfscanf_r+0x11e8>
80007e0a:	20 12       	sub	r2,1
80007e0c:	fe 91 fe e8 	brne	80007bdc <__svfscanf_r+0xfb4>
80007e10:	50 ca       	stdsp	sp[0x30],r10
80007e12:	0e 98       	mov	r8,r7
80007e14:	00 9a       	mov	r10,r0
80007e16:	40 cb       	lddsp	r11,sp[0x30]
80007e18:	a9 ca       	cbr	r10,0x8
80007e1a:	40 f7       	lddsp	r7,sp[0x3c]
80007e1c:	20 19       	sub	r9,1
80007e1e:	58 0b       	cp.w	r11,0
80007e20:	f4 00 17 10 	movne	r0,r10
80007e24:	58 19       	cp.w	r9,1
80007e26:	e0 8b 00 10 	brhi	80007e46 <__svfscanf_r+0x121e>
80007e2a:	c0 78       	rjmp	80007e38 <__svfscanf_r+0x1210>
80007e2c:	0a 9a       	mov	r10,r5
80007e2e:	0d 7b       	ld.ub	r11,--r6
80007e30:	40 4c       	lddsp	r12,sp[0x10]
80007e32:	e0 a0 1f d9 	rcall	8000bde4 <_ungetc_r>
80007e36:	c0 48       	rjmp	80007e3e <__svfscanf_r+0x1216>
80007e38:	fa c7 ff c0 	sub	r7,sp,-64
80007e3c:	10 96       	mov	r6,r8
80007e3e:	0e 36       	cp.w	r6,r7
80007e40:	fe 9b ff f6 	brhi	80007e2c <__svfscanf_r+0x1204>
80007e44:	c6 99       	rjmp	80008116 <__svfscanf_r+0x14ee>
80007e46:	e2 c9 00 01 	sub	r9,r1,1
80007e4a:	58 69       	cp.w	r9,6
80007e4c:	e0 8b 00 2d 	brhi	80007ea6 <__svfscanf_r+0x127e>
80007e50:	30 29       	mov	r9,2
80007e52:	f2 01 18 00 	cp.b	r1,r9
80007e56:	e0 88 00 21 	brls	80007e98 <__svfscanf_r+0x1270>
80007e5a:	50 b7       	stdsp	sp[0x2c],r7
80007e5c:	02 92       	mov	r2,r1
80007e5e:	10 97       	mov	r7,r8
80007e60:	c0 a8       	rjmp	80007e74 <__svfscanf_r+0x124c>
80007e62:	0f 7b       	ld.ub	r11,--r7
80007e64:	0a 9a       	mov	r10,r5
80007e66:	50 28       	stdsp	sp[0x8],r8
80007e68:	40 4c       	lddsp	r12,sp[0x10]
80007e6a:	e0 a0 1f bd 	rcall	8000bde4 <_ungetc_r>
80007e6e:	20 12       	sub	r2,1
80007e70:	40 28       	lddsp	r8,sp[0x8]
80007e72:	5c 52       	castu.b	r2
80007e74:	30 3a       	mov	r10,3
80007e76:	f4 02 18 00 	cp.b	r2,r10
80007e7a:	cf 41       	brne	80007e62 <__svfscanf_r+0x123a>
80007e7c:	40 39       	lddsp	r9,sp[0xc]
80007e7e:	20 31       	sub	r1,3
80007e80:	40 b7       	lddsp	r7,sp[0x2c]
80007e82:	5c 51       	castu.b	r1
80007e84:	02 19       	sub	r9,r1
80007e86:	02 18       	sub	r8,r1
80007e88:	50 39       	stdsp	sp[0xc],r9
80007e8a:	c0 e8       	rjmp	80007ea6 <__svfscanf_r+0x127e>
80007e8c:	0a 9a       	mov	r10,r5
80007e8e:	0d 7b       	ld.ub	r11,--r6
80007e90:	40 4c       	lddsp	r12,sp[0x10]
80007e92:	e0 a0 1f a9 	rcall	8000bde4 <_ungetc_r>
80007e96:	c0 48       	rjmp	80007e9e <__svfscanf_r+0x1276>
80007e98:	fa c7 ff c0 	sub	r7,sp,-64
80007e9c:	10 96       	mov	r6,r8
80007e9e:	0e 36       	cp.w	r6,r7
80007ea0:	fe 9b ff f6 	brhi	80007e8c <__svfscanf_r+0x1264>
80007ea4:	c3 99       	rjmp	80008116 <__svfscanf_r+0x14ee>
80007ea6:	ed b0 00 08 	bld	r0,0x8
80007eaa:	c3 21       	brne	80007f0e <__svfscanf_r+0x12e6>
80007eac:	00 99       	mov	r9,r0
80007eae:	e2 19 04 00 	andl	r9,0x400,COH
80007eb2:	c0 f0       	breq	80007ed0 <__svfscanf_r+0x12a8>
80007eb4:	c0 78       	rjmp	80007ec2 <__svfscanf_r+0x129a>
80007eb6:	0a 9a       	mov	r10,r5
80007eb8:	0d 7b       	ld.ub	r11,--r6
80007eba:	40 4c       	lddsp	r12,sp[0x10]
80007ebc:	e0 a0 1f 94 	rcall	8000bde4 <_ungetc_r>
80007ec0:	c0 48       	rjmp	80007ec8 <__svfscanf_r+0x12a0>
80007ec2:	fa c7 ff c0 	sub	r7,sp,-64
80007ec6:	10 96       	mov	r6,r8
80007ec8:	0e 36       	cp.w	r6,r7
80007eca:	fe 9b ff f6 	brhi	80007eb6 <__svfscanf_r+0x128e>
80007ece:	c2 49       	rjmp	80008116 <__svfscanf_r+0x14ee>
80007ed0:	40 3b       	lddsp	r11,sp[0xc]
80007ed2:	20 1b       	sub	r11,1
80007ed4:	50 3b       	stdsp	sp[0xc],r11
80007ed6:	11 7b       	ld.ub	r11,--r8
80007ed8:	e0 4b 00 45 	cp.w	r11,69
80007edc:	5f 1c       	srne	r12
80007ede:	e0 4b 00 65 	cp.w	r11,101
80007ee2:	5f 1a       	srne	r10
80007ee4:	f9 ea 00 0a 	and	r10,r12,r10
80007ee8:	f2 0a 18 00 	cp.b	r10,r9
80007eec:	c0 b0       	breq	80007f02 <__svfscanf_r+0x12da>
80007eee:	40 3a       	lddsp	r10,sp[0xc]
80007ef0:	20 1a       	sub	r10,1
80007ef2:	50 28       	stdsp	sp[0x8],r8
80007ef4:	50 3a       	stdsp	sp[0xc],r10
80007ef6:	40 4c       	lddsp	r12,sp[0x10]
80007ef8:	0a 9a       	mov	r10,r5
80007efa:	e0 a0 1f 75 	rcall	8000bde4 <_ungetc_r>
80007efe:	40 28       	lddsp	r8,sp[0x8]
80007f00:	11 7b       	ld.ub	r11,--r8
80007f02:	50 28       	stdsp	sp[0x8],r8
80007f04:	0a 9a       	mov	r10,r5
80007f06:	40 4c       	lddsp	r12,sp[0x10]
80007f08:	e0 a0 1f 6e 	rcall	8000bde4 <_ungetc_r>
80007f0c:	40 28       	lddsp	r8,sp[0x8]
80007f0e:	00 9a       	mov	r10,r0
80007f10:	e2 1a 00 10 	andl	r10,0x10,COH
80007f14:	fe 91 f6 99 	brne	80006c46 <__svfscanf_r+0x1e>
80007f18:	b0 8a       	st.b	r8[0x0],r10
80007f1a:	00 99       	mov	r9,r0
80007f1c:	e2 19 06 00 	andl	r9,0x600,COH
80007f20:	e0 49 04 00 	cp.w	r9,1024
80007f24:	c0 81       	brne	80007f34 <__svfscanf_r+0x130c>
80007f26:	40 cc       	lddsp	r12,sp[0x30]
80007f28:	40 e9       	lddsp	r9,sp[0x38]
80007f2a:	12 1c       	sub	r12,r9
80007f2c:	c1 f0       	breq	80007f6a <__svfscanf_r+0x1342>
80007f2e:	5c 3c       	neg	r12
80007f30:	50 58       	stdsp	sp[0x14],r8
80007f32:	c0 c8       	rjmp	80007f4a <__svfscanf_r+0x1322>
80007f34:	40 d8       	lddsp	r8,sp[0x34]
80007f36:	58 08       	cp.w	r8,0
80007f38:	c1 90       	breq	80007f6a <__svfscanf_r+0x1342>
80007f3a:	40 5b       	lddsp	r11,sp[0x14]
80007f3c:	30 a9       	mov	r9,10
80007f3e:	2f fb       	sub	r11,-1
80007f40:	40 4c       	lddsp	r12,sp[0x10]
80007f42:	e0 a0 1c 07 	rcall	8000b750 <_strtol_r>
80007f46:	40 db       	lddsp	r11,sp[0x34]
80007f48:	16 1c       	sub	r12,r11
80007f4a:	1a dc       	st.w	--sp,r12
80007f4c:	fa c8 fe 6a 	sub	r8,sp,-406
80007f50:	40 6a       	lddsp	r10,sp[0x18]
80007f52:	fa cc fe 69 	sub	r12,sp,-407
80007f56:	fe cb a1 ae 	sub	r11,pc,-24146
80007f5a:	18 3a       	cp.w	r10,r12
80007f5c:	f4 0c 17 30 	movlo	r12,r10
80007f60:	f0 0c 17 20 	movhs	r12,r8
80007f64:	e0 a0 15 5a 	rcall	8000aa18 <sprintf>
80007f68:	2f fd       	sub	sp,-4
80007f6a:	30 0a       	mov	r10,0
80007f6c:	fa cb ff c0 	sub	r11,sp,-64
80007f70:	40 4c       	lddsp	r12,sp[0x10]
80007f72:	e0 a0 15 bd 	rcall	8000aaec <_strtod_r>
80007f76:	14 98       	mov	r8,r10
80007f78:	16 99       	mov	r9,r11
80007f7a:	ed b0 00 00 	bld	r0,0x0
80007f7e:	c1 91       	brne	80007fb0 <__svfscanf_r+0x1388>
80007f80:	40 6b       	lddsp	r11,sp[0x18]
80007f82:	58 0b       	cp.w	r11,0
80007f84:	c4 40       	breq	8000800c <__svfscanf_r+0x13e4>
80007f86:	0e 34       	cp.w	r4,r7
80007f88:	c0 64       	brge	80007f94 <__svfscanf_r+0x136c>
80007f8a:	fa ca fc d4 	sub	r10,sp,-812
80007f8e:	f4 04 00 24 	add	r4,r10,r4<<0x2
80007f92:	c4 68       	rjmp	8000801e <__svfscanf_r+0x13f6>
80007f94:	fa cc fd 60 	sub	r12,sp,-672
80007f98:	0c 9b       	mov	r11,r6
80007f9a:	f8 07 00 2c 	add	r12,r12,r7<<0x2
80007f9e:	0e 9a       	mov	r10,r7
80007fa0:	10 90       	mov	r0,r8
80007fa2:	12 91       	mov	r1,r9
80007fa4:	17 08       	ld.w	r8,r11++
80007fa6:	18 a8       	st.w	r12++,r8
80007fa8:	2f fa       	sub	r10,-1
80007faa:	14 34       	cp.w	r4,r10
80007fac:	cf c4       	brge	80007fa4 <__svfscanf_r+0x137c>
80007fae:	c1 b8       	rjmp	80007fe4 <__svfscanf_r+0x13bc>
80007fb0:	e2 10 00 02 	andl	r0,0x2,COH
80007fb4:	c4 a0       	breq	80008048 <__svfscanf_r+0x1420>
80007fb6:	40 6a       	lddsp	r10,sp[0x18]
80007fb8:	58 0a       	cp.w	r10,0
80007fba:	c2 90       	breq	8000800c <__svfscanf_r+0x13e4>
80007fbc:	0e 34       	cp.w	r4,r7
80007fbe:	c0 64       	brge	80007fca <__svfscanf_r+0x13a2>
80007fc0:	fa cb fc d4 	sub	r11,sp,-812
80007fc4:	f6 04 00 24 	add	r4,r11,r4<<0x2
80007fc8:	c2 b8       	rjmp	8000801e <__svfscanf_r+0x13f6>
80007fca:	fa cc fd 60 	sub	r12,sp,-672
80007fce:	0c 9b       	mov	r11,r6
80007fd0:	f8 07 00 2c 	add	r12,r12,r7<<0x2
80007fd4:	0e 9a       	mov	r10,r7
80007fd6:	10 90       	mov	r0,r8
80007fd8:	12 91       	mov	r1,r9
80007fda:	17 08       	ld.w	r8,r11++
80007fdc:	18 a8       	st.w	r12++,r8
80007fde:	2f fa       	sub	r10,-1
80007fe0:	14 34       	cp.w	r4,r10
80007fe2:	cf c4       	brge	80007fda <__svfscanf_r+0x13b2>
80007fe4:	ee cb ff ff 	sub	r11,r7,-1
80007fe8:	ee 0a 11 ff 	rsub	r10,r7,-1
80007fec:	f4 c7 ff ff 	sub	r7,r10,-1
80007ff0:	2f ea       	sub	r10,-2
80007ff2:	08 0a       	add	r10,r4
80007ff4:	08 07       	add	r7,r4
80007ff6:	ec 0a 00 26 	add	r6,r6,r10<<0x2
80007ffa:	00 98       	mov	r8,r0
80007ffc:	fa ca fd 60 	sub	r10,sp,-672
80008000:	02 99       	mov	r9,r1
80008002:	f6 07 00 07 	add	r7,r11,r7
80008006:	f4 04 03 24 	ld.w	r4,r10[r4<<0x2]
8000800a:	c1 c8       	rjmp	80008042 <__svfscanf_r+0x141a>
8000800c:	e6 ca ff ff 	sub	r10,r3,-1
80008010:	0e 33       	cp.w	r3,r7
80008012:	c0 94       	brge	80008024 <__svfscanf_r+0x13fc>
80008014:	fa cb fc d4 	sub	r11,sp,-812
80008018:	14 93       	mov	r3,r10
8000801a:	f6 04 00 24 	add	r4,r11,r4<<0x2
8000801e:	e8 f4 ff 74 	ld.w	r4,r4[-140]
80008022:	c1 08       	rjmp	80008042 <__svfscanf_r+0x141a>
80008024:	6c 04       	ld.w	r4,r6[0x0]
80008026:	2f c6       	sub	r6,-4
80008028:	59 f7       	cp.w	r7,31
8000802a:	e0 89 00 0b 	brgt	80008040 <__svfscanf_r+0x1418>
8000802e:	14 93       	mov	r3,r10
80008030:	fa cb fc d4 	sub	r11,sp,-812
80008034:	f6 07 00 2a 	add	r10,r11,r7<<0x2
80008038:	2f f7       	sub	r7,-1
8000803a:	f5 44 ff 74 	st.w	r10[-140],r4
8000803e:	c0 28       	rjmp	80008042 <__svfscanf_r+0x141a>
80008040:	14 93       	mov	r3,r10
80008042:	e8 e9 00 00 	st.d	r4[0],r8
80008046:	c5 a8       	rjmp	800080fa <__svfscanf_r+0x14d2>
80008048:	40 6a       	lddsp	r10,sp[0x18]
8000804a:	58 0a       	cp.w	r10,0
8000804c:	c2 90       	breq	8000809e <__svfscanf_r+0x1476>
8000804e:	0e 34       	cp.w	r4,r7
80008050:	c0 64       	brge	8000805c <__svfscanf_r+0x1434>
80008052:	fa cb fc d4 	sub	r11,sp,-812
80008056:	f6 04 00 24 	add	r4,r11,r4<<0x2
8000805a:	c2 b8       	rjmp	800080b0 <__svfscanf_r+0x1488>
8000805c:	fa cc fd 60 	sub	r12,sp,-672
80008060:	0c 9b       	mov	r11,r6
80008062:	f8 07 00 2c 	add	r12,r12,r7<<0x2
80008066:	0e 9a       	mov	r10,r7
80008068:	10 90       	mov	r0,r8
8000806a:	12 91       	mov	r1,r9
8000806c:	17 08       	ld.w	r8,r11++
8000806e:	18 a8       	st.w	r12++,r8
80008070:	2f fa       	sub	r10,-1
80008072:	14 34       	cp.w	r4,r10
80008074:	cf c4       	brge	8000806c <__svfscanf_r+0x1444>
80008076:	ee cb ff ff 	sub	r11,r7,-1
8000807a:	ee 0a 11 ff 	rsub	r10,r7,-1
8000807e:	f4 c7 ff ff 	sub	r7,r10,-1
80008082:	2f ea       	sub	r10,-2
80008084:	08 0a       	add	r10,r4
80008086:	08 07       	add	r7,r4
80008088:	ec 0a 00 26 	add	r6,r6,r10<<0x2
8000808c:	00 98       	mov	r8,r0
8000808e:	fa ca fd 60 	sub	r10,sp,-672
80008092:	02 99       	mov	r9,r1
80008094:	f6 07 00 07 	add	r7,r11,r7
80008098:	f4 04 03 24 	ld.w	r4,r10[r4<<0x2]
8000809c:	c1 d8       	rjmp	800080d6 <__svfscanf_r+0x14ae>
8000809e:	e6 ca ff ff 	sub	r10,r3,-1
800080a2:	0e 33       	cp.w	r3,r7
800080a4:	c0 a4       	brge	800080b8 <__svfscanf_r+0x1490>
800080a6:	fa cb fc d4 	sub	r11,sp,-812
800080aa:	14 93       	mov	r3,r10
800080ac:	f6 04 00 24 	add	r4,r11,r4<<0x2
800080b0:	e8 f4 ff 74 	ld.w	r4,r4[-140]
800080b4:	c1 18       	rjmp	800080d6 <__svfscanf_r+0x14ae>
800080b6:	d7 03       	nop
800080b8:	6c 04       	ld.w	r4,r6[0x0]
800080ba:	2f c6       	sub	r6,-4
800080bc:	59 f7       	cp.w	r7,31
800080be:	e0 89 00 0b 	brgt	800080d4 <__svfscanf_r+0x14ac>
800080c2:	14 93       	mov	r3,r10
800080c4:	fa cb fc d4 	sub	r11,sp,-812
800080c8:	f6 07 00 2a 	add	r10,r11,r7<<0x2
800080cc:	2f f7       	sub	r7,-1
800080ce:	f5 44 ff 74 	st.w	r10[-140],r4
800080d2:	c0 28       	rjmp	800080d6 <__svfscanf_r+0x14ae>
800080d4:	14 93       	mov	r3,r10
800080d6:	10 9a       	mov	r10,r8
800080d8:	12 9b       	mov	r11,r9
800080da:	50 19       	stdsp	sp[0x4],r9
800080dc:	50 28       	stdsp	sp[0x8],r8
800080de:	e0 a0 14 32 	rcall	8000a942 <__isnand>
800080e2:	40 19       	lddsp	r9,sp[0x4]
800080e4:	40 28       	lddsp	r8,sp[0x8]
800080e6:	c0 50       	breq	800080f0 <__svfscanf_r+0x14c8>
800080e8:	30 0c       	mov	r12,0
800080ea:	e0 a0 14 94 	rcall	8000aa12 <nanf>
800080ee:	c0 58       	rjmp	800080f8 <__svfscanf_r+0x14d0>
800080f0:	10 9a       	mov	r10,r8
800080f2:	12 9b       	mov	r11,r9
800080f4:	e0 a0 27 e2 	rcall	8000d0b8 <__avr32_f64_to_f32>
800080f8:	89 0c       	st.w	r4[0x0],r12
800080fa:	40 7a       	lddsp	r10,sp[0x1c]
800080fc:	2f fa       	sub	r10,-1
800080fe:	50 7a       	stdsp	sp[0x1c],r10
80008100:	fe 9f f5 a3 	bral	80006c46 <__svfscanf_r+0x1e>
80008104:	40 79       	lddsp	r9,sp[0x1c]
80008106:	58 09       	cp.w	r9,0
80008108:	c0 50       	breq	80008112 <__svfscanf_r+0x14ea>
8000810a:	8a 68       	ld.sh	r8,r5[0xc]
8000810c:	ed b8 00 06 	bld	r8,0x6
80008110:	c0 31       	brne	80008116 <__svfscanf_r+0x14ee>
80008112:	3f f8       	mov	r8,-1
80008114:	50 78       	stdsp	sp[0x1c],r8
80008116:	40 7c       	lddsp	r12,sp[0x1c]
80008118:	fe 3d fc d4 	sub	sp,-812
8000811c:	d8 32       	popm	r0-r7,pc
8000811e:	d7 03       	nop

80008120 <__swsetup_r>:
80008120:	d4 21       	pushm	r4-r7,lr
80008122:	e0 68 01 94 	mov	r8,404
80008126:	18 96       	mov	r6,r12
80008128:	16 97       	mov	r7,r11
8000812a:	70 0c       	ld.w	r12,r8[0x0]
8000812c:	58 0c       	cp.w	r12,0
8000812e:	c0 60       	breq	8000813a <__swsetup_r+0x1a>
80008130:	78 68       	ld.w	r8,r12[0x18]
80008132:	58 08       	cp.w	r8,0
80008134:	c0 31       	brne	8000813a <__swsetup_r+0x1a>
80008136:	e0 a0 07 cb 	rcall	800090cc <__sinit>
8000813a:	fe c8 a2 76 	sub	r8,pc,-23946
8000813e:	10 37       	cp.w	r7,r8
80008140:	c0 61       	brne	8000814c <__swsetup_r+0x2c>
80008142:	e0 68 01 94 	mov	r8,404
80008146:	70 08       	ld.w	r8,r8[0x0]
80008148:	70 07       	ld.w	r7,r8[0x0]
8000814a:	c1 28       	rjmp	8000816e <__swsetup_r+0x4e>
8000814c:	fe c8 a2 68 	sub	r8,pc,-23960
80008150:	10 37       	cp.w	r7,r8
80008152:	c0 61       	brne	8000815e <__swsetup_r+0x3e>
80008154:	e0 68 01 94 	mov	r8,404
80008158:	70 08       	ld.w	r8,r8[0x0]
8000815a:	70 17       	ld.w	r7,r8[0x4]
8000815c:	c0 98       	rjmp	8000816e <__swsetup_r+0x4e>
8000815e:	fe c8 a2 5a 	sub	r8,pc,-23974
80008162:	10 37       	cp.w	r7,r8
80008164:	c0 51       	brne	8000816e <__swsetup_r+0x4e>
80008166:	e0 68 01 94 	mov	r8,404
8000816a:	70 08       	ld.w	r8,r8[0x0]
8000816c:	70 27       	ld.w	r7,r8[0x8]
8000816e:	8e 68       	ld.sh	r8,r7[0xc]
80008170:	ed b8 00 03 	bld	r8,0x3
80008174:	c1 e0       	breq	800081b0 <__swsetup_r+0x90>
80008176:	ed b8 00 04 	bld	r8,0x4
8000817a:	c3 e1       	brne	800081f6 <__swsetup_r+0xd6>
8000817c:	ed b8 00 02 	bld	r8,0x2
80008180:	c1 51       	brne	800081aa <__swsetup_r+0x8a>
80008182:	6e db       	ld.w	r11,r7[0x34]
80008184:	58 0b       	cp.w	r11,0
80008186:	c0 a0       	breq	8000819a <__swsetup_r+0x7a>
80008188:	ee c8 ff bc 	sub	r8,r7,-68
8000818c:	10 3b       	cp.w	r11,r8
8000818e:	c0 40       	breq	80008196 <__swsetup_r+0x76>
80008190:	0c 9c       	mov	r12,r6
80008192:	e0 a0 08 91 	rcall	800092b4 <_free_r>
80008196:	30 08       	mov	r8,0
80008198:	8f d8       	st.w	r7[0x34],r8
8000819a:	8e 68       	ld.sh	r8,r7[0xc]
8000819c:	e0 18 ff db 	andl	r8,0xffdb
800081a0:	ae 68       	st.h	r7[0xc],r8
800081a2:	30 08       	mov	r8,0
800081a4:	8f 18       	st.w	r7[0x4],r8
800081a6:	6e 48       	ld.w	r8,r7[0x10]
800081a8:	8f 08       	st.w	r7[0x0],r8
800081aa:	8e 68       	ld.sh	r8,r7[0xc]
800081ac:	a3 b8       	sbr	r8,0x3
800081ae:	ae 68       	st.h	r7[0xc],r8
800081b0:	6e 48       	ld.w	r8,r7[0x10]
800081b2:	58 08       	cp.w	r8,0
800081b4:	c0 b1       	brne	800081ca <__swsetup_r+0xaa>
800081b6:	8e 68       	ld.sh	r8,r7[0xc]
800081b8:	e2 18 02 80 	andl	r8,0x280,COH
800081bc:	e0 48 02 00 	cp.w	r8,512
800081c0:	c0 50       	breq	800081ca <__swsetup_r+0xaa>
800081c2:	0c 9c       	mov	r12,r6
800081c4:	0e 9b       	mov	r11,r7
800081c6:	e0 a0 0a ed 	rcall	800097a0 <__smakebuf_r>
800081ca:	8e 69       	ld.sh	r9,r7[0xc]
800081cc:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800081d0:	c0 70       	breq	800081de <__swsetup_r+0xbe>
800081d2:	30 08       	mov	r8,0
800081d4:	8f 28       	st.w	r7[0x8],r8
800081d6:	6e 58       	ld.w	r8,r7[0x14]
800081d8:	5c 38       	neg	r8
800081da:	8f 68       	st.w	r7[0x18],r8
800081dc:	c0 68       	rjmp	800081e8 <__swsetup_r+0xc8>
800081de:	ed b9 00 01 	bld	r9,0x1
800081e2:	ef f8 10 05 	ld.wne	r8,r7[0x14]
800081e6:	8f 28       	st.w	r7[0x8],r8
800081e8:	6e 48       	ld.w	r8,r7[0x10]
800081ea:	58 08       	cp.w	r8,0
800081ec:	c0 61       	brne	800081f8 <__swsetup_r+0xd8>
800081ee:	8e 68       	ld.sh	r8,r7[0xc]
800081f0:	ed b8 00 07 	bld	r8,0x7
800081f4:	c0 21       	brne	800081f8 <__swsetup_r+0xd8>
800081f6:	dc 2a       	popm	r4-r7,pc,r12=-1
800081f8:	d8 2a       	popm	r4-r7,pc,r12=0
800081fa:	d7 03       	nop

800081fc <quorem>:
800081fc:	d4 31       	pushm	r0-r7,lr
800081fe:	20 2d       	sub	sp,8
80008200:	18 97       	mov	r7,r12
80008202:	78 48       	ld.w	r8,r12[0x10]
80008204:	76 46       	ld.w	r6,r11[0x10]
80008206:	0c 38       	cp.w	r8,r6
80008208:	c0 34       	brge	8000820e <quorem+0x12>
8000820a:	30 0c       	mov	r12,0
8000820c:	c8 58       	rjmp	80008316 <quorem+0x11a>
8000820e:	ec c2 ff fc 	sub	r2,r6,-4
80008212:	f6 c3 ff ec 	sub	r3,r11,-20
80008216:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000821a:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
8000821e:	2f f9       	sub	r9,-1
80008220:	20 16       	sub	r6,1
80008222:	f8 09 0d 08 	divu	r8,r12,r9
80008226:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000822a:	ee c4 ff ec 	sub	r4,r7,-20
8000822e:	10 95       	mov	r5,r8
80008230:	58 08       	cp.w	r8,0
80008232:	c4 10       	breq	800082b4 <quorem+0xb8>
80008234:	30 09       	mov	r9,0
80008236:	06 9a       	mov	r10,r3
80008238:	08 98       	mov	r8,r4
8000823a:	12 91       	mov	r1,r9
8000823c:	50 0b       	stdsp	sp[0x0],r11
8000823e:	70 0e       	ld.w	lr,r8[0x0]
80008240:	b1 8e       	lsr	lr,0x10
80008242:	50 1e       	stdsp	sp[0x4],lr
80008244:	15 0e       	ld.w	lr,r10++
80008246:	fc 00 16 10 	lsr	r0,lr,0x10
8000824a:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000824e:	ea 0e 03 41 	mac	r1,r5,lr
80008252:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80008256:	b1 81       	lsr	r1,0x10
80008258:	40 1b       	lddsp	r11,sp[0x4]
8000825a:	ea 00 02 40 	mul	r0,r5,r0
8000825e:	e2 00 00 00 	add	r0,r1,r0
80008262:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80008266:	02 1b       	sub	r11,r1
80008268:	50 1b       	stdsp	sp[0x4],r11
8000826a:	70 0b       	ld.w	r11,r8[0x0]
8000826c:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80008270:	02 09       	add	r9,r1
80008272:	f2 0e 01 0e 	sub	lr,r9,lr
80008276:	b0 1e       	st.h	r8[0x2],lr
80008278:	fc 09 14 10 	asr	r9,lr,0x10
8000827c:	40 1e       	lddsp	lr,sp[0x4]
8000827e:	fc 09 00 09 	add	r9,lr,r9
80008282:	b0 09       	st.h	r8[0x0],r9
80008284:	e0 01 16 10 	lsr	r1,r0,0x10
80008288:	2f c8       	sub	r8,-4
8000828a:	b1 49       	asr	r9,0x10
8000828c:	04 3a       	cp.w	r10,r2
8000828e:	fe 98 ff d8 	brls	8000823e <quorem+0x42>
80008292:	40 0b       	lddsp	r11,sp[0x0]
80008294:	58 0c       	cp.w	r12,0
80008296:	c0 f1       	brne	800082b4 <quorem+0xb8>
80008298:	ec c8 ff fb 	sub	r8,r6,-5
8000829c:	ee 08 00 28 	add	r8,r7,r8<<0x2
800082a0:	c0 28       	rjmp	800082a4 <quorem+0xa8>
800082a2:	20 16       	sub	r6,1
800082a4:	20 48       	sub	r8,4
800082a6:	08 38       	cp.w	r8,r4
800082a8:	e0 88 00 05 	brls	800082b2 <quorem+0xb6>
800082ac:	70 09       	ld.w	r9,r8[0x0]
800082ae:	58 09       	cp.w	r9,0
800082b0:	cf 90       	breq	800082a2 <quorem+0xa6>
800082b2:	8f 46       	st.w	r7[0x10],r6
800082b4:	0e 9c       	mov	r12,r7
800082b6:	e0 a0 0d c4 	rcall	80009e3e <__mcmp>
800082ba:	c2 d5       	brlt	80008314 <quorem+0x118>
800082bc:	2f f5       	sub	r5,-1
800082be:	08 98       	mov	r8,r4
800082c0:	30 09       	mov	r9,0
800082c2:	07 0b       	ld.w	r11,r3++
800082c4:	f6 0a 16 10 	lsr	r10,r11,0x10
800082c8:	70 0c       	ld.w	r12,r8[0x0]
800082ca:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800082ce:	f8 0e 16 10 	lsr	lr,r12,0x10
800082d2:	14 1e       	sub	lr,r10
800082d4:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800082d8:	16 1a       	sub	r10,r11
800082da:	12 0a       	add	r10,r9
800082dc:	b0 1a       	st.h	r8[0x2],r10
800082de:	b1 4a       	asr	r10,0x10
800082e0:	fc 0a 00 09 	add	r9,lr,r10
800082e4:	b0 09       	st.h	r8[0x0],r9
800082e6:	2f c8       	sub	r8,-4
800082e8:	b1 49       	asr	r9,0x10
800082ea:	04 33       	cp.w	r3,r2
800082ec:	fe 98 ff eb 	brls	800082c2 <quorem+0xc6>
800082f0:	ec c8 ff fb 	sub	r8,r6,-5
800082f4:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800082f8:	58 09       	cp.w	r9,0
800082fa:	c0 d1       	brne	80008314 <quorem+0x118>
800082fc:	ee 08 00 28 	add	r8,r7,r8<<0x2
80008300:	c0 28       	rjmp	80008304 <quorem+0x108>
80008302:	20 16       	sub	r6,1
80008304:	20 48       	sub	r8,4
80008306:	08 38       	cp.w	r8,r4
80008308:	e0 88 00 05 	brls	80008312 <quorem+0x116>
8000830c:	70 09       	ld.w	r9,r8[0x0]
8000830e:	58 09       	cp.w	r9,0
80008310:	cf 90       	breq	80008302 <quorem+0x106>
80008312:	8f 46       	st.w	r7[0x10],r6
80008314:	0a 9c       	mov	r12,r5
80008316:	2f ed       	sub	sp,-8
80008318:	d8 32       	popm	r0-r7,pc
8000831a:	d7 03       	nop

8000831c <_dtoa_r>:
8000831c:	d4 31       	pushm	r0-r7,lr
8000831e:	21 ad       	sub	sp,104
80008320:	fa c4 ff 74 	sub	r4,sp,-140
80008324:	18 97       	mov	r7,r12
80008326:	16 95       	mov	r5,r11
80008328:	68 2c       	ld.w	r12,r4[0x8]
8000832a:	50 c9       	stdsp	sp[0x30],r9
8000832c:	68 16       	ld.w	r6,r4[0x4]
8000832e:	68 09       	ld.w	r9,r4[0x0]
80008330:	50 e8       	stdsp	sp[0x38],r8
80008332:	14 94       	mov	r4,r10
80008334:	51 2c       	stdsp	sp[0x48],r12
80008336:	fa e5 00 08 	st.d	sp[8],r4
8000833a:	51 59       	stdsp	sp[0x54],r9
8000833c:	6e 95       	ld.w	r5,r7[0x24]
8000833e:	58 05       	cp.w	r5,0
80008340:	c0 91       	brne	80008352 <_dtoa_r+0x36>
80008342:	31 0c       	mov	r12,16
80008344:	e0 a0 0a 8c 	rcall	8000985c <malloc>
80008348:	99 35       	st.w	r12[0xc],r5
8000834a:	8f 9c       	st.w	r7[0x24],r12
8000834c:	99 15       	st.w	r12[0x4],r5
8000834e:	99 25       	st.w	r12[0x8],r5
80008350:	99 05       	st.w	r12[0x0],r5
80008352:	6e 99       	ld.w	r9,r7[0x24]
80008354:	72 08       	ld.w	r8,r9[0x0]
80008356:	58 08       	cp.w	r8,0
80008358:	c0 f0       	breq	80008376 <_dtoa_r+0x5a>
8000835a:	72 1a       	ld.w	r10,r9[0x4]
8000835c:	91 1a       	st.w	r8[0x4],r10
8000835e:	30 1a       	mov	r10,1
80008360:	72 19       	ld.w	r9,r9[0x4]
80008362:	f4 09 09 49 	lsl	r9,r10,r9
80008366:	10 9b       	mov	r11,r8
80008368:	91 29       	st.w	r8[0x8],r9
8000836a:	0e 9c       	mov	r12,r7
8000836c:	e0 a0 0e 58 	rcall	8000a01c <_Bfree>
80008370:	6e 98       	ld.w	r8,r7[0x24]
80008372:	30 09       	mov	r9,0
80008374:	91 09       	st.w	r8[0x0],r9
80008376:	40 28       	lddsp	r8,sp[0x8]
80008378:	10 94       	mov	r4,r8
8000837a:	58 08       	cp.w	r8,0
8000837c:	c0 64       	brge	80008388 <_dtoa_r+0x6c>
8000837e:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80008382:	50 28       	stdsp	sp[0x8],r8
80008384:	30 18       	mov	r8,1
80008386:	c0 28       	rjmp	8000838a <_dtoa_r+0x6e>
80008388:	30 08       	mov	r8,0
8000838a:	8d 08       	st.w	r6[0x0],r8
8000838c:	fc 1c 7f f0 	movh	r12,0x7ff0
80008390:	40 26       	lddsp	r6,sp[0x8]
80008392:	0c 98       	mov	r8,r6
80008394:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008398:	18 38       	cp.w	r8,r12
8000839a:	c2 01       	brne	800083da <_dtoa_r+0xbe>
8000839c:	e0 68 27 0f 	mov	r8,9999
800083a0:	41 5b       	lddsp	r11,sp[0x54]
800083a2:	97 08       	st.w	r11[0x0],r8
800083a4:	40 3a       	lddsp	r10,sp[0xc]
800083a6:	58 0a       	cp.w	r10,0
800083a8:	c0 71       	brne	800083b6 <_dtoa_r+0x9a>
800083aa:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800083ae:	c0 41       	brne	800083b6 <_dtoa_r+0x9a>
800083b0:	fe cc a4 fc 	sub	r12,pc,-23300
800083b4:	c0 38       	rjmp	800083ba <_dtoa_r+0x9e>
800083b6:	fe cc a4 f6 	sub	r12,pc,-23306
800083ba:	41 29       	lddsp	r9,sp[0x48]
800083bc:	58 09       	cp.w	r9,0
800083be:	e0 80 05 9a 	breq	80008ef2 <_dtoa_r+0xbd6>
800083c2:	f8 c8 ff fd 	sub	r8,r12,-3
800083c6:	f8 c9 ff f8 	sub	r9,r12,-8
800083ca:	11 8b       	ld.ub	r11,r8[0x0]
800083cc:	30 0a       	mov	r10,0
800083ce:	41 25       	lddsp	r5,sp[0x48]
800083d0:	f4 0b 18 00 	cp.b	r11,r10
800083d4:	f2 08 17 10 	movne	r8,r9
800083d8:	c1 68       	rjmp	80008404 <_dtoa_r+0xe8>
800083da:	fa ea 00 08 	ld.d	r10,sp[8]
800083de:	30 08       	mov	r8,0
800083e0:	fa eb 00 3c 	st.d	sp[60],r10
800083e4:	30 09       	mov	r9,0
800083e6:	e0 a0 24 62 	rcall	8000ccaa <__avr32_f64_cmp_eq>
800083ea:	c1 00       	breq	8000840a <_dtoa_r+0xee>
800083ec:	30 18       	mov	r8,1
800083ee:	41 5a       	lddsp	r10,sp[0x54]
800083f0:	95 08       	st.w	r10[0x0],r8
800083f2:	fe cc a7 92 	sub	r12,pc,-22638
800083f6:	41 29       	lddsp	r9,sp[0x48]
800083f8:	f8 08 00 08 	add	r8,r12,r8
800083fc:	58 09       	cp.w	r9,0
800083fe:	e0 80 05 7a 	breq	80008ef2 <_dtoa_r+0xbd6>
80008402:	12 95       	mov	r5,r9
80008404:	8b 08       	st.w	r5[0x0],r8
80008406:	e0 8f 05 76 	bral	80008ef2 <_dtoa_r+0xbd6>
8000840a:	fa c8 ff 9c 	sub	r8,sp,-100
8000840e:	fa c9 ff a0 	sub	r9,sp,-96
80008412:	fa ea 00 3c 	ld.d	r10,sp[60]
80008416:	0e 9c       	mov	r12,r7
80008418:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
8000841c:	e0 a0 0e 52 	rcall	8000a0c0 <__d2b>
80008420:	18 93       	mov	r3,r12
80008422:	58 05       	cp.w	r5,0
80008424:	c0 d0       	breq	8000843e <_dtoa_r+0x122>
80008426:	fa ea 00 3c 	ld.d	r10,sp[60]
8000842a:	30 04       	mov	r4,0
8000842c:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80008430:	ea c5 03 ff 	sub	r5,r5,1023
80008434:	10 9b       	mov	r11,r8
80008436:	51 74       	stdsp	sp[0x5c],r4
80008438:	ea 1b 3f f0 	orh	r11,0x3ff0
8000843c:	c2 58       	rjmp	80008486 <_dtoa_r+0x16a>
8000843e:	41 88       	lddsp	r8,sp[0x60]
80008440:	41 9c       	lddsp	r12,sp[0x64]
80008442:	10 0c       	add	r12,r8
80008444:	f8 c5 fb ce 	sub	r5,r12,-1074
80008448:	e0 45 00 20 	cp.w	r5,32
8000844c:	e0 8a 00 0e 	brle	80008468 <_dtoa_r+0x14c>
80008450:	f8 cc fb ee 	sub	r12,r12,-1042
80008454:	40 3b       	lddsp	r11,sp[0xc]
80008456:	ea 08 11 40 	rsub	r8,r5,64
8000845a:	f6 0c 0a 4c 	lsr	r12,r11,r12
8000845e:	ec 08 09 46 	lsl	r6,r6,r8
80008462:	0c 4c       	or	r12,r6
80008464:	c0 78       	rjmp	80008472 <_dtoa_r+0x156>
80008466:	d7 03       	nop
80008468:	ea 0c 11 20 	rsub	r12,r5,32
8000846c:	40 3a       	lddsp	r10,sp[0xc]
8000846e:	f4 0c 09 4c 	lsl	r12,r10,r12
80008472:	e0 a0 23 a8 	rcall	8000cbc2 <__avr32_u32_to_f64>
80008476:	fc 18 fe 10 	movh	r8,0xfe10
8000847a:	30 19       	mov	r9,1
8000847c:	ea c5 04 33 	sub	r5,r5,1075
80008480:	f0 0b 00 0b 	add	r11,r8,r11
80008484:	51 79       	stdsp	sp[0x5c],r9
80008486:	30 08       	mov	r8,0
80008488:	fc 19 3f f8 	movh	r9,0x3ff8
8000848c:	e0 a0 22 30 	rcall	8000c8ec <__avr32_f64_sub>
80008490:	e0 68 43 61 	mov	r8,17249
80008494:	ea 18 63 6f 	orh	r8,0x636f
80008498:	e0 69 87 a7 	mov	r9,34727
8000849c:	ea 19 3f d2 	orh	r9,0x3fd2
800084a0:	e0 a0 21 3a 	rcall	8000c714 <__avr32_f64_mul>
800084a4:	e0 68 c8 b3 	mov	r8,51379
800084a8:	ea 18 8b 60 	orh	r8,0x8b60
800084ac:	e0 69 8a 28 	mov	r9,35368
800084b0:	ea 19 3f c6 	orh	r9,0x3fc6
800084b4:	e0 a0 22 ea 	rcall	8000ca88 <__avr32_f64_add>
800084b8:	0a 9c       	mov	r12,r5
800084ba:	14 90       	mov	r0,r10
800084bc:	16 91       	mov	r1,r11
800084be:	e0 a0 23 86 	rcall	8000cbca <__avr32_s32_to_f64>
800084c2:	e0 68 79 fb 	mov	r8,31227
800084c6:	ea 18 50 9f 	orh	r8,0x509f
800084ca:	e0 69 44 13 	mov	r9,17427
800084ce:	ea 19 3f d3 	orh	r9,0x3fd3
800084d2:	e0 a0 21 21 	rcall	8000c714 <__avr32_f64_mul>
800084d6:	14 98       	mov	r8,r10
800084d8:	16 99       	mov	r9,r11
800084da:	00 9a       	mov	r10,r0
800084dc:	02 9b       	mov	r11,r1
800084de:	e0 a0 22 d5 	rcall	8000ca88 <__avr32_f64_add>
800084e2:	14 90       	mov	r0,r10
800084e4:	16 91       	mov	r1,r11
800084e6:	e0 a0 23 5b 	rcall	8000cb9c <__avr32_f64_to_s32>
800084ea:	30 08       	mov	r8,0
800084ec:	18 96       	mov	r6,r12
800084ee:	30 09       	mov	r9,0
800084f0:	00 9a       	mov	r10,r0
800084f2:	02 9b       	mov	r11,r1
800084f4:	e0 a0 24 22 	rcall	8000cd38 <__avr32_f64_cmp_lt>
800084f8:	c0 c0       	breq	80008510 <_dtoa_r+0x1f4>
800084fa:	0c 9c       	mov	r12,r6
800084fc:	e0 a0 23 67 	rcall	8000cbca <__avr32_s32_to_f64>
80008500:	14 98       	mov	r8,r10
80008502:	16 99       	mov	r9,r11
80008504:	00 9a       	mov	r10,r0
80008506:	02 9b       	mov	r11,r1
80008508:	e0 a0 23 d1 	rcall	8000ccaa <__avr32_f64_cmp_eq>
8000850c:	f7 b6 00 01 	subeq	r6,1
80008510:	59 66       	cp.w	r6,22
80008512:	e0 88 00 05 	brls	8000851c <_dtoa_r+0x200>
80008516:	30 18       	mov	r8,1
80008518:	51 48       	stdsp	sp[0x50],r8
8000851a:	c1 38       	rjmp	80008540 <_dtoa_r+0x224>
8000851c:	fe c8 a5 ac 	sub	r8,pc,-23124
80008520:	fa ea 00 3c 	ld.d	r10,sp[60]
80008524:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80008528:	e0 a0 24 08 	rcall	8000cd38 <__avr32_f64_cmp_lt>
8000852c:	f9 b4 00 00 	moveq	r4,0
80008530:	fb f4 0a 14 	st.weq	sp[0x50],r4
80008534:	f7 b6 01 01 	subne	r6,1
80008538:	f9 bc 01 00 	movne	r12,0
8000853c:	fb fc 1a 14 	st.wne	sp[0x50],r12
80008540:	41 90       	lddsp	r0,sp[0x64]
80008542:	20 10       	sub	r0,1
80008544:	0a 10       	sub	r0,r5
80008546:	c0 46       	brmi	8000854e <_dtoa_r+0x232>
80008548:	50 40       	stdsp	sp[0x10],r0
8000854a:	30 00       	mov	r0,0
8000854c:	c0 48       	rjmp	80008554 <_dtoa_r+0x238>
8000854e:	30 0b       	mov	r11,0
80008550:	5c 30       	neg	r0
80008552:	50 4b       	stdsp	sp[0x10],r11
80008554:	ec 02 11 00 	rsub	r2,r6,0
80008558:	58 06       	cp.w	r6,0
8000855a:	fb fa 40 04 	ld.wge	r10,sp[0x10]
8000855e:	f5 d6 e4 0a 	addge	r10,r10,r6
80008562:	fb fa 4a 04 	st.wge	sp[0x10],r10
80008566:	fb f6 4a 11 	st.wge	sp[0x44],r6
8000856a:	f9 b2 04 00 	movge	r2,0
8000856e:	e1 d6 e5 10 	sublt	r0,r0,r6
80008572:	f9 b9 05 00 	movlt	r9,0
80008576:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8000857a:	40 c8       	lddsp	r8,sp[0x30]
8000857c:	58 98       	cp.w	r8,9
8000857e:	e0 8b 00 20 	brhi	800085be <_dtoa_r+0x2a2>
80008582:	58 58       	cp.w	r8,5
80008584:	f9 b4 0a 01 	movle	r4,1
80008588:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
8000858c:	f7 b5 09 04 	subgt	r5,4
80008590:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80008594:	f9 b4 09 00 	movgt	r4,0
80008598:	40 cc       	lddsp	r12,sp[0x30]
8000859a:	58 3c       	cp.w	r12,3
8000859c:	c2 d0       	breq	800085f6 <_dtoa_r+0x2da>
8000859e:	e0 89 00 05 	brgt	800085a8 <_dtoa_r+0x28c>
800085a2:	58 2c       	cp.w	r12,2
800085a4:	c1 01       	brne	800085c4 <_dtoa_r+0x2a8>
800085a6:	c1 88       	rjmp	800085d6 <_dtoa_r+0x2ba>
800085a8:	40 cb       	lddsp	r11,sp[0x30]
800085aa:	58 4b       	cp.w	r11,4
800085ac:	c0 60       	breq	800085b8 <_dtoa_r+0x29c>
800085ae:	58 5b       	cp.w	r11,5
800085b0:	c0 a1       	brne	800085c4 <_dtoa_r+0x2a8>
800085b2:	30 1a       	mov	r10,1
800085b4:	50 da       	stdsp	sp[0x34],r10
800085b6:	c2 28       	rjmp	800085fa <_dtoa_r+0x2de>
800085b8:	30 19       	mov	r9,1
800085ba:	50 d9       	stdsp	sp[0x34],r9
800085bc:	c0 f8       	rjmp	800085da <_dtoa_r+0x2be>
800085be:	30 08       	mov	r8,0
800085c0:	30 14       	mov	r4,1
800085c2:	50 c8       	stdsp	sp[0x30],r8
800085c4:	3f f5       	mov	r5,-1
800085c6:	30 1c       	mov	r12,1
800085c8:	30 0b       	mov	r11,0
800085ca:	50 95       	stdsp	sp[0x24],r5
800085cc:	50 dc       	stdsp	sp[0x34],r12
800085ce:	0a 91       	mov	r1,r5
800085d0:	31 28       	mov	r8,18
800085d2:	50 eb       	stdsp	sp[0x38],r11
800085d4:	c2 08       	rjmp	80008614 <_dtoa_r+0x2f8>
800085d6:	30 0a       	mov	r10,0
800085d8:	50 da       	stdsp	sp[0x34],r10
800085da:	40 e9       	lddsp	r9,sp[0x38]
800085dc:	58 09       	cp.w	r9,0
800085de:	e0 89 00 07 	brgt	800085ec <_dtoa_r+0x2d0>
800085e2:	30 18       	mov	r8,1
800085e4:	50 98       	stdsp	sp[0x24],r8
800085e6:	10 91       	mov	r1,r8
800085e8:	50 e8       	stdsp	sp[0x38],r8
800085ea:	c1 58       	rjmp	80008614 <_dtoa_r+0x2f8>
800085ec:	40 e5       	lddsp	r5,sp[0x38]
800085ee:	50 95       	stdsp	sp[0x24],r5
800085f0:	0a 91       	mov	r1,r5
800085f2:	0a 98       	mov	r8,r5
800085f4:	c1 08       	rjmp	80008614 <_dtoa_r+0x2f8>
800085f6:	30 0c       	mov	r12,0
800085f8:	50 dc       	stdsp	sp[0x34],r12
800085fa:	40 eb       	lddsp	r11,sp[0x38]
800085fc:	ec 0b 00 0b 	add	r11,r6,r11
80008600:	50 9b       	stdsp	sp[0x24],r11
80008602:	16 98       	mov	r8,r11
80008604:	2f f8       	sub	r8,-1
80008606:	58 08       	cp.w	r8,0
80008608:	e0 89 00 05 	brgt	80008612 <_dtoa_r+0x2f6>
8000860c:	10 91       	mov	r1,r8
8000860e:	30 18       	mov	r8,1
80008610:	c0 28       	rjmp	80008614 <_dtoa_r+0x2f8>
80008612:	10 91       	mov	r1,r8
80008614:	30 09       	mov	r9,0
80008616:	6e 9a       	ld.w	r10,r7[0x24]
80008618:	95 19       	st.w	r10[0x4],r9
8000861a:	30 49       	mov	r9,4
8000861c:	c0 68       	rjmp	80008628 <_dtoa_r+0x30c>
8000861e:	d7 03       	nop
80008620:	6a 1a       	ld.w	r10,r5[0x4]
80008622:	a1 79       	lsl	r9,0x1
80008624:	2f fa       	sub	r10,-1
80008626:	8b 1a       	st.w	r5[0x4],r10
80008628:	6e 95       	ld.w	r5,r7[0x24]
8000862a:	f2 ca ff ec 	sub	r10,r9,-20
8000862e:	10 3a       	cp.w	r10,r8
80008630:	fe 98 ff f8 	brls	80008620 <_dtoa_r+0x304>
80008634:	6a 1b       	ld.w	r11,r5[0x4]
80008636:	0e 9c       	mov	r12,r7
80008638:	e0 a0 0d 0c 	rcall	8000a050 <_Balloc>
8000863c:	58 e1       	cp.w	r1,14
8000863e:	5f 88       	srls	r8
80008640:	8b 0c       	st.w	r5[0x0],r12
80008642:	f1 e4 00 04 	and	r4,r8,r4
80008646:	6e 98       	ld.w	r8,r7[0x24]
80008648:	70 08       	ld.w	r8,r8[0x0]
8000864a:	50 88       	stdsp	sp[0x20],r8
8000864c:	e0 80 01 82 	breq	80008950 <_dtoa_r+0x634>
80008650:	58 06       	cp.w	r6,0
80008652:	e0 8a 00 43 	brle	800086d8 <_dtoa_r+0x3bc>
80008656:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8000865a:	fe c8 a6 ea 	sub	r8,pc,-22806
8000865e:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80008662:	fa e5 00 18 	st.d	sp[24],r4
80008666:	ec 04 14 04 	asr	r4,r6,0x4
8000866a:	ed b4 00 04 	bld	r4,0x4
8000866e:	c0 30       	breq	80008674 <_dtoa_r+0x358>
80008670:	30 25       	mov	r5,2
80008672:	c1 08       	rjmp	80008692 <_dtoa_r+0x376>
80008674:	fe c8 a6 3c 	sub	r8,pc,-22980
80008678:	f0 e8 00 20 	ld.d	r8,r8[32]
8000867c:	fa ea 00 3c 	ld.d	r10,sp[60]
80008680:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80008684:	e0 a0 23 8e 	rcall	8000cda0 <__avr32_f64_div>
80008688:	30 35       	mov	r5,3
8000868a:	14 98       	mov	r8,r10
8000868c:	16 99       	mov	r9,r11
8000868e:	fa e9 00 08 	st.d	sp[8],r8
80008692:	fe cc a6 5a 	sub	r12,pc,-22950
80008696:	50 a3       	stdsp	sp[0x28],r3
80008698:	0c 93       	mov	r3,r6
8000869a:	18 96       	mov	r6,r12
8000869c:	c0 f8       	rjmp	800086ba <_dtoa_r+0x39e>
8000869e:	fa ea 00 18 	ld.d	r10,sp[24]
800086a2:	ed b4 00 00 	bld	r4,0x0
800086a6:	c0 81       	brne	800086b6 <_dtoa_r+0x39a>
800086a8:	ec e8 00 00 	ld.d	r8,r6[0]
800086ac:	2f f5       	sub	r5,-1
800086ae:	e0 a0 20 33 	rcall	8000c714 <__avr32_f64_mul>
800086b2:	fa eb 00 18 	st.d	sp[24],r10
800086b6:	a1 54       	asr	r4,0x1
800086b8:	2f 86       	sub	r6,-8
800086ba:	58 04       	cp.w	r4,0
800086bc:	cf 11       	brne	8000869e <_dtoa_r+0x382>
800086be:	fa e8 00 18 	ld.d	r8,sp[24]
800086c2:	fa ea 00 08 	ld.d	r10,sp[8]
800086c6:	06 96       	mov	r6,r3
800086c8:	e0 a0 23 6c 	rcall	8000cda0 <__avr32_f64_div>
800086cc:	40 a3       	lddsp	r3,sp[0x28]
800086ce:	14 98       	mov	r8,r10
800086d0:	16 99       	mov	r9,r11
800086d2:	fa e9 00 08 	st.d	sp[8],r8
800086d6:	c2 f8       	rjmp	80008734 <_dtoa_r+0x418>
800086d8:	ec 08 11 00 	rsub	r8,r6,0
800086dc:	c0 31       	brne	800086e2 <_dtoa_r+0x3c6>
800086de:	30 25       	mov	r5,2
800086e0:	c2 a8       	rjmp	80008734 <_dtoa_r+0x418>
800086e2:	fe cc a6 aa 	sub	r12,pc,-22870
800086e6:	f0 04 14 04 	asr	r4,r8,0x4
800086ea:	50 1c       	stdsp	sp[0x4],r12
800086ec:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800086f0:	fe c9 a7 80 	sub	r9,pc,-22656
800086f4:	fa ea 00 3c 	ld.d	r10,sp[60]
800086f8:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
800086fc:	e0 a0 20 0c 	rcall	8000c714 <__avr32_f64_mul>
80008700:	40 1c       	lddsp	r12,sp[0x4]
80008702:	50 63       	stdsp	sp[0x18],r3
80008704:	30 25       	mov	r5,2
80008706:	0c 93       	mov	r3,r6
80008708:	fa eb 00 08 	st.d	sp[8],r10
8000870c:	18 96       	mov	r6,r12
8000870e:	c0 f8       	rjmp	8000872c <_dtoa_r+0x410>
80008710:	fa ea 00 08 	ld.d	r10,sp[8]
80008714:	ed b4 00 00 	bld	r4,0x0
80008718:	c0 81       	brne	80008728 <_dtoa_r+0x40c>
8000871a:	ec e8 00 00 	ld.d	r8,r6[0]
8000871e:	2f f5       	sub	r5,-1
80008720:	e0 a0 1f fa 	rcall	8000c714 <__avr32_f64_mul>
80008724:	fa eb 00 08 	st.d	sp[8],r10
80008728:	a1 54       	asr	r4,0x1
8000872a:	2f 86       	sub	r6,-8
8000872c:	58 04       	cp.w	r4,0
8000872e:	cf 11       	brne	80008710 <_dtoa_r+0x3f4>
80008730:	06 96       	mov	r6,r3
80008732:	40 63       	lddsp	r3,sp[0x18]
80008734:	41 4a       	lddsp	r10,sp[0x50]
80008736:	58 0a       	cp.w	r10,0
80008738:	c2 a0       	breq	8000878c <_dtoa_r+0x470>
8000873a:	fa e8 00 08 	ld.d	r8,sp[8]
8000873e:	58 01       	cp.w	r1,0
80008740:	5f 94       	srgt	r4
80008742:	fa e9 00 18 	st.d	sp[24],r8
80008746:	30 08       	mov	r8,0
80008748:	fc 19 3f f0 	movh	r9,0x3ff0
8000874c:	fa ea 00 18 	ld.d	r10,sp[24]
80008750:	e0 a0 22 f4 	rcall	8000cd38 <__avr32_f64_cmp_lt>
80008754:	f9 bc 00 00 	moveq	r12,0
80008758:	f9 bc 01 01 	movne	r12,1
8000875c:	e9 ec 00 0c 	and	r12,r4,r12
80008760:	c1 60       	breq	8000878c <_dtoa_r+0x470>
80008762:	40 98       	lddsp	r8,sp[0x24]
80008764:	58 08       	cp.w	r8,0
80008766:	e0 8a 00 f1 	brle	80008948 <_dtoa_r+0x62c>
8000876a:	30 08       	mov	r8,0
8000876c:	fc 19 40 24 	movh	r9,0x4024
80008770:	ec c4 00 01 	sub	r4,r6,1
80008774:	fa ea 00 18 	ld.d	r10,sp[24]
80008778:	2f f5       	sub	r5,-1
8000877a:	50 64       	stdsp	sp[0x18],r4
8000877c:	e0 a0 1f cc 	rcall	8000c714 <__avr32_f64_mul>
80008780:	40 94       	lddsp	r4,sp[0x24]
80008782:	14 98       	mov	r8,r10
80008784:	16 99       	mov	r9,r11
80008786:	fa e9 00 08 	st.d	sp[8],r8
8000878a:	c0 38       	rjmp	80008790 <_dtoa_r+0x474>
8000878c:	50 66       	stdsp	sp[0x18],r6
8000878e:	02 94       	mov	r4,r1
80008790:	0a 9c       	mov	r12,r5
80008792:	e0 a0 22 1c 	rcall	8000cbca <__avr32_s32_to_f64>
80008796:	fa e8 00 08 	ld.d	r8,sp[8]
8000879a:	e0 a0 1f bd 	rcall	8000c714 <__avr32_f64_mul>
8000879e:	30 08       	mov	r8,0
800087a0:	fc 19 40 1c 	movh	r9,0x401c
800087a4:	e0 a0 21 72 	rcall	8000ca88 <__avr32_f64_add>
800087a8:	14 98       	mov	r8,r10
800087aa:	16 99       	mov	r9,r11
800087ac:	fa e9 00 28 	st.d	sp[40],r8
800087b0:	fc 18 fc c0 	movh	r8,0xfcc0
800087b4:	40 a5       	lddsp	r5,sp[0x28]
800087b6:	10 05       	add	r5,r8
800087b8:	50 a5       	stdsp	sp[0x28],r5
800087ba:	58 04       	cp.w	r4,0
800087bc:	c2 11       	brne	800087fe <_dtoa_r+0x4e2>
800087be:	fa ea 00 08 	ld.d	r10,sp[8]
800087c2:	30 08       	mov	r8,0
800087c4:	fc 19 40 14 	movh	r9,0x4014
800087c8:	e0 a0 20 92 	rcall	8000c8ec <__avr32_f64_sub>
800087cc:	40 bc       	lddsp	r12,sp[0x2c]
800087ce:	fa eb 00 08 	st.d	sp[8],r10
800087d2:	14 98       	mov	r8,r10
800087d4:	16 99       	mov	r9,r11
800087d6:	18 9a       	mov	r10,r12
800087d8:	0a 9b       	mov	r11,r5
800087da:	e0 a0 22 af 	rcall	8000cd38 <__avr32_f64_cmp_lt>
800087de:	e0 81 02 54 	brne	80008c86 <_dtoa_r+0x96a>
800087e2:	0a 98       	mov	r8,r5
800087e4:	40 b9       	lddsp	r9,sp[0x2c]
800087e6:	ee 18 80 00 	eorh	r8,0x8000
800087ea:	fa ea 00 08 	ld.d	r10,sp[8]
800087ee:	10 95       	mov	r5,r8
800087f0:	12 98       	mov	r8,r9
800087f2:	0a 99       	mov	r9,r5
800087f4:	e0 a0 22 a2 	rcall	8000cd38 <__avr32_f64_cmp_lt>
800087f8:	e0 81 02 3e 	brne	80008c74 <_dtoa_r+0x958>
800087fc:	ca 68       	rjmp	80008948 <_dtoa_r+0x62c>
800087fe:	fe c9 a8 8e 	sub	r9,pc,-22386
80008802:	e8 c8 00 01 	sub	r8,r4,1
80008806:	40 d5       	lddsp	r5,sp[0x34]
80008808:	58 05       	cp.w	r5,0
8000880a:	c4 f0       	breq	800088a8 <_dtoa_r+0x58c>
8000880c:	30 0c       	mov	r12,0
8000880e:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80008812:	51 3c       	stdsp	sp[0x4c],r12
80008814:	30 0a       	mov	r10,0
80008816:	fc 1b 3f e0 	movh	r11,0x3fe0
8000881a:	e0 a0 22 c3 	rcall	8000cda0 <__avr32_f64_div>
8000881e:	fa e8 00 28 	ld.d	r8,sp[40]
80008822:	40 85       	lddsp	r5,sp[0x20]
80008824:	e0 a0 20 64 	rcall	8000c8ec <__avr32_f64_sub>
80008828:	fa eb 00 28 	st.d	sp[40],r10
8000882c:	fa ea 00 08 	ld.d	r10,sp[8]
80008830:	e0 a0 21 b6 	rcall	8000cb9c <__avr32_f64_to_s32>
80008834:	51 6c       	stdsp	sp[0x58],r12
80008836:	e0 a0 21 ca 	rcall	8000cbca <__avr32_s32_to_f64>
8000883a:	14 98       	mov	r8,r10
8000883c:	16 99       	mov	r9,r11
8000883e:	fa ea 00 08 	ld.d	r10,sp[8]
80008842:	e0 a0 20 55 	rcall	8000c8ec <__avr32_f64_sub>
80008846:	fa eb 00 08 	st.d	sp[8],r10
8000884a:	41 68       	lddsp	r8,sp[0x58]
8000884c:	2d 08       	sub	r8,-48
8000884e:	0a c8       	st.b	r5++,r8
80008850:	41 39       	lddsp	r9,sp[0x4c]
80008852:	2f f9       	sub	r9,-1
80008854:	51 39       	stdsp	sp[0x4c],r9
80008856:	fa e8 00 28 	ld.d	r8,sp[40]
8000885a:	e0 a0 22 6f 	rcall	8000cd38 <__avr32_f64_cmp_lt>
8000885e:	e0 81 03 39 	brne	80008ed0 <_dtoa_r+0xbb4>
80008862:	fa e8 00 08 	ld.d	r8,sp[8]
80008866:	30 0a       	mov	r10,0
80008868:	fc 1b 3f f0 	movh	r11,0x3ff0
8000886c:	e0 a0 20 40 	rcall	8000c8ec <__avr32_f64_sub>
80008870:	fa e8 00 28 	ld.d	r8,sp[40]
80008874:	e0 a0 22 62 	rcall	8000cd38 <__avr32_f64_cmp_lt>
80008878:	fa ea 00 28 	ld.d	r10,sp[40]
8000887c:	30 08       	mov	r8,0
8000887e:	fc 19 40 24 	movh	r9,0x4024
80008882:	e0 81 00 da 	brne	80008a36 <_dtoa_r+0x71a>
80008886:	41 3c       	lddsp	r12,sp[0x4c]
80008888:	08 3c       	cp.w	r12,r4
8000888a:	c5 f4       	brge	80008948 <_dtoa_r+0x62c>
8000888c:	e0 a0 1f 44 	rcall	8000c714 <__avr32_f64_mul>
80008890:	30 08       	mov	r8,0
80008892:	fa eb 00 28 	st.d	sp[40],r10
80008896:	fc 19 40 24 	movh	r9,0x4024
8000889a:	fa ea 00 08 	ld.d	r10,sp[8]
8000889e:	e0 a0 1f 3b 	rcall	8000c714 <__avr32_f64_mul>
800088a2:	fa eb 00 08 	st.d	sp[8],r10
800088a6:	cc 3b       	rjmp	8000882c <_dtoa_r+0x510>
800088a8:	40 85       	lddsp	r5,sp[0x20]
800088aa:	08 05       	add	r5,r4
800088ac:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
800088b0:	51 35       	stdsp	sp[0x4c],r5
800088b2:	fa e8 00 28 	ld.d	r8,sp[40]
800088b6:	40 85       	lddsp	r5,sp[0x20]
800088b8:	e0 a0 1f 2e 	rcall	8000c714 <__avr32_f64_mul>
800088bc:	fa eb 00 28 	st.d	sp[40],r10
800088c0:	fa ea 00 08 	ld.d	r10,sp[8]
800088c4:	e0 a0 21 6c 	rcall	8000cb9c <__avr32_f64_to_s32>
800088c8:	51 6c       	stdsp	sp[0x58],r12
800088ca:	e0 a0 21 80 	rcall	8000cbca <__avr32_s32_to_f64>
800088ce:	14 98       	mov	r8,r10
800088d0:	16 99       	mov	r9,r11
800088d2:	fa ea 00 08 	ld.d	r10,sp[8]
800088d6:	e0 a0 20 0b 	rcall	8000c8ec <__avr32_f64_sub>
800088da:	fa eb 00 08 	st.d	sp[8],r10
800088de:	41 68       	lddsp	r8,sp[0x58]
800088e0:	2d 08       	sub	r8,-48
800088e2:	0a c8       	st.b	r5++,r8
800088e4:	41 3c       	lddsp	r12,sp[0x4c]
800088e6:	18 35       	cp.w	r5,r12
800088e8:	c2 81       	brne	80008938 <_dtoa_r+0x61c>
800088ea:	30 08       	mov	r8,0
800088ec:	fc 19 3f e0 	movh	r9,0x3fe0
800088f0:	fa ea 00 28 	ld.d	r10,sp[40]
800088f4:	e0 a0 20 ca 	rcall	8000ca88 <__avr32_f64_add>
800088f8:	40 85       	lddsp	r5,sp[0x20]
800088fa:	fa e8 00 08 	ld.d	r8,sp[8]
800088fe:	08 05       	add	r5,r4
80008900:	e0 a0 22 1c 	rcall	8000cd38 <__avr32_f64_cmp_lt>
80008904:	e0 81 00 99 	brne	80008a36 <_dtoa_r+0x71a>
80008908:	fa e8 00 28 	ld.d	r8,sp[40]
8000890c:	30 0a       	mov	r10,0
8000890e:	fc 1b 3f e0 	movh	r11,0x3fe0
80008912:	e0 a0 1f ed 	rcall	8000c8ec <__avr32_f64_sub>
80008916:	14 98       	mov	r8,r10
80008918:	16 99       	mov	r9,r11
8000891a:	fa ea 00 08 	ld.d	r10,sp[8]
8000891e:	e0 a0 22 0d 	rcall	8000cd38 <__avr32_f64_cmp_lt>
80008922:	c1 30       	breq	80008948 <_dtoa_r+0x62c>
80008924:	33 09       	mov	r9,48
80008926:	0a 98       	mov	r8,r5
80008928:	11 7a       	ld.ub	r10,--r8
8000892a:	f2 0a 18 00 	cp.b	r10,r9
8000892e:	e0 81 02 d1 	brne	80008ed0 <_dtoa_r+0xbb4>
80008932:	10 95       	mov	r5,r8
80008934:	cf 9b       	rjmp	80008926 <_dtoa_r+0x60a>
80008936:	d7 03       	nop
80008938:	30 08       	mov	r8,0
8000893a:	fc 19 40 24 	movh	r9,0x4024
8000893e:	e0 a0 1e eb 	rcall	8000c714 <__avr32_f64_mul>
80008942:	fa eb 00 08 	st.d	sp[8],r10
80008946:	cb db       	rjmp	800088c0 <_dtoa_r+0x5a4>
80008948:	fa ea 00 3c 	ld.d	r10,sp[60]
8000894c:	fa eb 00 08 	st.d	sp[8],r10
80008950:	58 e6       	cp.w	r6,14
80008952:	5f ab       	srle	r11
80008954:	41 8a       	lddsp	r10,sp[0x60]
80008956:	30 08       	mov	r8,0
80008958:	f4 09 11 ff 	rsub	r9,r10,-1
8000895c:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80008960:	f0 09 18 00 	cp.b	r9,r8
80008964:	e0 80 00 82 	breq	80008a68 <_dtoa_r+0x74c>
80008968:	40 ea       	lddsp	r10,sp[0x38]
8000896a:	58 01       	cp.w	r1,0
8000896c:	5f a9       	srle	r9
8000896e:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80008972:	fe ca aa 02 	sub	r10,pc,-22014
80008976:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8000897a:	fa e5 00 10 	st.d	sp[16],r4
8000897e:	f0 09 18 00 	cp.b	r9,r8
80008982:	c1 40       	breq	800089aa <_dtoa_r+0x68e>
80008984:	58 01       	cp.w	r1,0
80008986:	e0 81 01 77 	brne	80008c74 <_dtoa_r+0x958>
8000898a:	30 08       	mov	r8,0
8000898c:	fc 19 40 14 	movh	r9,0x4014
80008990:	08 9a       	mov	r10,r4
80008992:	0a 9b       	mov	r11,r5
80008994:	e0 a0 1e c0 	rcall	8000c714 <__avr32_f64_mul>
80008998:	fa e8 00 08 	ld.d	r8,sp[8]
8000899c:	e0 a0 21 9a 	rcall	8000ccd0 <__avr32_f64_cmp_ge>
800089a0:	e0 81 01 6a 	brne	80008c74 <_dtoa_r+0x958>
800089a4:	02 92       	mov	r2,r1
800089a6:	e0 8f 01 72 	bral	80008c8a <_dtoa_r+0x96e>
800089aa:	40 85       	lddsp	r5,sp[0x20]
800089ac:	30 14       	mov	r4,1
800089ae:	fa e8 00 10 	ld.d	r8,sp[16]
800089b2:	fa ea 00 08 	ld.d	r10,sp[8]
800089b6:	e0 a0 21 f5 	rcall	8000cda0 <__avr32_f64_div>
800089ba:	e0 a0 20 f1 	rcall	8000cb9c <__avr32_f64_to_s32>
800089be:	18 92       	mov	r2,r12
800089c0:	e0 a0 21 05 	rcall	8000cbca <__avr32_s32_to_f64>
800089c4:	fa e8 00 10 	ld.d	r8,sp[16]
800089c8:	e0 a0 1e a6 	rcall	8000c714 <__avr32_f64_mul>
800089cc:	14 98       	mov	r8,r10
800089ce:	16 99       	mov	r9,r11
800089d0:	fa ea 00 08 	ld.d	r10,sp[8]
800089d4:	e0 a0 1f 8c 	rcall	8000c8ec <__avr32_f64_sub>
800089d8:	fa eb 00 08 	st.d	sp[8],r10
800089dc:	e4 c8 ff d0 	sub	r8,r2,-48
800089e0:	0a c8       	st.b	r5++,r8
800089e2:	fc 19 40 24 	movh	r9,0x4024
800089e6:	30 08       	mov	r8,0
800089e8:	02 34       	cp.w	r4,r1
800089ea:	c3 31       	brne	80008a50 <_dtoa_r+0x734>
800089ec:	fa e8 00 08 	ld.d	r8,sp[8]
800089f0:	e0 a0 20 4c 	rcall	8000ca88 <__avr32_f64_add>
800089f4:	16 91       	mov	r1,r11
800089f6:	14 90       	mov	r0,r10
800089f8:	14 98       	mov	r8,r10
800089fa:	02 99       	mov	r9,r1
800089fc:	fa ea 00 10 	ld.d	r10,sp[16]
80008a00:	e0 a0 21 9c 	rcall	8000cd38 <__avr32_f64_cmp_lt>
80008a04:	c1 a1       	brne	80008a38 <_dtoa_r+0x71c>
80008a06:	fa e8 00 10 	ld.d	r8,sp[16]
80008a0a:	00 9a       	mov	r10,r0
80008a0c:	02 9b       	mov	r11,r1
80008a0e:	e0 a0 21 4e 	rcall	8000ccaa <__avr32_f64_cmp_eq>
80008a12:	e0 80 02 5e 	breq	80008ece <_dtoa_r+0xbb2>
80008a16:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80008a1a:	c0 f1       	brne	80008a38 <_dtoa_r+0x71c>
80008a1c:	e0 8f 02 59 	bral	80008ece <_dtoa_r+0xbb2>
80008a20:	40 8a       	lddsp	r10,sp[0x20]
80008a22:	14 38       	cp.w	r8,r10
80008a24:	c0 30       	breq	80008a2a <_dtoa_r+0x70e>
80008a26:	10 95       	mov	r5,r8
80008a28:	c0 98       	rjmp	80008a3a <_dtoa_r+0x71e>
80008a2a:	33 08       	mov	r8,48
80008a2c:	40 89       	lddsp	r9,sp[0x20]
80008a2e:	2f f6       	sub	r6,-1
80008a30:	b2 88       	st.b	r9[0x0],r8
80008a32:	40 88       	lddsp	r8,sp[0x20]
80008a34:	c0 88       	rjmp	80008a44 <_dtoa_r+0x728>
80008a36:	40 66       	lddsp	r6,sp[0x18]
80008a38:	33 99       	mov	r9,57
80008a3a:	0a 98       	mov	r8,r5
80008a3c:	11 7a       	ld.ub	r10,--r8
80008a3e:	f2 0a 18 00 	cp.b	r10,r9
80008a42:	ce f0       	breq	80008a20 <_dtoa_r+0x704>
80008a44:	50 66       	stdsp	sp[0x18],r6
80008a46:	11 89       	ld.ub	r9,r8[0x0]
80008a48:	2f f9       	sub	r9,-1
80008a4a:	b0 89       	st.b	r8[0x0],r9
80008a4c:	e0 8f 02 42 	bral	80008ed0 <_dtoa_r+0xbb4>
80008a50:	e0 a0 1e 62 	rcall	8000c714 <__avr32_f64_mul>
80008a54:	2f f4       	sub	r4,-1
80008a56:	fa eb 00 08 	st.d	sp[8],r10
80008a5a:	30 08       	mov	r8,0
80008a5c:	30 09       	mov	r9,0
80008a5e:	e0 a0 21 26 	rcall	8000ccaa <__avr32_f64_cmp_eq>
80008a62:	ca 60       	breq	800089ae <_dtoa_r+0x692>
80008a64:	e0 8f 02 35 	bral	80008ece <_dtoa_r+0xbb2>
80008a68:	40 d8       	lddsp	r8,sp[0x34]
80008a6a:	58 08       	cp.w	r8,0
80008a6c:	c0 51       	brne	80008a76 <_dtoa_r+0x75a>
80008a6e:	04 98       	mov	r8,r2
80008a70:	00 95       	mov	r5,r0
80008a72:	40 d4       	lddsp	r4,sp[0x34]
80008a74:	c3 78       	rjmp	80008ae2 <_dtoa_r+0x7c6>
80008a76:	40 c5       	lddsp	r5,sp[0x30]
80008a78:	58 15       	cp.w	r5,1
80008a7a:	e0 89 00 0f 	brgt	80008a98 <_dtoa_r+0x77c>
80008a7e:	41 74       	lddsp	r4,sp[0x5c]
80008a80:	58 04       	cp.w	r4,0
80008a82:	c0 40       	breq	80008a8a <_dtoa_r+0x76e>
80008a84:	f4 c9 fb cd 	sub	r9,r10,-1075
80008a88:	c0 48       	rjmp	80008a90 <_dtoa_r+0x774>
80008a8a:	41 99       	lddsp	r9,sp[0x64]
80008a8c:	f2 09 11 36 	rsub	r9,r9,54
80008a90:	04 98       	mov	r8,r2
80008a92:	00 95       	mov	r5,r0
80008a94:	c1 c8       	rjmp	80008acc <_dtoa_r+0x7b0>
80008a96:	d7 03       	nop
80008a98:	e2 c8 00 01 	sub	r8,r1,1
80008a9c:	58 01       	cp.w	r1,0
80008a9e:	e0 05 17 40 	movge	r5,r0
80008aa2:	e2 09 17 40 	movge	r9,r1
80008aa6:	e1 d1 e5 15 	sublt	r5,r0,r1
80008aaa:	f9 b9 05 00 	movlt	r9,0
80008aae:	10 32       	cp.w	r2,r8
80008ab0:	e5 d8 e4 18 	subge	r8,r2,r8
80008ab4:	f1 d2 e5 18 	sublt	r8,r8,r2
80008ab8:	e5 d8 e5 02 	addlt	r2,r2,r8
80008abc:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
80008ac0:	f9 d8 e5 0c 	addlt	r12,r12,r8
80008ac4:	fb fc 5a 11 	st.wlt	sp[0x44],r12
80008ac8:	f9 b8 05 00 	movlt	r8,0
80008acc:	40 4b       	lddsp	r11,sp[0x10]
80008ace:	12 0b       	add	r11,r9
80008ad0:	50 08       	stdsp	sp[0x0],r8
80008ad2:	50 4b       	stdsp	sp[0x10],r11
80008ad4:	12 00       	add	r0,r9
80008ad6:	30 1b       	mov	r11,1
80008ad8:	0e 9c       	mov	r12,r7
80008ada:	e0 a0 0c 71 	rcall	8000a3bc <__i2b>
80008ade:	40 08       	lddsp	r8,sp[0x0]
80008ae0:	18 94       	mov	r4,r12
80008ae2:	40 4a       	lddsp	r10,sp[0x10]
80008ae4:	58 05       	cp.w	r5,0
80008ae6:	5f 99       	srgt	r9
80008ae8:	58 0a       	cp.w	r10,0
80008aea:	5f 9a       	srgt	r10
80008aec:	f5 e9 00 09 	and	r9,r10,r9
80008af0:	c0 80       	breq	80008b00 <_dtoa_r+0x7e4>
80008af2:	40 4c       	lddsp	r12,sp[0x10]
80008af4:	f8 05 0d 49 	min	r9,r12,r5
80008af8:	12 1c       	sub	r12,r9
80008afa:	12 10       	sub	r0,r9
80008afc:	50 4c       	stdsp	sp[0x10],r12
80008afe:	12 15       	sub	r5,r9
80008b00:	58 02       	cp.w	r2,0
80008b02:	e0 8a 00 27 	brle	80008b50 <_dtoa_r+0x834>
80008b06:	40 db       	lddsp	r11,sp[0x34]
80008b08:	58 0b       	cp.w	r11,0
80008b0a:	c1 d0       	breq	80008b44 <_dtoa_r+0x828>
80008b0c:	58 08       	cp.w	r8,0
80008b0e:	e0 8a 00 17 	brle	80008b3c <_dtoa_r+0x820>
80008b12:	10 9a       	mov	r10,r8
80008b14:	50 08       	stdsp	sp[0x0],r8
80008b16:	08 9b       	mov	r11,r4
80008b18:	0e 9c       	mov	r12,r7
80008b1a:	e0 a0 0c 97 	rcall	8000a448 <__pow5mult>
80008b1e:	06 9a       	mov	r10,r3
80008b20:	18 9b       	mov	r11,r12
80008b22:	18 94       	mov	r4,r12
80008b24:	0e 9c       	mov	r12,r7
80008b26:	e0 a0 0b cb 	rcall	8000a2bc <__multiply>
80008b2a:	18 99       	mov	r9,r12
80008b2c:	06 9b       	mov	r11,r3
80008b2e:	50 19       	stdsp	sp[0x4],r9
80008b30:	0e 9c       	mov	r12,r7
80008b32:	e0 a0 0a 75 	rcall	8000a01c <_Bfree>
80008b36:	40 19       	lddsp	r9,sp[0x4]
80008b38:	40 08       	lddsp	r8,sp[0x0]
80008b3a:	12 93       	mov	r3,r9
80008b3c:	e4 08 01 0a 	sub	r10,r2,r8
80008b40:	c0 80       	breq	80008b50 <_dtoa_r+0x834>
80008b42:	c0 28       	rjmp	80008b46 <_dtoa_r+0x82a>
80008b44:	04 9a       	mov	r10,r2
80008b46:	06 9b       	mov	r11,r3
80008b48:	0e 9c       	mov	r12,r7
80008b4a:	e0 a0 0c 7f 	rcall	8000a448 <__pow5mult>
80008b4e:	18 93       	mov	r3,r12
80008b50:	30 1b       	mov	r11,1
80008b52:	0e 9c       	mov	r12,r7
80008b54:	e0 a0 0c 34 	rcall	8000a3bc <__i2b>
80008b58:	41 1a       	lddsp	r10,sp[0x44]
80008b5a:	18 92       	mov	r2,r12
80008b5c:	58 0a       	cp.w	r10,0
80008b5e:	e0 8a 00 07 	brle	80008b6c <_dtoa_r+0x850>
80008b62:	18 9b       	mov	r11,r12
80008b64:	0e 9c       	mov	r12,r7
80008b66:	e0 a0 0c 71 	rcall	8000a448 <__pow5mult>
80008b6a:	18 92       	mov	r2,r12
80008b6c:	40 c9       	lddsp	r9,sp[0x30]
80008b6e:	58 19       	cp.w	r9,1
80008b70:	e0 89 00 14 	brgt	80008b98 <_dtoa_r+0x87c>
80008b74:	40 38       	lddsp	r8,sp[0xc]
80008b76:	58 08       	cp.w	r8,0
80008b78:	c1 01       	brne	80008b98 <_dtoa_r+0x87c>
80008b7a:	40 29       	lddsp	r9,sp[0x8]
80008b7c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80008b80:	c0 c1       	brne	80008b98 <_dtoa_r+0x87c>
80008b82:	12 98       	mov	r8,r9
80008b84:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008b88:	c0 80       	breq	80008b98 <_dtoa_r+0x87c>
80008b8a:	40 4c       	lddsp	r12,sp[0x10]
80008b8c:	30 1b       	mov	r11,1
80008b8e:	2f fc       	sub	r12,-1
80008b90:	2f f0       	sub	r0,-1
80008b92:	50 4c       	stdsp	sp[0x10],r12
80008b94:	50 6b       	stdsp	sp[0x18],r11
80008b96:	c0 38       	rjmp	80008b9c <_dtoa_r+0x880>
80008b98:	30 0a       	mov	r10,0
80008b9a:	50 6a       	stdsp	sp[0x18],r10
80008b9c:	41 19       	lddsp	r9,sp[0x44]
80008b9e:	58 09       	cp.w	r9,0
80008ba0:	c0 31       	brne	80008ba6 <_dtoa_r+0x88a>
80008ba2:	30 1c       	mov	r12,1
80008ba4:	c0 98       	rjmp	80008bb6 <_dtoa_r+0x89a>
80008ba6:	64 48       	ld.w	r8,r2[0x10]
80008ba8:	2f c8       	sub	r8,-4
80008baa:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
80008bae:	e0 a0 08 d1 	rcall	80009d50 <__hi0bits>
80008bb2:	f8 0c 11 20 	rsub	r12,r12,32
80008bb6:	40 4b       	lddsp	r11,sp[0x10]
80008bb8:	f8 0b 00 08 	add	r8,r12,r11
80008bbc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008bc0:	c0 c0       	breq	80008bd8 <_dtoa_r+0x8bc>
80008bc2:	f0 08 11 20 	rsub	r8,r8,32
80008bc6:	58 48       	cp.w	r8,4
80008bc8:	e0 8a 00 06 	brle	80008bd4 <_dtoa_r+0x8b8>
80008bcc:	20 48       	sub	r8,4
80008bce:	10 0b       	add	r11,r8
80008bd0:	50 4b       	stdsp	sp[0x10],r11
80008bd2:	c0 78       	rjmp	80008be0 <_dtoa_r+0x8c4>
80008bd4:	58 48       	cp.w	r8,4
80008bd6:	c0 70       	breq	80008be4 <_dtoa_r+0x8c8>
80008bd8:	40 4a       	lddsp	r10,sp[0x10]
80008bda:	2e 48       	sub	r8,-28
80008bdc:	10 0a       	add	r10,r8
80008bde:	50 4a       	stdsp	sp[0x10],r10
80008be0:	10 00       	add	r0,r8
80008be2:	10 05       	add	r5,r8
80008be4:	58 00       	cp.w	r0,0
80008be6:	e0 8a 00 08 	brle	80008bf6 <_dtoa_r+0x8da>
80008bea:	06 9b       	mov	r11,r3
80008bec:	00 9a       	mov	r10,r0
80008bee:	0e 9c       	mov	r12,r7
80008bf0:	e0 a0 0b 22 	rcall	8000a234 <__lshift>
80008bf4:	18 93       	mov	r3,r12
80008bf6:	40 49       	lddsp	r9,sp[0x10]
80008bf8:	58 09       	cp.w	r9,0
80008bfa:	e0 8a 00 08 	brle	80008c0a <_dtoa_r+0x8ee>
80008bfe:	04 9b       	mov	r11,r2
80008c00:	12 9a       	mov	r10,r9
80008c02:	0e 9c       	mov	r12,r7
80008c04:	e0 a0 0b 18 	rcall	8000a234 <__lshift>
80008c08:	18 92       	mov	r2,r12
80008c0a:	41 48       	lddsp	r8,sp[0x50]
80008c0c:	58 08       	cp.w	r8,0
80008c0e:	c1 b0       	breq	80008c44 <_dtoa_r+0x928>
80008c10:	04 9b       	mov	r11,r2
80008c12:	06 9c       	mov	r12,r3
80008c14:	e0 a0 09 15 	rcall	80009e3e <__mcmp>
80008c18:	c1 64       	brge	80008c44 <_dtoa_r+0x928>
80008c1a:	06 9b       	mov	r11,r3
80008c1c:	30 09       	mov	r9,0
80008c1e:	30 aa       	mov	r10,10
80008c20:	0e 9c       	mov	r12,r7
80008c22:	e0 a0 0b d5 	rcall	8000a3cc <__multadd>
80008c26:	20 16       	sub	r6,1
80008c28:	18 93       	mov	r3,r12
80008c2a:	40 dc       	lddsp	r12,sp[0x34]
80008c2c:	58 0c       	cp.w	r12,0
80008c2e:	c0 31       	brne	80008c34 <_dtoa_r+0x918>
80008c30:	40 91       	lddsp	r1,sp[0x24]
80008c32:	c0 98       	rjmp	80008c44 <_dtoa_r+0x928>
80008c34:	08 9b       	mov	r11,r4
80008c36:	40 91       	lddsp	r1,sp[0x24]
80008c38:	30 09       	mov	r9,0
80008c3a:	30 aa       	mov	r10,10
80008c3c:	0e 9c       	mov	r12,r7
80008c3e:	e0 a0 0b c7 	rcall	8000a3cc <__multadd>
80008c42:	18 94       	mov	r4,r12
80008c44:	58 01       	cp.w	r1,0
80008c46:	5f a9       	srle	r9
80008c48:	40 cb       	lddsp	r11,sp[0x30]
80008c4a:	58 2b       	cp.w	r11,2
80008c4c:	5f 98       	srgt	r8
80008c4e:	f3 e8 00 08 	and	r8,r9,r8
80008c52:	c2 50       	breq	80008c9c <_dtoa_r+0x980>
80008c54:	58 01       	cp.w	r1,0
80008c56:	c1 11       	brne	80008c78 <_dtoa_r+0x95c>
80008c58:	04 9b       	mov	r11,r2
80008c5a:	02 99       	mov	r9,r1
80008c5c:	30 5a       	mov	r10,5
80008c5e:	0e 9c       	mov	r12,r7
80008c60:	e0 a0 0b b6 	rcall	8000a3cc <__multadd>
80008c64:	18 92       	mov	r2,r12
80008c66:	18 9b       	mov	r11,r12
80008c68:	06 9c       	mov	r12,r3
80008c6a:	e0 a0 08 ea 	rcall	80009e3e <__mcmp>
80008c6e:	e0 89 00 0f 	brgt	80008c8c <_dtoa_r+0x970>
80008c72:	c0 38       	rjmp	80008c78 <_dtoa_r+0x95c>
80008c74:	30 02       	mov	r2,0
80008c76:	04 94       	mov	r4,r2
80008c78:	40 ea       	lddsp	r10,sp[0x38]
80008c7a:	30 09       	mov	r9,0
80008c7c:	5c da       	com	r10
80008c7e:	40 85       	lddsp	r5,sp[0x20]
80008c80:	50 6a       	stdsp	sp[0x18],r10
80008c82:	50 49       	stdsp	sp[0x10],r9
80008c84:	c0 f9       	rjmp	80008ea2 <_dtoa_r+0xb86>
80008c86:	08 92       	mov	r2,r4
80008c88:	40 66       	lddsp	r6,sp[0x18]
80008c8a:	04 94       	mov	r4,r2
80008c8c:	2f f6       	sub	r6,-1
80008c8e:	50 66       	stdsp	sp[0x18],r6
80008c90:	33 18       	mov	r8,49
80008c92:	40 85       	lddsp	r5,sp[0x20]
80008c94:	0a c8       	st.b	r5++,r8
80008c96:	30 08       	mov	r8,0
80008c98:	50 48       	stdsp	sp[0x10],r8
80008c9a:	c0 49       	rjmp	80008ea2 <_dtoa_r+0xb86>
80008c9c:	40 dc       	lddsp	r12,sp[0x34]
80008c9e:	58 0c       	cp.w	r12,0
80008ca0:	e0 80 00 b5 	breq	80008e0a <_dtoa_r+0xaee>
80008ca4:	58 05       	cp.w	r5,0
80008ca6:	e0 8a 00 08 	brle	80008cb6 <_dtoa_r+0x99a>
80008caa:	08 9b       	mov	r11,r4
80008cac:	0a 9a       	mov	r10,r5
80008cae:	0e 9c       	mov	r12,r7
80008cb0:	e0 a0 0a c2 	rcall	8000a234 <__lshift>
80008cb4:	18 94       	mov	r4,r12
80008cb6:	40 6b       	lddsp	r11,sp[0x18]
80008cb8:	58 0b       	cp.w	r11,0
80008cba:	c0 31       	brne	80008cc0 <_dtoa_r+0x9a4>
80008cbc:	08 9c       	mov	r12,r4
80008cbe:	c1 38       	rjmp	80008ce4 <_dtoa_r+0x9c8>
80008cc0:	68 1b       	ld.w	r11,r4[0x4]
80008cc2:	0e 9c       	mov	r12,r7
80008cc4:	e0 a0 09 c6 	rcall	8000a050 <_Balloc>
80008cc8:	68 4a       	ld.w	r10,r4[0x10]
80008cca:	18 95       	mov	r5,r12
80008ccc:	e8 cb ff f4 	sub	r11,r4,-12
80008cd0:	2f ea       	sub	r10,-2
80008cd2:	2f 4c       	sub	r12,-12
80008cd4:	a3 6a       	lsl	r10,0x2
80008cd6:	fe b0 dd 0b 	rcall	800046ec <memcpy>
80008cda:	0a 9b       	mov	r11,r5
80008cdc:	30 1a       	mov	r10,1
80008cde:	0e 9c       	mov	r12,r7
80008ce0:	e0 a0 0a aa 	rcall	8000a234 <__lshift>
80008ce4:	50 44       	stdsp	sp[0x10],r4
80008ce6:	40 3a       	lddsp	r10,sp[0xc]
80008ce8:	30 19       	mov	r9,1
80008cea:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80008cee:	18 94       	mov	r4,r12
80008cf0:	50 da       	stdsp	sp[0x34],r10
80008cf2:	40 85       	lddsp	r5,sp[0x20]
80008cf4:	50 99       	stdsp	sp[0x24],r9
80008cf6:	50 26       	stdsp	sp[0x8],r6
80008cf8:	50 e1       	stdsp	sp[0x38],r1
80008cfa:	04 9b       	mov	r11,r2
80008cfc:	06 9c       	mov	r12,r3
80008cfe:	fe b0 fa 7f 	rcall	800081fc <quorem>
80008d02:	40 4b       	lddsp	r11,sp[0x10]
80008d04:	f8 c0 ff d0 	sub	r0,r12,-48
80008d08:	06 9c       	mov	r12,r3
80008d0a:	e0 a0 08 9a 	rcall	80009e3e <__mcmp>
80008d0e:	08 9a       	mov	r10,r4
80008d10:	50 6c       	stdsp	sp[0x18],r12
80008d12:	04 9b       	mov	r11,r2
80008d14:	0e 9c       	mov	r12,r7
80008d16:	e0 a0 0a 27 	rcall	8000a164 <__mdiff>
80008d1a:	18 91       	mov	r1,r12
80008d1c:	78 38       	ld.w	r8,r12[0xc]
80008d1e:	58 08       	cp.w	r8,0
80008d20:	c0 30       	breq	80008d26 <_dtoa_r+0xa0a>
80008d22:	30 16       	mov	r6,1
80008d24:	c0 68       	rjmp	80008d30 <_dtoa_r+0xa14>
80008d26:	18 9b       	mov	r11,r12
80008d28:	06 9c       	mov	r12,r3
80008d2a:	e0 a0 08 8a 	rcall	80009e3e <__mcmp>
80008d2e:	18 96       	mov	r6,r12
80008d30:	0e 9c       	mov	r12,r7
80008d32:	02 9b       	mov	r11,r1
80008d34:	e0 a0 09 74 	rcall	8000a01c <_Bfree>
80008d38:	40 cc       	lddsp	r12,sp[0x30]
80008d3a:	ed ec 10 08 	or	r8,r6,r12
80008d3e:	c0 d1       	brne	80008d58 <_dtoa_r+0xa3c>
80008d40:	40 db       	lddsp	r11,sp[0x34]
80008d42:	58 0b       	cp.w	r11,0
80008d44:	c0 a1       	brne	80008d58 <_dtoa_r+0xa3c>
80008d46:	40 26       	lddsp	r6,sp[0x8]
80008d48:	e0 40 00 39 	cp.w	r0,57
80008d4c:	c3 00       	breq	80008dac <_dtoa_r+0xa90>
80008d4e:	40 6a       	lddsp	r10,sp[0x18]
80008d50:	58 0a       	cp.w	r10,0
80008d52:	e0 89 00 24 	brgt	80008d9a <_dtoa_r+0xa7e>
80008d56:	c2 f8       	rjmp	80008db4 <_dtoa_r+0xa98>
80008d58:	40 69       	lddsp	r9,sp[0x18]
80008d5a:	58 09       	cp.w	r9,0
80008d5c:	c0 85       	brlt	80008d6c <_dtoa_r+0xa50>
80008d5e:	12 98       	mov	r8,r9
80008d60:	40 cc       	lddsp	r12,sp[0x30]
80008d62:	18 48       	or	r8,r12
80008d64:	c1 d1       	brne	80008d9e <_dtoa_r+0xa82>
80008d66:	40 db       	lddsp	r11,sp[0x34]
80008d68:	58 0b       	cp.w	r11,0
80008d6a:	c1 a1       	brne	80008d9e <_dtoa_r+0xa82>
80008d6c:	0c 99       	mov	r9,r6
80008d6e:	40 26       	lddsp	r6,sp[0x8]
80008d70:	58 09       	cp.w	r9,0
80008d72:	e0 8a 00 21 	brle	80008db4 <_dtoa_r+0xa98>
80008d76:	06 9b       	mov	r11,r3
80008d78:	30 1a       	mov	r10,1
80008d7a:	0e 9c       	mov	r12,r7
80008d7c:	e0 a0 0a 5c 	rcall	8000a234 <__lshift>
80008d80:	04 9b       	mov	r11,r2
80008d82:	18 93       	mov	r3,r12
80008d84:	e0 a0 08 5d 	rcall	80009e3e <__mcmp>
80008d88:	e0 89 00 06 	brgt	80008d94 <_dtoa_r+0xa78>
80008d8c:	c1 41       	brne	80008db4 <_dtoa_r+0xa98>
80008d8e:	ed b0 00 00 	bld	r0,0x0
80008d92:	c1 11       	brne	80008db4 <_dtoa_r+0xa98>
80008d94:	e0 40 00 39 	cp.w	r0,57
80008d98:	c0 a0       	breq	80008dac <_dtoa_r+0xa90>
80008d9a:	2f f0       	sub	r0,-1
80008d9c:	c0 c8       	rjmp	80008db4 <_dtoa_r+0xa98>
80008d9e:	58 06       	cp.w	r6,0
80008da0:	e0 8a 00 0c 	brle	80008db8 <_dtoa_r+0xa9c>
80008da4:	40 26       	lddsp	r6,sp[0x8]
80008da6:	e0 40 00 39 	cp.w	r0,57
80008daa:	c0 41       	brne	80008db2 <_dtoa_r+0xa96>
80008dac:	33 98       	mov	r8,57
80008dae:	0a c8       	st.b	r5++,r8
80008db0:	c6 78       	rjmp	80008e7e <_dtoa_r+0xb62>
80008db2:	2f f0       	sub	r0,-1
80008db4:	0a c0       	st.b	r5++,r0
80008db6:	c7 58       	rjmp	80008ea0 <_dtoa_r+0xb84>
80008db8:	0a c0       	st.b	r5++,r0
80008dba:	40 9a       	lddsp	r10,sp[0x24]
80008dbc:	40 e9       	lddsp	r9,sp[0x38]
80008dbe:	12 3a       	cp.w	r10,r9
80008dc0:	c4 30       	breq	80008e46 <_dtoa_r+0xb2a>
80008dc2:	06 9b       	mov	r11,r3
80008dc4:	30 09       	mov	r9,0
80008dc6:	30 aa       	mov	r10,10
80008dc8:	0e 9c       	mov	r12,r7
80008dca:	e0 a0 0b 01 	rcall	8000a3cc <__multadd>
80008dce:	40 48       	lddsp	r8,sp[0x10]
80008dd0:	18 93       	mov	r3,r12
80008dd2:	08 38       	cp.w	r8,r4
80008dd4:	c0 91       	brne	80008de6 <_dtoa_r+0xaca>
80008dd6:	10 9b       	mov	r11,r8
80008dd8:	30 09       	mov	r9,0
80008dda:	30 aa       	mov	r10,10
80008ddc:	0e 9c       	mov	r12,r7
80008dde:	e0 a0 0a f7 	rcall	8000a3cc <__multadd>
80008de2:	50 4c       	stdsp	sp[0x10],r12
80008de4:	c0 e8       	rjmp	80008e00 <_dtoa_r+0xae4>
80008de6:	40 4b       	lddsp	r11,sp[0x10]
80008de8:	30 09       	mov	r9,0
80008dea:	30 aa       	mov	r10,10
80008dec:	0e 9c       	mov	r12,r7
80008dee:	e0 a0 0a ef 	rcall	8000a3cc <__multadd>
80008df2:	08 9b       	mov	r11,r4
80008df4:	50 4c       	stdsp	sp[0x10],r12
80008df6:	30 09       	mov	r9,0
80008df8:	30 aa       	mov	r10,10
80008dfa:	0e 9c       	mov	r12,r7
80008dfc:	e0 a0 0a e8 	rcall	8000a3cc <__multadd>
80008e00:	18 94       	mov	r4,r12
80008e02:	40 9c       	lddsp	r12,sp[0x24]
80008e04:	2f fc       	sub	r12,-1
80008e06:	50 9c       	stdsp	sp[0x24],r12
80008e08:	c7 9b       	rjmp	80008cfa <_dtoa_r+0x9de>
80008e0a:	30 18       	mov	r8,1
80008e0c:	06 90       	mov	r0,r3
80008e0e:	40 85       	lddsp	r5,sp[0x20]
80008e10:	08 93       	mov	r3,r4
80008e12:	0c 94       	mov	r4,r6
80008e14:	10 96       	mov	r6,r8
80008e16:	04 9b       	mov	r11,r2
80008e18:	00 9c       	mov	r12,r0
80008e1a:	fe b0 f9 f1 	rcall	800081fc <quorem>
80008e1e:	2d 0c       	sub	r12,-48
80008e20:	0a cc       	st.b	r5++,r12
80008e22:	02 36       	cp.w	r6,r1
80008e24:	c0 a4       	brge	80008e38 <_dtoa_r+0xb1c>
80008e26:	00 9b       	mov	r11,r0
80008e28:	30 09       	mov	r9,0
80008e2a:	30 aa       	mov	r10,10
80008e2c:	0e 9c       	mov	r12,r7
80008e2e:	2f f6       	sub	r6,-1
80008e30:	e0 a0 0a ce 	rcall	8000a3cc <__multadd>
80008e34:	18 90       	mov	r0,r12
80008e36:	cf 0b       	rjmp	80008e16 <_dtoa_r+0xafa>
80008e38:	08 96       	mov	r6,r4
80008e3a:	30 0b       	mov	r11,0
80008e3c:	06 94       	mov	r4,r3
80008e3e:	50 4b       	stdsp	sp[0x10],r11
80008e40:	00 93       	mov	r3,r0
80008e42:	18 90       	mov	r0,r12
80008e44:	c0 28       	rjmp	80008e48 <_dtoa_r+0xb2c>
80008e46:	40 26       	lddsp	r6,sp[0x8]
80008e48:	06 9b       	mov	r11,r3
80008e4a:	30 1a       	mov	r10,1
80008e4c:	0e 9c       	mov	r12,r7
80008e4e:	e0 a0 09 f3 	rcall	8000a234 <__lshift>
80008e52:	04 9b       	mov	r11,r2
80008e54:	18 93       	mov	r3,r12
80008e56:	e0 a0 07 f4 	rcall	80009e3e <__mcmp>
80008e5a:	e0 89 00 12 	brgt	80008e7e <_dtoa_r+0xb62>
80008e5e:	c1 b1       	brne	80008e94 <_dtoa_r+0xb78>
80008e60:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80008e64:	c0 d1       	brne	80008e7e <_dtoa_r+0xb62>
80008e66:	c1 78       	rjmp	80008e94 <_dtoa_r+0xb78>
80008e68:	40 89       	lddsp	r9,sp[0x20]
80008e6a:	12 38       	cp.w	r8,r9
80008e6c:	c0 30       	breq	80008e72 <_dtoa_r+0xb56>
80008e6e:	10 95       	mov	r5,r8
80008e70:	c0 88       	rjmp	80008e80 <_dtoa_r+0xb64>
80008e72:	2f f6       	sub	r6,-1
80008e74:	50 66       	stdsp	sp[0x18],r6
80008e76:	33 18       	mov	r8,49
80008e78:	40 8c       	lddsp	r12,sp[0x20]
80008e7a:	b8 88       	st.b	r12[0x0],r8
80008e7c:	c1 38       	rjmp	80008ea2 <_dtoa_r+0xb86>
80008e7e:	33 9a       	mov	r10,57
80008e80:	0a 98       	mov	r8,r5
80008e82:	11 79       	ld.ub	r9,--r8
80008e84:	f4 09 18 00 	cp.b	r9,r10
80008e88:	cf 00       	breq	80008e68 <_dtoa_r+0xb4c>
80008e8a:	2f f9       	sub	r9,-1
80008e8c:	b0 89       	st.b	r8[0x0],r9
80008e8e:	c0 98       	rjmp	80008ea0 <_dtoa_r+0xb84>
80008e90:	10 95       	mov	r5,r8
80008e92:	c0 28       	rjmp	80008e96 <_dtoa_r+0xb7a>
80008e94:	33 09       	mov	r9,48
80008e96:	0a 98       	mov	r8,r5
80008e98:	11 7a       	ld.ub	r10,--r8
80008e9a:	f2 0a 18 00 	cp.b	r10,r9
80008e9e:	cf 90       	breq	80008e90 <_dtoa_r+0xb74>
80008ea0:	50 66       	stdsp	sp[0x18],r6
80008ea2:	04 9b       	mov	r11,r2
80008ea4:	0e 9c       	mov	r12,r7
80008ea6:	e0 a0 08 bb 	rcall	8000a01c <_Bfree>
80008eaa:	58 04       	cp.w	r4,0
80008eac:	c1 20       	breq	80008ed0 <_dtoa_r+0xbb4>
80008eae:	40 4b       	lddsp	r11,sp[0x10]
80008eb0:	08 3b       	cp.w	r11,r4
80008eb2:	5f 19       	srne	r9
80008eb4:	58 0b       	cp.w	r11,0
80008eb6:	5f 18       	srne	r8
80008eb8:	f3 e8 00 08 	and	r8,r9,r8
80008ebc:	c0 40       	breq	80008ec4 <_dtoa_r+0xba8>
80008ebe:	0e 9c       	mov	r12,r7
80008ec0:	e0 a0 08 ae 	rcall	8000a01c <_Bfree>
80008ec4:	08 9b       	mov	r11,r4
80008ec6:	0e 9c       	mov	r12,r7
80008ec8:	e0 a0 08 aa 	rcall	8000a01c <_Bfree>
80008ecc:	c0 28       	rjmp	80008ed0 <_dtoa_r+0xbb4>
80008ece:	50 66       	stdsp	sp[0x18],r6
80008ed0:	0e 9c       	mov	r12,r7
80008ed2:	06 9b       	mov	r11,r3
80008ed4:	e0 a0 08 a4 	rcall	8000a01c <_Bfree>
80008ed8:	30 08       	mov	r8,0
80008eda:	aa 88       	st.b	r5[0x0],r8
80008edc:	40 68       	lddsp	r8,sp[0x18]
80008ede:	41 5a       	lddsp	r10,sp[0x54]
80008ee0:	2f f8       	sub	r8,-1
80008ee2:	41 29       	lddsp	r9,sp[0x48]
80008ee4:	95 08       	st.w	r10[0x0],r8
80008ee6:	40 8c       	lddsp	r12,sp[0x20]
80008ee8:	58 09       	cp.w	r9,0
80008eea:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80008eee:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80008ef2:	2e 6d       	sub	sp,-104
80008ef4:	d8 32       	popm	r0-r7,pc
80008ef6:	d7 03       	nop

80008ef8 <_fflush_r>:
80008ef8:	d4 21       	pushm	r4-r7,lr
80008efa:	16 97       	mov	r7,r11
80008efc:	18 96       	mov	r6,r12
80008efe:	76 48       	ld.w	r8,r11[0x10]
80008f00:	58 08       	cp.w	r8,0
80008f02:	c7 f0       	breq	80009000 <_fflush_r+0x108>
80008f04:	58 0c       	cp.w	r12,0
80008f06:	c0 50       	breq	80008f10 <_fflush_r+0x18>
80008f08:	78 68       	ld.w	r8,r12[0x18]
80008f0a:	58 08       	cp.w	r8,0
80008f0c:	c0 21       	brne	80008f10 <_fflush_r+0x18>
80008f0e:	cd fc       	rcall	800090cc <__sinit>
80008f10:	fe c8 b0 4c 	sub	r8,pc,-20404
80008f14:	10 37       	cp.w	r7,r8
80008f16:	c0 31       	brne	80008f1c <_fflush_r+0x24>
80008f18:	6c 07       	ld.w	r7,r6[0x0]
80008f1a:	c0 c8       	rjmp	80008f32 <_fflush_r+0x3a>
80008f1c:	fe c8 b0 38 	sub	r8,pc,-20424
80008f20:	10 37       	cp.w	r7,r8
80008f22:	c0 31       	brne	80008f28 <_fflush_r+0x30>
80008f24:	6c 17       	ld.w	r7,r6[0x4]
80008f26:	c0 68       	rjmp	80008f32 <_fflush_r+0x3a>
80008f28:	fe c8 b0 24 	sub	r8,pc,-20444
80008f2c:	10 37       	cp.w	r7,r8
80008f2e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008f32:	8e 6a       	ld.sh	r10,r7[0xc]
80008f34:	14 98       	mov	r8,r10
80008f36:	ed ba 00 03 	bld	r10,0x3
80008f3a:	c4 20       	breq	80008fbe <_fflush_r+0xc6>
80008f3c:	ab ba       	sbr	r10,0xb
80008f3e:	ae 6a       	st.h	r7[0xc],r10
80008f40:	6e 18       	ld.w	r8,r7[0x4]
80008f42:	58 08       	cp.w	r8,0
80008f44:	e0 89 00 06 	brgt	80008f50 <_fflush_r+0x58>
80008f48:	6f 08       	ld.w	r8,r7[0x40]
80008f4a:	58 08       	cp.w	r8,0
80008f4c:	e0 8a 00 5a 	brle	80009000 <_fflush_r+0x108>
80008f50:	6e b8       	ld.w	r8,r7[0x2c]
80008f52:	58 08       	cp.w	r8,0
80008f54:	c5 60       	breq	80009000 <_fflush_r+0x108>
80008f56:	e2 1a 10 00 	andl	r10,0x1000,COH
80008f5a:	c0 30       	breq	80008f60 <_fflush_r+0x68>
80008f5c:	6f 55       	ld.w	r5,r7[0x54]
80008f5e:	c0 f8       	rjmp	80008f7c <_fflush_r+0x84>
80008f60:	30 19       	mov	r9,1
80008f62:	6e 8b       	ld.w	r11,r7[0x20]
80008f64:	0c 9c       	mov	r12,r6
80008f66:	5d 18       	icall	r8
80008f68:	18 95       	mov	r5,r12
80008f6a:	5b fc       	cp.w	r12,-1
80008f6c:	c0 81       	brne	80008f7c <_fflush_r+0x84>
80008f6e:	6c 38       	ld.w	r8,r6[0xc]
80008f70:	59 d8       	cp.w	r8,29
80008f72:	c4 70       	breq	80009000 <_fflush_r+0x108>
80008f74:	8e 68       	ld.sh	r8,r7[0xc]
80008f76:	a7 a8       	sbr	r8,0x6
80008f78:	ae 68       	st.h	r7[0xc],r8
80008f7a:	d8 22       	popm	r4-r7,pc
80008f7c:	8e 68       	ld.sh	r8,r7[0xc]
80008f7e:	ed b8 00 02 	bld	r8,0x2
80008f82:	c0 91       	brne	80008f94 <_fflush_r+0x9c>
80008f84:	6e 18       	ld.w	r8,r7[0x4]
80008f86:	10 15       	sub	r5,r8
80008f88:	6e d8       	ld.w	r8,r7[0x34]
80008f8a:	58 08       	cp.w	r8,0
80008f8c:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80008f90:	eb d8 e1 15 	subne	r5,r5,r8
80008f94:	6e b8       	ld.w	r8,r7[0x2c]
80008f96:	0c 9c       	mov	r12,r6
80008f98:	30 09       	mov	r9,0
80008f9a:	0a 9a       	mov	r10,r5
80008f9c:	6e 8b       	ld.w	r11,r7[0x20]
80008f9e:	5d 18       	icall	r8
80008fa0:	8e 68       	ld.sh	r8,r7[0xc]
80008fa2:	0a 3c       	cp.w	r12,r5
80008fa4:	c2 61       	brne	80008ff0 <_fflush_r+0xf8>
80008fa6:	ab d8       	cbr	r8,0xb
80008fa8:	30 0c       	mov	r12,0
80008faa:	6e 49       	ld.w	r9,r7[0x10]
80008fac:	ae 68       	st.h	r7[0xc],r8
80008fae:	8f 1c       	st.w	r7[0x4],r12
80008fb0:	8f 09       	st.w	r7[0x0],r9
80008fb2:	ed b8 00 0c 	bld	r8,0xc
80008fb6:	c2 51       	brne	80009000 <_fflush_r+0x108>
80008fb8:	ef 45 00 54 	st.w	r7[84],r5
80008fbc:	d8 22       	popm	r4-r7,pc
80008fbe:	6e 45       	ld.w	r5,r7[0x10]
80008fc0:	58 05       	cp.w	r5,0
80008fc2:	c1 f0       	breq	80009000 <_fflush_r+0x108>
80008fc4:	6e 04       	ld.w	r4,r7[0x0]
80008fc6:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80008fca:	8f 05       	st.w	r7[0x0],r5
80008fcc:	f9 b8 01 00 	movne	r8,0
80008fd0:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80008fd4:	0a 14       	sub	r4,r5
80008fd6:	8f 28       	st.w	r7[0x8],r8
80008fd8:	c1 18       	rjmp	80008ffa <_fflush_r+0x102>
80008fda:	08 99       	mov	r9,r4
80008fdc:	0a 9a       	mov	r10,r5
80008fde:	6e a8       	ld.w	r8,r7[0x28]
80008fe0:	6e 8b       	ld.w	r11,r7[0x20]
80008fe2:	0c 9c       	mov	r12,r6
80008fe4:	5d 18       	icall	r8
80008fe6:	18 14       	sub	r4,r12
80008fe8:	58 0c       	cp.w	r12,0
80008fea:	e0 89 00 07 	brgt	80008ff8 <_fflush_r+0x100>
80008fee:	8e 68       	ld.sh	r8,r7[0xc]
80008ff0:	a7 a8       	sbr	r8,0x6
80008ff2:	3f fc       	mov	r12,-1
80008ff4:	ae 68       	st.h	r7[0xc],r8
80008ff6:	d8 22       	popm	r4-r7,pc
80008ff8:	18 05       	add	r5,r12
80008ffa:	58 04       	cp.w	r4,0
80008ffc:	fe 99 ff ef 	brgt	80008fda <_fflush_r+0xe2>
80009000:	d8 2a       	popm	r4-r7,pc,r12=0
80009002:	d7 03       	nop

80009004 <fflush>:
80009004:	d4 01       	pushm	lr
80009006:	18 9b       	mov	r11,r12
80009008:	58 0c       	cp.w	r12,0
8000900a:	c0 91       	brne	8000901c <fflush+0x18>
8000900c:	fe c8 b6 60 	sub	r8,pc,-18848
80009010:	fe cb 01 18 	sub	r11,pc,280
80009014:	70 0c       	ld.w	r12,r8[0x0]
80009016:	e0 a0 03 65 	rcall	800096e0 <_fwalk_reent>
8000901a:	d8 02       	popm	pc
8000901c:	e0 68 01 94 	mov	r8,404
80009020:	70 0c       	ld.w	r12,r8[0x0]
80009022:	c6 bf       	rcall	80008ef8 <_fflush_r>
80009024:	d8 02       	popm	pc
80009026:	d7 03       	nop

80009028 <__sfp_lock_acquire>:
80009028:	5e fc       	retal	r12

8000902a <__sfp_lock_release>:
8000902a:	5e fc       	retal	r12

8000902c <_cleanup_r>:
8000902c:	d4 01       	pushm	lr
8000902e:	fe cb d0 0a 	sub	r11,pc,-12278
80009032:	e0 a0 03 7f 	rcall	80009730 <_fwalk>
80009036:	d8 02       	popm	pc

80009038 <__sfmoreglue>:
80009038:	d4 21       	pushm	r4-r7,lr
8000903a:	16 95       	mov	r5,r11
8000903c:	f6 06 10 5c 	mul	r6,r11,92
80009040:	ec cb ff f4 	sub	r11,r6,-12
80009044:	e0 a0 04 14 	rcall	8000986c <_malloc_r>
80009048:	18 97       	mov	r7,r12
8000904a:	c0 90       	breq	8000905c <__sfmoreglue+0x24>
8000904c:	99 15       	st.w	r12[0x4],r5
8000904e:	30 0b       	mov	r11,0
80009050:	2f 4c       	sub	r12,-12
80009052:	0c 9a       	mov	r10,r6
80009054:	8f 2c       	st.w	r7[0x8],r12
80009056:	8f 0b       	st.w	r7[0x0],r11
80009058:	fe b0 db ee 	rcall	80004834 <memset>
8000905c:	0e 9c       	mov	r12,r7
8000905e:	d8 22       	popm	r4-r7,pc

80009060 <__sfp>:
80009060:	d4 21       	pushm	r4-r7,lr
80009062:	fe c8 b6 b6 	sub	r8,pc,-18762
80009066:	18 96       	mov	r6,r12
80009068:	70 07       	ld.w	r7,r8[0x0]
8000906a:	6e 68       	ld.w	r8,r7[0x18]
8000906c:	58 08       	cp.w	r8,0
8000906e:	c0 31       	brne	80009074 <__sfp+0x14>
80009070:	0e 9c       	mov	r12,r7
80009072:	c2 dc       	rcall	800090cc <__sinit>
80009074:	ee c7 ff 28 	sub	r7,r7,-216
80009078:	30 05       	mov	r5,0
8000907a:	6e 2c       	ld.w	r12,r7[0x8]
8000907c:	6e 18       	ld.w	r8,r7[0x4]
8000907e:	c0 68       	rjmp	8000908a <__sfp+0x2a>
80009080:	98 69       	ld.sh	r9,r12[0xc]
80009082:	ea 09 19 00 	cp.h	r9,r5
80009086:	c1 10       	breq	800090a8 <__sfp+0x48>
80009088:	2a 4c       	sub	r12,-92
8000908a:	20 18       	sub	r8,1
8000908c:	cf a7       	brpl	80009080 <__sfp+0x20>
8000908e:	6e 08       	ld.w	r8,r7[0x0]
80009090:	58 08       	cp.w	r8,0
80009092:	c0 61       	brne	8000909e <__sfp+0x3e>
80009094:	30 4b       	mov	r11,4
80009096:	0c 9c       	mov	r12,r6
80009098:	cd 0f       	rcall	80009038 <__sfmoreglue>
8000909a:	8f 0c       	st.w	r7[0x0],r12
8000909c:	c0 30       	breq	800090a2 <__sfp+0x42>
8000909e:	6e 07       	ld.w	r7,r7[0x0]
800090a0:	ce db       	rjmp	8000907a <__sfp+0x1a>
800090a2:	30 c8       	mov	r8,12
800090a4:	8d 38       	st.w	r6[0xc],r8
800090a6:	d8 22       	popm	r4-r7,pc
800090a8:	30 08       	mov	r8,0
800090aa:	f9 48 00 4c 	st.w	r12[76],r8
800090ae:	99 08       	st.w	r12[0x0],r8
800090b0:	99 28       	st.w	r12[0x8],r8
800090b2:	99 18       	st.w	r12[0x4],r8
800090b4:	99 48       	st.w	r12[0x10],r8
800090b6:	99 58       	st.w	r12[0x14],r8
800090b8:	99 68       	st.w	r12[0x18],r8
800090ba:	99 d8       	st.w	r12[0x34],r8
800090bc:	99 e8       	st.w	r12[0x38],r8
800090be:	f9 48 00 48 	st.w	r12[72],r8
800090c2:	3f f8       	mov	r8,-1
800090c4:	b8 78       	st.h	r12[0xe],r8
800090c6:	30 18       	mov	r8,1
800090c8:	b8 68       	st.h	r12[0xc],r8
800090ca:	d8 22       	popm	r4-r7,pc

800090cc <__sinit>:
800090cc:	d4 21       	pushm	r4-r7,lr
800090ce:	18 96       	mov	r6,r12
800090d0:	78 67       	ld.w	r7,r12[0x18]
800090d2:	58 07       	cp.w	r7,0
800090d4:	c4 91       	brne	80009166 <__sinit+0x9a>
800090d6:	fe c8 00 aa 	sub	r8,pc,170
800090da:	30 15       	mov	r5,1
800090dc:	99 a8       	st.w	r12[0x28],r8
800090de:	f9 47 00 d8 	st.w	r12[216],r7
800090e2:	f9 47 00 dc 	st.w	r12[220],r7
800090e6:	f9 47 00 e0 	st.w	r12[224],r7
800090ea:	99 65       	st.w	r12[0x18],r5
800090ec:	cb af       	rcall	80009060 <__sfp>
800090ee:	8d 0c       	st.w	r6[0x0],r12
800090f0:	0c 9c       	mov	r12,r6
800090f2:	cb 7f       	rcall	80009060 <__sfp>
800090f4:	8d 1c       	st.w	r6[0x4],r12
800090f6:	0c 9c       	mov	r12,r6
800090f8:	cb 4f       	rcall	80009060 <__sfp>
800090fa:	6c 09       	ld.w	r9,r6[0x0]
800090fc:	30 48       	mov	r8,4
800090fe:	93 07       	st.w	r9[0x0],r7
80009100:	b2 68       	st.h	r9[0xc],r8
80009102:	93 17       	st.w	r9[0x4],r7
80009104:	93 27       	st.w	r9[0x8],r7
80009106:	6c 18       	ld.w	r8,r6[0x4]
80009108:	b2 77       	st.h	r9[0xe],r7
8000910a:	93 47       	st.w	r9[0x10],r7
8000910c:	93 57       	st.w	r9[0x14],r7
8000910e:	93 67       	st.w	r9[0x18],r7
80009110:	93 89       	st.w	r9[0x20],r9
80009112:	91 07       	st.w	r8[0x0],r7
80009114:	91 17       	st.w	r8[0x4],r7
80009116:	91 27       	st.w	r8[0x8],r7
80009118:	fe ce e6 64 	sub	lr,pc,-6556
8000911c:	fe cb e6 98 	sub	r11,pc,-6504
80009120:	93 9e       	st.w	r9[0x24],lr
80009122:	93 ab       	st.w	r9[0x28],r11
80009124:	fe ca e6 c4 	sub	r10,pc,-6460
80009128:	fe c4 e6 d4 	sub	r4,pc,-6444
8000912c:	93 ba       	st.w	r9[0x2c],r10
8000912e:	93 c4       	st.w	r9[0x30],r4
80009130:	30 99       	mov	r9,9
80009132:	b0 69       	st.h	r8[0xc],r9
80009134:	b0 75       	st.h	r8[0xe],r5
80009136:	91 c4       	st.w	r8[0x30],r4
80009138:	91 47       	st.w	r8[0x10],r7
8000913a:	91 57       	st.w	r8[0x14],r7
8000913c:	91 67       	st.w	r8[0x18],r7
8000913e:	91 88       	st.w	r8[0x20],r8
80009140:	91 9e       	st.w	r8[0x24],lr
80009142:	91 ab       	st.w	r8[0x28],r11
80009144:	91 ba       	st.w	r8[0x2c],r10
80009146:	8d 2c       	st.w	r6[0x8],r12
80009148:	31 28       	mov	r8,18
8000914a:	99 07       	st.w	r12[0x0],r7
8000914c:	b8 68       	st.h	r12[0xc],r8
8000914e:	99 17       	st.w	r12[0x4],r7
80009150:	99 27       	st.w	r12[0x8],r7
80009152:	30 28       	mov	r8,2
80009154:	b8 78       	st.h	r12[0xe],r8
80009156:	99 c4       	st.w	r12[0x30],r4
80009158:	99 67       	st.w	r12[0x18],r7
8000915a:	99 9e       	st.w	r12[0x24],lr
8000915c:	99 ab       	st.w	r12[0x28],r11
8000915e:	99 ba       	st.w	r12[0x2c],r10
80009160:	99 47       	st.w	r12[0x10],r7
80009162:	99 57       	st.w	r12[0x14],r7
80009164:	99 8c       	st.w	r12[0x20],r12
80009166:	d8 22       	popm	r4-r7,pc

80009168 <_fread_r>:
80009168:	d4 31       	pushm	r0-r7,lr
8000916a:	14 90       	mov	r0,r10
8000916c:	12 91       	mov	r1,r9
8000916e:	16 93       	mov	r3,r11
80009170:	10 97       	mov	r7,r8
80009172:	18 95       	mov	r5,r12
80009174:	f2 0a 02 42 	mul	r2,r9,r10
80009178:	58 02       	cp.w	r2,0
8000917a:	c0 31       	brne	80009180 <_fread_r+0x18>
8000917c:	04 91       	mov	r1,r2
8000917e:	c4 38       	rjmp	80009204 <_fread_r+0x9c>
80009180:	58 0c       	cp.w	r12,0
80009182:	c0 50       	breq	8000918c <_fread_r+0x24>
80009184:	78 68       	ld.w	r8,r12[0x18]
80009186:	58 08       	cp.w	r8,0
80009188:	c0 21       	brne	8000918c <_fread_r+0x24>
8000918a:	ca 1f       	rcall	800090cc <__sinit>
8000918c:	fe c8 b2 c8 	sub	r8,pc,-19768
80009190:	10 37       	cp.w	r7,r8
80009192:	c0 31       	brne	80009198 <_fread_r+0x30>
80009194:	6a 07       	ld.w	r7,r5[0x0]
80009196:	c0 c8       	rjmp	800091ae <_fread_r+0x46>
80009198:	fe c8 b2 b4 	sub	r8,pc,-19788
8000919c:	10 37       	cp.w	r7,r8
8000919e:	c0 31       	brne	800091a4 <_fread_r+0x3c>
800091a0:	6a 17       	ld.w	r7,r5[0x4]
800091a2:	c0 68       	rjmp	800091ae <_fread_r+0x46>
800091a4:	fe c8 b2 a0 	sub	r8,pc,-19808
800091a8:	10 37       	cp.w	r7,r8
800091aa:	eb f7 00 02 	ld.weq	r7,r5[0x8]
800091ae:	6e 18       	ld.w	r8,r7[0x4]
800091b0:	58 08       	cp.w	r8,0
800091b2:	c0 34       	brge	800091b8 <_fread_r+0x50>
800091b4:	30 08       	mov	r8,0
800091b6:	8f 18       	st.w	r7[0x4],r8
800091b8:	04 96       	mov	r6,r2
800091ba:	c1 48       	rjmp	800091e2 <_fread_r+0x7a>
800091bc:	fe b0 da 98 	rcall	800046ec <memcpy>
800091c0:	6e 08       	ld.w	r8,r7[0x0]
800091c2:	08 03       	add	r3,r4
800091c4:	08 16       	sub	r6,r4
800091c6:	0e 9b       	mov	r11,r7
800091c8:	f0 04 00 04 	add	r4,r8,r4
800091cc:	0a 9c       	mov	r12,r5
800091ce:	8f 04       	st.w	r7[0x0],r4
800091d0:	e0 a0 0b 1e 	rcall	8000a80c <__srefill_r>
800091d4:	c0 70       	breq	800091e2 <_fread_r+0x7a>
800091d6:	e4 06 01 09 	sub	r9,r2,r6
800091da:	f2 00 0d 08 	divu	r8,r9,r0
800091de:	10 91       	mov	r1,r8
800091e0:	c1 28       	rjmp	80009204 <_fread_r+0x9c>
800091e2:	6e 14       	ld.w	r4,r7[0x4]
800091e4:	6e 08       	ld.w	r8,r7[0x0]
800091e6:	06 9c       	mov	r12,r3
800091e8:	08 9a       	mov	r10,r4
800091ea:	10 9b       	mov	r11,r8
800091ec:	08 36       	cp.w	r6,r4
800091ee:	fe 9b ff e7 	brhi	800091bc <_fread_r+0x54>
800091f2:	0c 9a       	mov	r10,r6
800091f4:	fe b0 da 7c 	rcall	800046ec <memcpy>
800091f8:	6e 08       	ld.w	r8,r7[0x0]
800091fa:	0c 08       	add	r8,r6
800091fc:	8f 08       	st.w	r7[0x0],r8
800091fe:	6e 18       	ld.w	r8,r7[0x4]
80009200:	0c 18       	sub	r8,r6
80009202:	8f 18       	st.w	r7[0x4],r8
80009204:	02 9c       	mov	r12,r1
80009206:	d8 32       	popm	r0-r7,pc

80009208 <fread>:
80009208:	d4 01       	pushm	lr
8000920a:	12 98       	mov	r8,r9
8000920c:	14 99       	mov	r9,r10
8000920e:	16 9a       	mov	r10,r11
80009210:	18 9b       	mov	r11,r12
80009212:	e0 6c 01 94 	mov	r12,404
80009216:	78 0c       	ld.w	r12,r12[0x0]
80009218:	ca 8f       	rcall	80009168 <_fread_r>
8000921a:	d8 02       	popm	pc

8000921c <_malloc_trim_r>:
8000921c:	d4 21       	pushm	r4-r7,lr
8000921e:	16 95       	mov	r5,r11
80009220:	18 97       	mov	r7,r12
80009222:	e0 a0 05 95 	rcall	80009d4c <__malloc_lock>
80009226:	e0 64 01 a0 	mov	r4,416
8000922a:	68 28       	ld.w	r8,r4[0x8]
8000922c:	70 16       	ld.w	r6,r8[0x4]
8000922e:	e0 16 ff fc 	andl	r6,0xfffc
80009232:	ec c8 ff 91 	sub	r8,r6,-111
80009236:	f0 05 01 05 	sub	r5,r8,r5
8000923a:	e0 15 ff 80 	andl	r5,0xff80
8000923e:	ea c5 00 80 	sub	r5,r5,128
80009242:	e0 45 00 7f 	cp.w	r5,127
80009246:	e0 8a 00 25 	brle	80009290 <_malloc_trim_r+0x74>
8000924a:	30 0b       	mov	r11,0
8000924c:	0e 9c       	mov	r12,r7
8000924e:	e0 a0 0b 89 	rcall	8000a960 <_sbrk_r>
80009252:	68 28       	ld.w	r8,r4[0x8]
80009254:	0c 08       	add	r8,r6
80009256:	10 3c       	cp.w	r12,r8
80009258:	c1 c1       	brne	80009290 <_malloc_trim_r+0x74>
8000925a:	ea 0b 11 00 	rsub	r11,r5,0
8000925e:	0e 9c       	mov	r12,r7
80009260:	e0 a0 0b 80 	rcall	8000a960 <_sbrk_r>
80009264:	5b fc       	cp.w	r12,-1
80009266:	c1 91       	brne	80009298 <_malloc_trim_r+0x7c>
80009268:	30 0b       	mov	r11,0
8000926a:	0e 9c       	mov	r12,r7
8000926c:	e0 a0 0b 7a 	rcall	8000a960 <_sbrk_r>
80009270:	68 28       	ld.w	r8,r4[0x8]
80009272:	f8 08 01 09 	sub	r9,r12,r8
80009276:	58 f9       	cp.w	r9,15
80009278:	e0 8a 00 0c 	brle	80009290 <_malloc_trim_r+0x74>
8000927c:	a1 a9       	sbr	r9,0x0
8000927e:	91 19       	st.w	r8[0x4],r9
80009280:	e0 68 05 ac 	mov	r8,1452
80009284:	70 09       	ld.w	r9,r8[0x0]
80009286:	e0 68 09 e0 	mov	r8,2528
8000928a:	f8 09 01 09 	sub	r9,r12,r9
8000928e:	91 09       	st.w	r8[0x0],r9
80009290:	0e 9c       	mov	r12,r7
80009292:	e0 a0 05 5e 	rcall	80009d4e <__malloc_unlock>
80009296:	d8 2a       	popm	r4-r7,pc,r12=0
80009298:	68 28       	ld.w	r8,r4[0x8]
8000929a:	0a 16       	sub	r6,r5
8000929c:	a1 a6       	sbr	r6,0x0
8000929e:	91 16       	st.w	r8[0x4],r6
800092a0:	e0 68 09 e0 	mov	r8,2528
800092a4:	70 09       	ld.w	r9,r8[0x0]
800092a6:	0a 19       	sub	r9,r5
800092a8:	0e 9c       	mov	r12,r7
800092aa:	91 09       	st.w	r8[0x0],r9
800092ac:	e0 a0 05 51 	rcall	80009d4e <__malloc_unlock>
800092b0:	da 2a       	popm	r4-r7,pc,r12=1
800092b2:	d7 03       	nop

800092b4 <_free_r>:
800092b4:	d4 21       	pushm	r4-r7,lr
800092b6:	16 96       	mov	r6,r11
800092b8:	18 97       	mov	r7,r12
800092ba:	58 0b       	cp.w	r11,0
800092bc:	e0 80 00 c0 	breq	8000943c <_free_r+0x188>
800092c0:	e0 a0 05 46 	rcall	80009d4c <__malloc_lock>
800092c4:	20 86       	sub	r6,8
800092c6:	e0 6a 01 a0 	mov	r10,416
800092ca:	6c 18       	ld.w	r8,r6[0x4]
800092cc:	74 2e       	ld.w	lr,r10[0x8]
800092ce:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
800092d2:	a1 c8       	cbr	r8,0x0
800092d4:	ec 08 00 09 	add	r9,r6,r8
800092d8:	72 1b       	ld.w	r11,r9[0x4]
800092da:	e0 1b ff fc 	andl	r11,0xfffc
800092de:	1c 39       	cp.w	r9,lr
800092e0:	c1 e1       	brne	8000931c <_free_r+0x68>
800092e2:	f6 08 00 08 	add	r8,r11,r8
800092e6:	58 0c       	cp.w	r12,0
800092e8:	c0 81       	brne	800092f8 <_free_r+0x44>
800092ea:	6c 09       	ld.w	r9,r6[0x0]
800092ec:	12 16       	sub	r6,r9
800092ee:	12 08       	add	r8,r9
800092f0:	6c 3b       	ld.w	r11,r6[0xc]
800092f2:	6c 29       	ld.w	r9,r6[0x8]
800092f4:	97 29       	st.w	r11[0x8],r9
800092f6:	93 3b       	st.w	r9[0xc],r11
800092f8:	10 99       	mov	r9,r8
800092fa:	95 26       	st.w	r10[0x8],r6
800092fc:	a1 a9       	sbr	r9,0x0
800092fe:	8d 19       	st.w	r6[0x4],r9
80009300:	e0 69 05 a8 	mov	r9,1448
80009304:	72 09       	ld.w	r9,r9[0x0]
80009306:	12 38       	cp.w	r8,r9
80009308:	c0 63       	brcs	80009314 <_free_r+0x60>
8000930a:	e0 68 09 dc 	mov	r8,2524
8000930e:	0e 9c       	mov	r12,r7
80009310:	70 0b       	ld.w	r11,r8[0x0]
80009312:	c8 5f       	rcall	8000921c <_malloc_trim_r>
80009314:	0e 9c       	mov	r12,r7
80009316:	e0 a0 05 1c 	rcall	80009d4e <__malloc_unlock>
8000931a:	d8 22       	popm	r4-r7,pc
8000931c:	93 1b       	st.w	r9[0x4],r11
8000931e:	58 0c       	cp.w	r12,0
80009320:	c0 30       	breq	80009326 <_free_r+0x72>
80009322:	30 0c       	mov	r12,0
80009324:	c1 08       	rjmp	80009344 <_free_r+0x90>
80009326:	6c 0e       	ld.w	lr,r6[0x0]
80009328:	f4 c5 ff f8 	sub	r5,r10,-8
8000932c:	1c 16       	sub	r6,lr
8000932e:	1c 08       	add	r8,lr
80009330:	6c 2e       	ld.w	lr,r6[0x8]
80009332:	0a 3e       	cp.w	lr,r5
80009334:	f9 bc 00 01 	moveq	r12,1
80009338:	ed f5 10 03 	ld.wne	r5,r6[0xc]
8000933c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80009340:	fd f5 1a 03 	st.wne	lr[0xc],r5
80009344:	f2 0b 00 0e 	add	lr,r9,r11
80009348:	7c 1e       	ld.w	lr,lr[0x4]
8000934a:	ed be 00 00 	bld	lr,0x0
8000934e:	c1 40       	breq	80009376 <_free_r+0xc2>
80009350:	16 08       	add	r8,r11
80009352:	58 0c       	cp.w	r12,0
80009354:	c0 d1       	brne	8000936e <_free_r+0xba>
80009356:	e0 6e 01 a0 	mov	lr,416
8000935a:	72 2b       	ld.w	r11,r9[0x8]
8000935c:	2f 8e       	sub	lr,-8
8000935e:	1c 3b       	cp.w	r11,lr
80009360:	c0 71       	brne	8000936e <_free_r+0xba>
80009362:	97 36       	st.w	r11[0xc],r6
80009364:	97 26       	st.w	r11[0x8],r6
80009366:	8d 2b       	st.w	r6[0x8],r11
80009368:	8d 3b       	st.w	r6[0xc],r11
8000936a:	30 1c       	mov	r12,1
8000936c:	c0 58       	rjmp	80009376 <_free_r+0xc2>
8000936e:	72 2b       	ld.w	r11,r9[0x8]
80009370:	72 39       	ld.w	r9,r9[0xc]
80009372:	93 2b       	st.w	r9[0x8],r11
80009374:	97 39       	st.w	r11[0xc],r9
80009376:	10 99       	mov	r9,r8
80009378:	ec 08 09 08 	st.w	r6[r8],r8
8000937c:	a1 a9       	sbr	r9,0x0
8000937e:	8d 19       	st.w	r6[0x4],r9
80009380:	58 0c       	cp.w	r12,0
80009382:	c5 a1       	brne	80009436 <_free_r+0x182>
80009384:	e0 48 01 ff 	cp.w	r8,511
80009388:	e0 8b 00 13 	brhi	800093ae <_free_r+0xfa>
8000938c:	a3 98       	lsr	r8,0x3
8000938e:	f4 08 00 39 	add	r9,r10,r8<<0x3
80009392:	72 2b       	ld.w	r11,r9[0x8]
80009394:	8d 39       	st.w	r6[0xc],r9
80009396:	8d 2b       	st.w	r6[0x8],r11
80009398:	97 36       	st.w	r11[0xc],r6
8000939a:	93 26       	st.w	r9[0x8],r6
8000939c:	a3 48       	asr	r8,0x2
8000939e:	74 19       	ld.w	r9,r10[0x4]
800093a0:	30 1b       	mov	r11,1
800093a2:	f6 08 09 48 	lsl	r8,r11,r8
800093a6:	f3 e8 10 08 	or	r8,r9,r8
800093aa:	95 18       	st.w	r10[0x4],r8
800093ac:	c4 58       	rjmp	80009436 <_free_r+0x182>
800093ae:	f0 0b 16 09 	lsr	r11,r8,0x9
800093b2:	58 4b       	cp.w	r11,4
800093b4:	e0 8b 00 06 	brhi	800093c0 <_free_r+0x10c>
800093b8:	f0 0b 16 06 	lsr	r11,r8,0x6
800093bc:	2c 8b       	sub	r11,-56
800093be:	c2 08       	rjmp	800093fe <_free_r+0x14a>
800093c0:	59 4b       	cp.w	r11,20
800093c2:	e0 8b 00 04 	brhi	800093ca <_free_r+0x116>
800093c6:	2a 5b       	sub	r11,-91
800093c8:	c1 b8       	rjmp	800093fe <_free_r+0x14a>
800093ca:	e0 4b 00 54 	cp.w	r11,84
800093ce:	e0 8b 00 06 	brhi	800093da <_free_r+0x126>
800093d2:	f0 0b 16 0c 	lsr	r11,r8,0xc
800093d6:	29 2b       	sub	r11,-110
800093d8:	c1 38       	rjmp	800093fe <_free_r+0x14a>
800093da:	e0 4b 01 54 	cp.w	r11,340
800093de:	e0 8b 00 06 	brhi	800093ea <_free_r+0x136>
800093e2:	f0 0b 16 0f 	lsr	r11,r8,0xf
800093e6:	28 9b       	sub	r11,-119
800093e8:	c0 b8       	rjmp	800093fe <_free_r+0x14a>
800093ea:	e0 4b 05 54 	cp.w	r11,1364
800093ee:	e0 88 00 05 	brls	800093f8 <_free_r+0x144>
800093f2:	37 eb       	mov	r11,126
800093f4:	c0 58       	rjmp	800093fe <_free_r+0x14a>
800093f6:	d7 03       	nop
800093f8:	f0 0b 16 12 	lsr	r11,r8,0x12
800093fc:	28 4b       	sub	r11,-124
800093fe:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80009402:	78 29       	ld.w	r9,r12[0x8]
80009404:	18 39       	cp.w	r9,r12
80009406:	c0 e1       	brne	80009422 <_free_r+0x16e>
80009408:	74 18       	ld.w	r8,r10[0x4]
8000940a:	a3 4b       	asr	r11,0x2
8000940c:	30 1c       	mov	r12,1
8000940e:	f8 0b 09 4b 	lsl	r11,r12,r11
80009412:	f1 eb 10 0b 	or	r11,r8,r11
80009416:	12 98       	mov	r8,r9
80009418:	95 1b       	st.w	r10[0x4],r11
8000941a:	c0 a8       	rjmp	8000942e <_free_r+0x17a>
8000941c:	72 29       	ld.w	r9,r9[0x8]
8000941e:	18 39       	cp.w	r9,r12
80009420:	c0 60       	breq	8000942c <_free_r+0x178>
80009422:	72 1a       	ld.w	r10,r9[0x4]
80009424:	e0 1a ff fc 	andl	r10,0xfffc
80009428:	14 38       	cp.w	r8,r10
8000942a:	cf 93       	brcs	8000941c <_free_r+0x168>
8000942c:	72 38       	ld.w	r8,r9[0xc]
8000942e:	8d 38       	st.w	r6[0xc],r8
80009430:	8d 29       	st.w	r6[0x8],r9
80009432:	93 36       	st.w	r9[0xc],r6
80009434:	91 26       	st.w	r8[0x8],r6
80009436:	0e 9c       	mov	r12,r7
80009438:	e0 a0 04 8b 	rcall	80009d4e <__malloc_unlock>
8000943c:	d8 22       	popm	r4-r7,pc
8000943e:	d7 03       	nop

80009440 <__sfvwrite_r>:
80009440:	d4 31       	pushm	r0-r7,lr
80009442:	20 3d       	sub	sp,12
80009444:	14 94       	mov	r4,r10
80009446:	18 95       	mov	r5,r12
80009448:	16 97       	mov	r7,r11
8000944a:	74 28       	ld.w	r8,r10[0x8]
8000944c:	58 08       	cp.w	r8,0
8000944e:	e0 80 01 45 	breq	800096d8 <__sfvwrite_r+0x298>
80009452:	96 68       	ld.sh	r8,r11[0xc]
80009454:	ed b8 00 03 	bld	r8,0x3
80009458:	c0 41       	brne	80009460 <__sfvwrite_r+0x20>
8000945a:	76 48       	ld.w	r8,r11[0x10]
8000945c:	58 08       	cp.w	r8,0
8000945e:	c0 c1       	brne	80009476 <__sfvwrite_r+0x36>
80009460:	0e 9b       	mov	r11,r7
80009462:	0a 9c       	mov	r12,r5
80009464:	fe b0 f6 5e 	rcall	80008120 <__swsetup_r>
80009468:	c0 70       	breq	80009476 <__sfvwrite_r+0x36>
8000946a:	8e 68       	ld.sh	r8,r7[0xc]
8000946c:	a7 a8       	sbr	r8,0x6
8000946e:	ae 68       	st.h	r7[0xc],r8
80009470:	30 98       	mov	r8,9
80009472:	8b 38       	st.w	r5[0xc],r8
80009474:	c3 09       	rjmp	800096d4 <__sfvwrite_r+0x294>
80009476:	8e 63       	ld.sh	r3,r7[0xc]
80009478:	68 00       	ld.w	r0,r4[0x0]
8000947a:	06 96       	mov	r6,r3
8000947c:	e2 16 00 02 	andl	r6,0x2,COH
80009480:	c2 10       	breq	800094c2 <__sfvwrite_r+0x82>
80009482:	30 03       	mov	r3,0
80009484:	e0 62 04 00 	mov	r2,1024
80009488:	06 96       	mov	r6,r3
8000948a:	c0 48       	rjmp	80009492 <__sfvwrite_r+0x52>
8000948c:	60 03       	ld.w	r3,r0[0x0]
8000948e:	60 16       	ld.w	r6,r0[0x4]
80009490:	2f 80       	sub	r0,-8
80009492:	58 06       	cp.w	r6,0
80009494:	cf c0       	breq	8000948c <__sfvwrite_r+0x4c>
80009496:	e0 46 04 00 	cp.w	r6,1024
8000949a:	ec 09 17 80 	movls	r9,r6
8000949e:	e4 09 17 b0 	movhi	r9,r2
800094a2:	06 9a       	mov	r10,r3
800094a4:	6e a8       	ld.w	r8,r7[0x28]
800094a6:	6e 8b       	ld.w	r11,r7[0x20]
800094a8:	0a 9c       	mov	r12,r5
800094aa:	5d 18       	icall	r8
800094ac:	18 16       	sub	r6,r12
800094ae:	58 0c       	cp.w	r12,0
800094b0:	e0 8a 01 0f 	brle	800096ce <__sfvwrite_r+0x28e>
800094b4:	68 28       	ld.w	r8,r4[0x8]
800094b6:	18 18       	sub	r8,r12
800094b8:	89 28       	st.w	r4[0x8],r8
800094ba:	e0 80 01 0f 	breq	800096d8 <__sfvwrite_r+0x298>
800094be:	18 03       	add	r3,r12
800094c0:	ce 9b       	rjmp	80009492 <__sfvwrite_r+0x52>
800094c2:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
800094c6:	c0 70       	breq	800094d4 <__sfvwrite_r+0x94>
800094c8:	50 06       	stdsp	sp[0x0],r6
800094ca:	0c 93       	mov	r3,r6
800094cc:	0c 91       	mov	r1,r6
800094ce:	50 15       	stdsp	sp[0x4],r5
800094d0:	08 92       	mov	r2,r4
800094d2:	c9 e8       	rjmp	8000960e <__sfvwrite_r+0x1ce>
800094d4:	06 96       	mov	r6,r3
800094d6:	08 91       	mov	r1,r4
800094d8:	c0 48       	rjmp	800094e0 <__sfvwrite_r+0xa0>
800094da:	60 03       	ld.w	r3,r0[0x0]
800094dc:	60 16       	ld.w	r6,r0[0x4]
800094de:	2f 80       	sub	r0,-8
800094e0:	58 06       	cp.w	r6,0
800094e2:	cf c0       	breq	800094da <__sfvwrite_r+0x9a>
800094e4:	8e 68       	ld.sh	r8,r7[0xc]
800094e6:	6e 24       	ld.w	r4,r7[0x8]
800094e8:	10 99       	mov	r9,r8
800094ea:	e2 19 02 00 	andl	r9,0x200,COH
800094ee:	c5 50       	breq	80009598 <__sfvwrite_r+0x158>
800094f0:	08 36       	cp.w	r6,r4
800094f2:	c4 33       	brcs	80009578 <__sfvwrite_r+0x138>
800094f4:	10 99       	mov	r9,r8
800094f6:	e2 19 04 80 	andl	r9,0x480,COH
800094fa:	c3 f0       	breq	80009578 <__sfvwrite_r+0x138>
800094fc:	6e 4b       	ld.w	r11,r7[0x10]
800094fe:	6e 09       	ld.w	r9,r7[0x0]
80009500:	16 19       	sub	r9,r11
80009502:	50 09       	stdsp	sp[0x0],r9
80009504:	6e 59       	ld.w	r9,r7[0x14]
80009506:	10 9c       	mov	r12,r8
80009508:	f2 09 00 1a 	add	r10,r9,r9<<0x1
8000950c:	30 28       	mov	r8,2
8000950e:	f4 08 0c 08 	divs	r8,r10,r8
80009512:	fa e9 00 04 	st.d	sp[4],r8
80009516:	10 94       	mov	r4,r8
80009518:	40 09       	lddsp	r9,sp[0x0]
8000951a:	e2 1c 04 00 	andl	r12,0x400,COH
8000951e:	2f f9       	sub	r9,-1
80009520:	0c 09       	add	r9,r6
80009522:	12 38       	cp.w	r8,r9
80009524:	f2 04 17 30 	movlo	r4,r9
80009528:	58 0c       	cp.w	r12,0
8000952a:	c1 00       	breq	8000954a <__sfvwrite_r+0x10a>
8000952c:	08 9b       	mov	r11,r4
8000952e:	0a 9c       	mov	r12,r5
80009530:	c9 ed       	rcall	8000986c <_malloc_r>
80009532:	18 92       	mov	r2,r12
80009534:	c1 40       	breq	8000955c <__sfvwrite_r+0x11c>
80009536:	40 0a       	lddsp	r10,sp[0x0]
80009538:	6e 4b       	ld.w	r11,r7[0x10]
8000953a:	fe b0 d8 d9 	rcall	800046ec <memcpy>
8000953e:	8e 68       	ld.sh	r8,r7[0xc]
80009540:	e0 18 fb 7f 	andl	r8,0xfb7f
80009544:	a7 b8       	sbr	r8,0x7
80009546:	ae 68       	st.h	r7[0xc],r8
80009548:	c0 d8       	rjmp	80009562 <__sfvwrite_r+0x122>
8000954a:	08 9a       	mov	r10,r4
8000954c:	0a 9c       	mov	r12,r5
8000954e:	e0 a0 07 ff 	rcall	8000a54c <_realloc_r>
80009552:	18 92       	mov	r2,r12
80009554:	c0 71       	brne	80009562 <__sfvwrite_r+0x122>
80009556:	6e 4b       	ld.w	r11,r7[0x10]
80009558:	0a 9c       	mov	r12,r5
8000955a:	ca de       	rcall	800092b4 <_free_r>
8000955c:	30 c8       	mov	r8,12
8000955e:	8b 38       	st.w	r5[0xc],r8
80009560:	cb 78       	rjmp	800096ce <__sfvwrite_r+0x28e>
80009562:	40 0a       	lddsp	r10,sp[0x0]
80009564:	40 09       	lddsp	r9,sp[0x0]
80009566:	e8 0a 01 0a 	sub	r10,r4,r10
8000956a:	e4 09 00 08 	add	r8,r2,r9
8000956e:	8f 54       	st.w	r7[0x14],r4
80009570:	8f 2a       	st.w	r7[0x8],r10
80009572:	8f 08       	st.w	r7[0x0],r8
80009574:	8f 42       	st.w	r7[0x10],r2
80009576:	0c 94       	mov	r4,r6
80009578:	08 36       	cp.w	r6,r4
8000957a:	ec 04 17 30 	movlo	r4,r6
8000957e:	06 9b       	mov	r11,r3
80009580:	08 9a       	mov	r10,r4
80009582:	6e 0c       	ld.w	r12,r7[0x0]
80009584:	e0 a0 03 c5 	rcall	80009d0e <memmove>
80009588:	6e 08       	ld.w	r8,r7[0x0]
8000958a:	08 08       	add	r8,r4
8000958c:	8f 08       	st.w	r7[0x0],r8
8000958e:	6e 28       	ld.w	r8,r7[0x8]
80009590:	08 18       	sub	r8,r4
80009592:	0c 94       	mov	r4,r6
80009594:	8f 28       	st.w	r7[0x8],r8
80009596:	c3 08       	rjmp	800095f6 <__sfvwrite_r+0x1b6>
80009598:	08 36       	cp.w	r6,r4
8000959a:	5f ba       	srhi	r10
8000959c:	6e 0c       	ld.w	r12,r7[0x0]
8000959e:	6e 48       	ld.w	r8,r7[0x10]
800095a0:	10 3c       	cp.w	r12,r8
800095a2:	5f b8       	srhi	r8
800095a4:	f5 e8 00 08 	and	r8,r10,r8
800095a8:	f2 08 18 00 	cp.b	r8,r9
800095ac:	c0 e0       	breq	800095c8 <__sfvwrite_r+0x188>
800095ae:	06 9b       	mov	r11,r3
800095b0:	08 9a       	mov	r10,r4
800095b2:	e0 a0 03 ae 	rcall	80009d0e <memmove>
800095b6:	6e 08       	ld.w	r8,r7[0x0]
800095b8:	08 08       	add	r8,r4
800095ba:	0e 9b       	mov	r11,r7
800095bc:	8f 08       	st.w	r7[0x0],r8
800095be:	0a 9c       	mov	r12,r5
800095c0:	fe b0 fc 9c 	rcall	80008ef8 <_fflush_r>
800095c4:	c1 90       	breq	800095f6 <__sfvwrite_r+0x1b6>
800095c6:	c8 48       	rjmp	800096ce <__sfvwrite_r+0x28e>
800095c8:	6e 59       	ld.w	r9,r7[0x14]
800095ca:	12 36       	cp.w	r6,r9
800095cc:	c0 a3       	brcs	800095e0 <__sfvwrite_r+0x1a0>
800095ce:	6e a8       	ld.w	r8,r7[0x28]
800095d0:	06 9a       	mov	r10,r3
800095d2:	6e 8b       	ld.w	r11,r7[0x20]
800095d4:	0a 9c       	mov	r12,r5
800095d6:	5d 18       	icall	r8
800095d8:	18 94       	mov	r4,r12
800095da:	e0 89 00 0e 	brgt	800095f6 <__sfvwrite_r+0x1b6>
800095de:	c7 88       	rjmp	800096ce <__sfvwrite_r+0x28e>
800095e0:	0c 9a       	mov	r10,r6
800095e2:	06 9b       	mov	r11,r3
800095e4:	e0 a0 03 95 	rcall	80009d0e <memmove>
800095e8:	6e 08       	ld.w	r8,r7[0x0]
800095ea:	0c 08       	add	r8,r6
800095ec:	0c 94       	mov	r4,r6
800095ee:	8f 08       	st.w	r7[0x0],r8
800095f0:	6e 28       	ld.w	r8,r7[0x8]
800095f2:	0c 18       	sub	r8,r6
800095f4:	8f 28       	st.w	r7[0x8],r8
800095f6:	62 28       	ld.w	r8,r1[0x8]
800095f8:	08 18       	sub	r8,r4
800095fa:	83 28       	st.w	r1[0x8],r8
800095fc:	c6 e0       	breq	800096d8 <__sfvwrite_r+0x298>
800095fe:	08 16       	sub	r6,r4
80009600:	08 03       	add	r3,r4
80009602:	c6 fb       	rjmp	800094e0 <__sfvwrite_r+0xa0>
80009604:	60 03       	ld.w	r3,r0[0x0]
80009606:	60 11       	ld.w	r1,r0[0x4]
80009608:	30 08       	mov	r8,0
8000960a:	2f 80       	sub	r0,-8
8000960c:	50 08       	stdsp	sp[0x0],r8
8000960e:	58 01       	cp.w	r1,0
80009610:	cf a0       	breq	80009604 <__sfvwrite_r+0x1c4>
80009612:	40 0a       	lddsp	r10,sp[0x0]
80009614:	58 0a       	cp.w	r10,0
80009616:	c1 51       	brne	80009640 <__sfvwrite_r+0x200>
80009618:	e2 c6 ff ff 	sub	r6,r1,-1
8000961c:	02 9a       	mov	r10,r1
8000961e:	30 ab       	mov	r11,10
80009620:	06 9c       	mov	r12,r3
80009622:	e0 a0 03 6b 	rcall	80009cf8 <memchr>
80009626:	f8 c8 ff ff 	sub	r8,r12,-1
8000962a:	58 0c       	cp.w	r12,0
8000962c:	f1 d3 e1 16 	subne	r6,r8,r3
80009630:	f9 b9 01 01 	movne	r9,1
80009634:	fb f9 1a 00 	st.wne	sp[0x0],r9
80009638:	f9 b8 00 01 	moveq	r8,1
8000963c:	fb f8 0a 00 	st.weq	sp[0x0],r8
80009640:	02 36       	cp.w	r6,r1
80009642:	ec 04 17 80 	movls	r4,r6
80009646:	e2 04 17 b0 	movhi	r4,r1
8000964a:	6e 59       	ld.w	r9,r7[0x14]
8000964c:	6e 25       	ld.w	r5,r7[0x8]
8000964e:	f2 05 00 05 	add	r5,r9,r5
80009652:	0a 34       	cp.w	r4,r5
80009654:	5f 9a       	srgt	r10
80009656:	6e 0c       	ld.w	r12,r7[0x0]
80009658:	6e 48       	ld.w	r8,r7[0x10]
8000965a:	10 3c       	cp.w	r12,r8
8000965c:	5f b8       	srhi	r8
8000965e:	f5 e8 00 08 	and	r8,r10,r8
80009662:	30 0a       	mov	r10,0
80009664:	f4 08 18 00 	cp.b	r8,r10
80009668:	c0 e0       	breq	80009684 <__sfvwrite_r+0x244>
8000966a:	06 9b       	mov	r11,r3
8000966c:	0a 9a       	mov	r10,r5
8000966e:	e0 a0 03 50 	rcall	80009d0e <memmove>
80009672:	6e 08       	ld.w	r8,r7[0x0]
80009674:	0a 08       	add	r8,r5
80009676:	0e 9b       	mov	r11,r7
80009678:	8f 08       	st.w	r7[0x0],r8
8000967a:	40 1c       	lddsp	r12,sp[0x4]
8000967c:	fe b0 fc 3e 	rcall	80008ef8 <_fflush_r>
80009680:	c1 80       	breq	800096b0 <__sfvwrite_r+0x270>
80009682:	c2 68       	rjmp	800096ce <__sfvwrite_r+0x28e>
80009684:	12 34       	cp.w	r4,r9
80009686:	c0 a5       	brlt	8000969a <__sfvwrite_r+0x25a>
80009688:	6e a8       	ld.w	r8,r7[0x28]
8000968a:	06 9a       	mov	r10,r3
8000968c:	6e 8b       	ld.w	r11,r7[0x20]
8000968e:	40 1c       	lddsp	r12,sp[0x4]
80009690:	5d 18       	icall	r8
80009692:	18 95       	mov	r5,r12
80009694:	e0 89 00 0e 	brgt	800096b0 <__sfvwrite_r+0x270>
80009698:	c1 b8       	rjmp	800096ce <__sfvwrite_r+0x28e>
8000969a:	08 9a       	mov	r10,r4
8000969c:	06 9b       	mov	r11,r3
8000969e:	e0 a0 03 38 	rcall	80009d0e <memmove>
800096a2:	6e 08       	ld.w	r8,r7[0x0]
800096a4:	08 08       	add	r8,r4
800096a6:	08 95       	mov	r5,r4
800096a8:	8f 08       	st.w	r7[0x0],r8
800096aa:	6e 28       	ld.w	r8,r7[0x8]
800096ac:	08 18       	sub	r8,r4
800096ae:	8f 28       	st.w	r7[0x8],r8
800096b0:	0a 16       	sub	r6,r5
800096b2:	c0 71       	brne	800096c0 <__sfvwrite_r+0x280>
800096b4:	0e 9b       	mov	r11,r7
800096b6:	40 1c       	lddsp	r12,sp[0x4]
800096b8:	fe b0 fc 20 	rcall	80008ef8 <_fflush_r>
800096bc:	c0 91       	brne	800096ce <__sfvwrite_r+0x28e>
800096be:	50 06       	stdsp	sp[0x0],r6
800096c0:	64 28       	ld.w	r8,r2[0x8]
800096c2:	0a 18       	sub	r8,r5
800096c4:	85 28       	st.w	r2[0x8],r8
800096c6:	c0 90       	breq	800096d8 <__sfvwrite_r+0x298>
800096c8:	0a 11       	sub	r1,r5
800096ca:	0a 03       	add	r3,r5
800096cc:	ca 1b       	rjmp	8000960e <__sfvwrite_r+0x1ce>
800096ce:	8e 68       	ld.sh	r8,r7[0xc]
800096d0:	a7 a8       	sbr	r8,0x6
800096d2:	ae 68       	st.h	r7[0xc],r8
800096d4:	3f fc       	mov	r12,-1
800096d6:	c0 28       	rjmp	800096da <__sfvwrite_r+0x29a>
800096d8:	30 0c       	mov	r12,0
800096da:	2f dd       	sub	sp,-12
800096dc:	d8 32       	popm	r0-r7,pc
800096de:	d7 03       	nop

800096e0 <_fwalk_reent>:
800096e0:	d4 31       	pushm	r0-r7,lr
800096e2:	30 05       	mov	r5,0
800096e4:	18 93       	mov	r3,r12
800096e6:	16 90       	mov	r0,r11
800096e8:	0a 91       	mov	r1,r5
800096ea:	fe b0 fc 9f 	rcall	80009028 <__sfp_lock_acquire>
800096ee:	3f f2       	mov	r2,-1
800096f0:	e6 c7 ff 28 	sub	r7,r3,-216
800096f4:	c1 78       	rjmp	80009722 <_fwalk_reent+0x42>
800096f6:	6e 26       	ld.w	r6,r7[0x8]
800096f8:	6e 14       	ld.w	r4,r7[0x4]
800096fa:	2f 46       	sub	r6,-12
800096fc:	c0 d8       	rjmp	80009716 <_fwalk_reent+0x36>
800096fe:	8c 08       	ld.sh	r8,r6[0x0]
80009700:	e2 08 19 00 	cp.h	r8,r1
80009704:	c0 80       	breq	80009714 <_fwalk_reent+0x34>
80009706:	8c 18       	ld.sh	r8,r6[0x2]
80009708:	e4 08 19 00 	cp.h	r8,r2
8000970c:	c0 40       	breq	80009714 <_fwalk_reent+0x34>
8000970e:	06 9c       	mov	r12,r3
80009710:	5d 10       	icall	r0
80009712:	18 45       	or	r5,r12
80009714:	2a 46       	sub	r6,-92
80009716:	20 14       	sub	r4,1
80009718:	ec cb 00 0c 	sub	r11,r6,12
8000971c:	58 04       	cp.w	r4,0
8000971e:	cf 04       	brge	800096fe <_fwalk_reent+0x1e>
80009720:	6e 07       	ld.w	r7,r7[0x0]
80009722:	58 07       	cp.w	r7,0
80009724:	ce 91       	brne	800096f6 <_fwalk_reent+0x16>
80009726:	fe b0 fc 82 	rcall	8000902a <__sfp_lock_release>
8000972a:	0a 9c       	mov	r12,r5
8000972c:	d8 32       	popm	r0-r7,pc
8000972e:	d7 03       	nop

80009730 <_fwalk>:
80009730:	d4 31       	pushm	r0-r7,lr
80009732:	30 05       	mov	r5,0
80009734:	16 91       	mov	r1,r11
80009736:	f8 c7 ff 28 	sub	r7,r12,-216
8000973a:	0a 92       	mov	r2,r5
8000973c:	fe b0 fc 76 	rcall	80009028 <__sfp_lock_acquire>
80009740:	3f f3       	mov	r3,-1
80009742:	c1 68       	rjmp	8000976e <_fwalk+0x3e>
80009744:	6e 26       	ld.w	r6,r7[0x8]
80009746:	6e 14       	ld.w	r4,r7[0x4]
80009748:	2f 46       	sub	r6,-12
8000974a:	c0 c8       	rjmp	80009762 <_fwalk+0x32>
8000974c:	8c 08       	ld.sh	r8,r6[0x0]
8000974e:	e4 08 19 00 	cp.h	r8,r2
80009752:	c0 70       	breq	80009760 <_fwalk+0x30>
80009754:	8c 18       	ld.sh	r8,r6[0x2]
80009756:	e6 08 19 00 	cp.h	r8,r3
8000975a:	c0 30       	breq	80009760 <_fwalk+0x30>
8000975c:	5d 11       	icall	r1
8000975e:	18 45       	or	r5,r12
80009760:	2a 46       	sub	r6,-92
80009762:	20 14       	sub	r4,1
80009764:	ec cc 00 0c 	sub	r12,r6,12
80009768:	58 04       	cp.w	r4,0
8000976a:	cf 14       	brge	8000974c <_fwalk+0x1c>
8000976c:	6e 07       	ld.w	r7,r7[0x0]
8000976e:	58 07       	cp.w	r7,0
80009770:	ce a1       	brne	80009744 <_fwalk+0x14>
80009772:	fe b0 fc 5c 	rcall	8000902a <__sfp_lock_release>
80009776:	0a 9c       	mov	r12,r5
80009778:	d8 32       	popm	r0-r7,pc
8000977a:	d7 03       	nop

8000977c <iswspace>:
8000977c:	e0 4c 00 ff 	cp.w	r12,255
80009780:	e0 88 00 03 	brls	80009786 <iswspace+0xa>
80009784:	5e fd       	retal	0
80009786:	e0 68 01 98 	mov	r8,408
8000978a:	70 08       	ld.w	r8,r8[0x0]
8000978c:	f0 0c 07 0c 	ld.ub	r12,r8[r12]
80009790:	e2 1c 00 08 	andl	r12,0x8,COH
80009794:	5e fc       	retal	r12
80009796:	d7 03       	nop

80009798 <_localeconv_r>:
80009798:	fe cc b8 74 	sub	r12,pc,-18316
8000979c:	5e fc       	retal	r12
8000979e:	d7 03       	nop

800097a0 <__smakebuf_r>:
800097a0:	d4 21       	pushm	r4-r7,lr
800097a2:	20 fd       	sub	sp,60
800097a4:	96 68       	ld.sh	r8,r11[0xc]
800097a6:	16 97       	mov	r7,r11
800097a8:	18 96       	mov	r6,r12
800097aa:	e2 18 00 02 	andl	r8,0x2,COH
800097ae:	c3 c1       	brne	80009826 <__smakebuf_r+0x86>
800097b0:	96 7b       	ld.sh	r11,r11[0xe]
800097b2:	f0 0b 19 00 	cp.h	r11,r8
800097b6:	c0 55       	brlt	800097c0 <__smakebuf_r+0x20>
800097b8:	1a 9a       	mov	r10,sp
800097ba:	e0 a0 14 3d 	rcall	8000c034 <_fstat_r>
800097be:	c0 f4       	brge	800097dc <__smakebuf_r+0x3c>
800097c0:	8e 65       	ld.sh	r5,r7[0xc]
800097c2:	0a 98       	mov	r8,r5
800097c4:	ab b8       	sbr	r8,0xb
800097c6:	e2 15 00 80 	andl	r5,0x80,COH
800097ca:	ae 68       	st.h	r7[0xc],r8
800097cc:	30 04       	mov	r4,0
800097ce:	e0 68 04 00 	mov	r8,1024
800097d2:	f9 b5 01 40 	movne	r5,64
800097d6:	f0 05 17 00 	moveq	r5,r8
800097da:	c1 c8       	rjmp	80009812 <__smakebuf_r+0x72>
800097dc:	40 18       	lddsp	r8,sp[0x4]
800097de:	e2 18 f0 00 	andl	r8,0xf000,COH
800097e2:	e0 48 20 00 	cp.w	r8,8192
800097e6:	5f 04       	sreq	r4
800097e8:	e0 48 80 00 	cp.w	r8,32768
800097ec:	c0 e1       	brne	80009808 <__smakebuf_r+0x68>
800097ee:	6e b9       	ld.w	r9,r7[0x2c]
800097f0:	fe c8 ed 90 	sub	r8,pc,-4720
800097f4:	10 39       	cp.w	r9,r8
800097f6:	c0 91       	brne	80009808 <__smakebuf_r+0x68>
800097f8:	8e 68       	ld.sh	r8,r7[0xc]
800097fa:	e0 65 04 00 	mov	r5,1024
800097fe:	ab a8       	sbr	r8,0xa
80009800:	ef 45 00 50 	st.w	r7[80],r5
80009804:	ae 68       	st.h	r7[0xc],r8
80009806:	c0 68       	rjmp	80009812 <__smakebuf_r+0x72>
80009808:	8e 68       	ld.sh	r8,r7[0xc]
8000980a:	e0 65 04 00 	mov	r5,1024
8000980e:	ab b8       	sbr	r8,0xb
80009810:	ae 68       	st.h	r7[0xc],r8
80009812:	0a 9b       	mov	r11,r5
80009814:	0c 9c       	mov	r12,r6
80009816:	c2 bc       	rcall	8000986c <_malloc_r>
80009818:	8e 68       	ld.sh	r8,r7[0xc]
8000981a:	c0 d1       	brne	80009834 <__smakebuf_r+0x94>
8000981c:	ed b8 00 09 	bld	r8,0x9
80009820:	c1 b0       	breq	80009856 <__smakebuf_r+0xb6>
80009822:	a1 b8       	sbr	r8,0x1
80009824:	ae 68       	st.h	r7[0xc],r8
80009826:	ee c8 ff b9 	sub	r8,r7,-71
8000982a:	8f 48       	st.w	r7[0x10],r8
8000982c:	8f 08       	st.w	r7[0x0],r8
8000982e:	30 18       	mov	r8,1
80009830:	8f 58       	st.w	r7[0x14],r8
80009832:	c1 28       	rjmp	80009856 <__smakebuf_r+0xb6>
80009834:	a7 b8       	sbr	r8,0x7
80009836:	8f 4c       	st.w	r7[0x10],r12
80009838:	ae 68       	st.h	r7[0xc],r8
8000983a:	8f 55       	st.w	r7[0x14],r5
8000983c:	fe c8 08 10 	sub	r8,pc,2064
80009840:	8f 0c       	st.w	r7[0x0],r12
80009842:	8d a8       	st.w	r6[0x28],r8
80009844:	58 04       	cp.w	r4,0
80009846:	c0 80       	breq	80009856 <__smakebuf_r+0xb6>
80009848:	8e 7c       	ld.sh	r12,r7[0xe]
8000984a:	e0 a0 12 45 	rcall	8000bcd4 <isatty>
8000984e:	c0 40       	breq	80009856 <__smakebuf_r+0xb6>
80009850:	8e 68       	ld.sh	r8,r7[0xc]
80009852:	a1 a8       	sbr	r8,0x0
80009854:	ae 68       	st.h	r7[0xc],r8
80009856:	2f 1d       	sub	sp,-60
80009858:	d8 22       	popm	r4-r7,pc
8000985a:	d7 03       	nop

8000985c <malloc>:
8000985c:	d4 01       	pushm	lr
8000985e:	e0 68 01 94 	mov	r8,404
80009862:	18 9b       	mov	r11,r12
80009864:	70 0c       	ld.w	r12,r8[0x0]
80009866:	c0 3c       	rcall	8000986c <_malloc_r>
80009868:	d8 02       	popm	pc
8000986a:	d7 03       	nop

8000986c <_malloc_r>:
8000986c:	d4 31       	pushm	r0-r7,lr
8000986e:	f6 c8 ff f5 	sub	r8,r11,-11
80009872:	18 95       	mov	r5,r12
80009874:	10 97       	mov	r7,r8
80009876:	e0 17 ff f8 	andl	r7,0xfff8
8000987a:	59 68       	cp.w	r8,22
8000987c:	f9 b7 08 10 	movls	r7,16
80009880:	16 37       	cp.w	r7,r11
80009882:	5f 38       	srlo	r8
80009884:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80009888:	c0 50       	breq	80009892 <_malloc_r+0x26>
8000988a:	30 c8       	mov	r8,12
8000988c:	99 38       	st.w	r12[0xc],r8
8000988e:	e0 8f 01 f7 	bral	80009c7c <_malloc_r+0x410>
80009892:	e0 a0 02 5d 	rcall	80009d4c <__malloc_lock>
80009896:	e0 47 01 f7 	cp.w	r7,503
8000989a:	e0 8b 00 1d 	brhi	800098d4 <_malloc_r+0x68>
8000989e:	ee 03 16 03 	lsr	r3,r7,0x3
800098a2:	e0 68 01 a0 	mov	r8,416
800098a6:	f0 03 00 38 	add	r8,r8,r3<<0x3
800098aa:	70 36       	ld.w	r6,r8[0xc]
800098ac:	10 36       	cp.w	r6,r8
800098ae:	c0 61       	brne	800098ba <_malloc_r+0x4e>
800098b0:	ec c8 ff f8 	sub	r8,r6,-8
800098b4:	70 36       	ld.w	r6,r8[0xc]
800098b6:	10 36       	cp.w	r6,r8
800098b8:	c0 c0       	breq	800098d0 <_malloc_r+0x64>
800098ba:	6c 18       	ld.w	r8,r6[0x4]
800098bc:	e0 18 ff fc 	andl	r8,0xfffc
800098c0:	6c 3a       	ld.w	r10,r6[0xc]
800098c2:	ec 08 00 09 	add	r9,r6,r8
800098c6:	0a 9c       	mov	r12,r5
800098c8:	6c 28       	ld.w	r8,r6[0x8]
800098ca:	95 28       	st.w	r10[0x8],r8
800098cc:	91 3a       	st.w	r8[0xc],r10
800098ce:	c4 78       	rjmp	8000995c <_malloc_r+0xf0>
800098d0:	2f e3       	sub	r3,-2
800098d2:	c4 d8       	rjmp	8000996c <_malloc_r+0x100>
800098d4:	ee 03 16 09 	lsr	r3,r7,0x9
800098d8:	c0 41       	brne	800098e0 <_malloc_r+0x74>
800098da:	ee 03 16 03 	lsr	r3,r7,0x3
800098de:	c2 68       	rjmp	8000992a <_malloc_r+0xbe>
800098e0:	58 43       	cp.w	r3,4
800098e2:	e0 8b 00 06 	brhi	800098ee <_malloc_r+0x82>
800098e6:	ee 03 16 06 	lsr	r3,r7,0x6
800098ea:	2c 83       	sub	r3,-56
800098ec:	c1 f8       	rjmp	8000992a <_malloc_r+0xbe>
800098ee:	59 43       	cp.w	r3,20
800098f0:	e0 8b 00 04 	brhi	800098f8 <_malloc_r+0x8c>
800098f4:	2a 53       	sub	r3,-91
800098f6:	c1 a8       	rjmp	8000992a <_malloc_r+0xbe>
800098f8:	e0 43 00 54 	cp.w	r3,84
800098fc:	e0 8b 00 06 	brhi	80009908 <_malloc_r+0x9c>
80009900:	ee 03 16 0c 	lsr	r3,r7,0xc
80009904:	29 23       	sub	r3,-110
80009906:	c1 28       	rjmp	8000992a <_malloc_r+0xbe>
80009908:	e0 43 01 54 	cp.w	r3,340
8000990c:	e0 8b 00 06 	brhi	80009918 <_malloc_r+0xac>
80009910:	ee 03 16 0f 	lsr	r3,r7,0xf
80009914:	28 93       	sub	r3,-119
80009916:	c0 a8       	rjmp	8000992a <_malloc_r+0xbe>
80009918:	e0 43 05 54 	cp.w	r3,1364
8000991c:	e0 88 00 04 	brls	80009924 <_malloc_r+0xb8>
80009920:	37 e3       	mov	r3,126
80009922:	c0 48       	rjmp	8000992a <_malloc_r+0xbe>
80009924:	ee 03 16 12 	lsr	r3,r7,0x12
80009928:	28 43       	sub	r3,-124
8000992a:	e0 6a 01 a0 	mov	r10,416
8000992e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80009932:	74 36       	ld.w	r6,r10[0xc]
80009934:	c1 98       	rjmp	80009966 <_malloc_r+0xfa>
80009936:	6c 19       	ld.w	r9,r6[0x4]
80009938:	e0 19 ff fc 	andl	r9,0xfffc
8000993c:	f2 07 01 0b 	sub	r11,r9,r7
80009940:	58 fb       	cp.w	r11,15
80009942:	e0 8a 00 04 	brle	8000994a <_malloc_r+0xde>
80009946:	20 13       	sub	r3,1
80009948:	c1 18       	rjmp	8000996a <_malloc_r+0xfe>
8000994a:	6c 38       	ld.w	r8,r6[0xc]
8000994c:	58 0b       	cp.w	r11,0
8000994e:	c0 b5       	brlt	80009964 <_malloc_r+0xf8>
80009950:	6c 2a       	ld.w	r10,r6[0x8]
80009952:	ec 09 00 09 	add	r9,r6,r9
80009956:	0a 9c       	mov	r12,r5
80009958:	91 2a       	st.w	r8[0x8],r10
8000995a:	95 38       	st.w	r10[0xc],r8
8000995c:	72 18       	ld.w	r8,r9[0x4]
8000995e:	a1 a8       	sbr	r8,0x0
80009960:	93 18       	st.w	r9[0x4],r8
80009962:	cb c8       	rjmp	80009ada <_malloc_r+0x26e>
80009964:	10 96       	mov	r6,r8
80009966:	14 36       	cp.w	r6,r10
80009968:	ce 71       	brne	80009936 <_malloc_r+0xca>
8000996a:	2f f3       	sub	r3,-1
8000996c:	e0 6a 01 a0 	mov	r10,416
80009970:	f4 cc ff f8 	sub	r12,r10,-8
80009974:	78 26       	ld.w	r6,r12[0x8]
80009976:	18 36       	cp.w	r6,r12
80009978:	c6 c0       	breq	80009a50 <_malloc_r+0x1e4>
8000997a:	6c 19       	ld.w	r9,r6[0x4]
8000997c:	e0 19 ff fc 	andl	r9,0xfffc
80009980:	f2 07 01 08 	sub	r8,r9,r7
80009984:	58 f8       	cp.w	r8,15
80009986:	e0 89 00 8f 	brgt	80009aa4 <_malloc_r+0x238>
8000998a:	99 3c       	st.w	r12[0xc],r12
8000998c:	99 2c       	st.w	r12[0x8],r12
8000998e:	58 08       	cp.w	r8,0
80009990:	c0 55       	brlt	8000999a <_malloc_r+0x12e>
80009992:	ec 09 00 09 	add	r9,r6,r9
80009996:	0a 9c       	mov	r12,r5
80009998:	ce 2b       	rjmp	8000995c <_malloc_r+0xf0>
8000999a:	e0 49 01 ff 	cp.w	r9,511
8000999e:	e0 8b 00 13 	brhi	800099c4 <_malloc_r+0x158>
800099a2:	a3 99       	lsr	r9,0x3
800099a4:	f4 09 00 38 	add	r8,r10,r9<<0x3
800099a8:	70 2b       	ld.w	r11,r8[0x8]
800099aa:	8d 38       	st.w	r6[0xc],r8
800099ac:	8d 2b       	st.w	r6[0x8],r11
800099ae:	97 36       	st.w	r11[0xc],r6
800099b0:	91 26       	st.w	r8[0x8],r6
800099b2:	a3 49       	asr	r9,0x2
800099b4:	74 18       	ld.w	r8,r10[0x4]
800099b6:	30 1b       	mov	r11,1
800099b8:	f6 09 09 49 	lsl	r9,r11,r9
800099bc:	f1 e9 10 09 	or	r9,r8,r9
800099c0:	95 19       	st.w	r10[0x4],r9
800099c2:	c4 78       	rjmp	80009a50 <_malloc_r+0x1e4>
800099c4:	f2 0a 16 09 	lsr	r10,r9,0x9
800099c8:	58 4a       	cp.w	r10,4
800099ca:	e0 8b 00 07 	brhi	800099d8 <_malloc_r+0x16c>
800099ce:	f2 0a 16 06 	lsr	r10,r9,0x6
800099d2:	2c 8a       	sub	r10,-56
800099d4:	c2 08       	rjmp	80009a14 <_malloc_r+0x1a8>
800099d6:	d7 03       	nop
800099d8:	59 4a       	cp.w	r10,20
800099da:	e0 8b 00 04 	brhi	800099e2 <_malloc_r+0x176>
800099de:	2a 5a       	sub	r10,-91
800099e0:	c1 a8       	rjmp	80009a14 <_malloc_r+0x1a8>
800099e2:	e0 4a 00 54 	cp.w	r10,84
800099e6:	e0 8b 00 06 	brhi	800099f2 <_malloc_r+0x186>
800099ea:	f2 0a 16 0c 	lsr	r10,r9,0xc
800099ee:	29 2a       	sub	r10,-110
800099f0:	c1 28       	rjmp	80009a14 <_malloc_r+0x1a8>
800099f2:	e0 4a 01 54 	cp.w	r10,340
800099f6:	e0 8b 00 06 	brhi	80009a02 <_malloc_r+0x196>
800099fa:	f2 0a 16 0f 	lsr	r10,r9,0xf
800099fe:	28 9a       	sub	r10,-119
80009a00:	c0 a8       	rjmp	80009a14 <_malloc_r+0x1a8>
80009a02:	e0 4a 05 54 	cp.w	r10,1364
80009a06:	e0 88 00 04 	brls	80009a0e <_malloc_r+0x1a2>
80009a0a:	37 ea       	mov	r10,126
80009a0c:	c0 48       	rjmp	80009a14 <_malloc_r+0x1a8>
80009a0e:	f2 0a 16 12 	lsr	r10,r9,0x12
80009a12:	28 4a       	sub	r10,-124
80009a14:	e0 6b 01 a0 	mov	r11,416
80009a18:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80009a1c:	68 28       	ld.w	r8,r4[0x8]
80009a1e:	08 38       	cp.w	r8,r4
80009a20:	c0 e1       	brne	80009a3c <_malloc_r+0x1d0>
80009a22:	76 19       	ld.w	r9,r11[0x4]
80009a24:	a3 4a       	asr	r10,0x2
80009a26:	30 1e       	mov	lr,1
80009a28:	fc 0a 09 4a 	lsl	r10,lr,r10
80009a2c:	f3 ea 10 0a 	or	r10,r9,r10
80009a30:	10 99       	mov	r9,r8
80009a32:	97 1a       	st.w	r11[0x4],r10
80009a34:	c0 a8       	rjmp	80009a48 <_malloc_r+0x1dc>
80009a36:	70 28       	ld.w	r8,r8[0x8]
80009a38:	08 38       	cp.w	r8,r4
80009a3a:	c0 60       	breq	80009a46 <_malloc_r+0x1da>
80009a3c:	70 1a       	ld.w	r10,r8[0x4]
80009a3e:	e0 1a ff fc 	andl	r10,0xfffc
80009a42:	14 39       	cp.w	r9,r10
80009a44:	cf 93       	brcs	80009a36 <_malloc_r+0x1ca>
80009a46:	70 39       	ld.w	r9,r8[0xc]
80009a48:	8d 39       	st.w	r6[0xc],r9
80009a4a:	8d 28       	st.w	r6[0x8],r8
80009a4c:	91 36       	st.w	r8[0xc],r6
80009a4e:	93 26       	st.w	r9[0x8],r6
80009a50:	e6 08 14 02 	asr	r8,r3,0x2
80009a54:	30 1b       	mov	r11,1
80009a56:	e0 64 01 a0 	mov	r4,416
80009a5a:	f6 08 09 4b 	lsl	r11,r11,r8
80009a5e:	68 18       	ld.w	r8,r4[0x4]
80009a60:	10 3b       	cp.w	r11,r8
80009a62:	e0 8b 00 69 	brhi	80009b34 <_malloc_r+0x2c8>
80009a66:	f7 e8 00 09 	and	r9,r11,r8
80009a6a:	c0 b1       	brne	80009a80 <_malloc_r+0x214>
80009a6c:	e0 13 ff fc 	andl	r3,0xfffc
80009a70:	a1 7b       	lsl	r11,0x1
80009a72:	2f c3       	sub	r3,-4
80009a74:	c0 38       	rjmp	80009a7a <_malloc_r+0x20e>
80009a76:	2f c3       	sub	r3,-4
80009a78:	a1 7b       	lsl	r11,0x1
80009a7a:	f7 e8 00 09 	and	r9,r11,r8
80009a7e:	cf c0       	breq	80009a76 <_malloc_r+0x20a>
80009a80:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80009a84:	06 92       	mov	r2,r3
80009a86:	1c 91       	mov	r1,lr
80009a88:	62 36       	ld.w	r6,r1[0xc]
80009a8a:	c2 d8       	rjmp	80009ae4 <_malloc_r+0x278>
80009a8c:	6c 1a       	ld.w	r10,r6[0x4]
80009a8e:	e0 1a ff fc 	andl	r10,0xfffc
80009a92:	f4 07 01 08 	sub	r8,r10,r7
80009a96:	58 f8       	cp.w	r8,15
80009a98:	e0 8a 00 15 	brle	80009ac2 <_malloc_r+0x256>
80009a9c:	6c 3a       	ld.w	r10,r6[0xc]
80009a9e:	6c 29       	ld.w	r9,r6[0x8]
80009aa0:	95 29       	st.w	r10[0x8],r9
80009aa2:	93 3a       	st.w	r9[0xc],r10
80009aa4:	0e 99       	mov	r9,r7
80009aa6:	ec 07 00 07 	add	r7,r6,r7
80009aaa:	a1 a9       	sbr	r9,0x0
80009aac:	99 37       	st.w	r12[0xc],r7
80009aae:	99 27       	st.w	r12[0x8],r7
80009ab0:	8d 19       	st.w	r6[0x4],r9
80009ab2:	ee 08 09 08 	st.w	r7[r8],r8
80009ab6:	8f 2c       	st.w	r7[0x8],r12
80009ab8:	8f 3c       	st.w	r7[0xc],r12
80009aba:	a1 a8       	sbr	r8,0x0
80009abc:	0a 9c       	mov	r12,r5
80009abe:	8f 18       	st.w	r7[0x4],r8
80009ac0:	c0 d8       	rjmp	80009ada <_malloc_r+0x26e>
80009ac2:	6c 39       	ld.w	r9,r6[0xc]
80009ac4:	58 08       	cp.w	r8,0
80009ac6:	c0 e5       	brlt	80009ae2 <_malloc_r+0x276>
80009ac8:	ec 0a 00 0a 	add	r10,r6,r10
80009acc:	74 18       	ld.w	r8,r10[0x4]
80009ace:	a1 a8       	sbr	r8,0x0
80009ad0:	0a 9c       	mov	r12,r5
80009ad2:	95 18       	st.w	r10[0x4],r8
80009ad4:	6c 28       	ld.w	r8,r6[0x8]
80009ad6:	93 28       	st.w	r9[0x8],r8
80009ad8:	91 39       	st.w	r8[0xc],r9
80009ada:	c3 ad       	rcall	80009d4e <__malloc_unlock>
80009adc:	ec cc ff f8 	sub	r12,r6,-8
80009ae0:	d8 32       	popm	r0-r7,pc
80009ae2:	12 96       	mov	r6,r9
80009ae4:	02 36       	cp.w	r6,r1
80009ae6:	cd 31       	brne	80009a8c <_malloc_r+0x220>
80009ae8:	2f f2       	sub	r2,-1
80009aea:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80009aee:	c0 30       	breq	80009af4 <_malloc_r+0x288>
80009af0:	2f 81       	sub	r1,-8
80009af2:	cc bb       	rjmp	80009a88 <_malloc_r+0x21c>
80009af4:	1c 98       	mov	r8,lr
80009af6:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80009afa:	c0 81       	brne	80009b0a <_malloc_r+0x29e>
80009afc:	68 19       	ld.w	r9,r4[0x4]
80009afe:	f6 08 11 ff 	rsub	r8,r11,-1
80009b02:	f3 e8 00 08 	and	r8,r9,r8
80009b06:	89 18       	st.w	r4[0x4],r8
80009b08:	c0 78       	rjmp	80009b16 <_malloc_r+0x2aa>
80009b0a:	f0 c9 00 08 	sub	r9,r8,8
80009b0e:	20 13       	sub	r3,1
80009b10:	70 08       	ld.w	r8,r8[0x0]
80009b12:	12 38       	cp.w	r8,r9
80009b14:	cf 10       	breq	80009af6 <_malloc_r+0x28a>
80009b16:	a1 7b       	lsl	r11,0x1
80009b18:	68 18       	ld.w	r8,r4[0x4]
80009b1a:	10 3b       	cp.w	r11,r8
80009b1c:	e0 8b 00 0c 	brhi	80009b34 <_malloc_r+0x2c8>
80009b20:	58 0b       	cp.w	r11,0
80009b22:	c0 90       	breq	80009b34 <_malloc_r+0x2c8>
80009b24:	04 93       	mov	r3,r2
80009b26:	c0 38       	rjmp	80009b2c <_malloc_r+0x2c0>
80009b28:	2f c3       	sub	r3,-4
80009b2a:	a1 7b       	lsl	r11,0x1
80009b2c:	f7 e8 00 09 	and	r9,r11,r8
80009b30:	ca 81       	brne	80009a80 <_malloc_r+0x214>
80009b32:	cf bb       	rjmp	80009b28 <_malloc_r+0x2bc>
80009b34:	68 23       	ld.w	r3,r4[0x8]
80009b36:	66 12       	ld.w	r2,r3[0x4]
80009b38:	e0 12 ff fc 	andl	r2,0xfffc
80009b3c:	0e 32       	cp.w	r2,r7
80009b3e:	5f 39       	srlo	r9
80009b40:	e4 07 01 08 	sub	r8,r2,r7
80009b44:	58 f8       	cp.w	r8,15
80009b46:	5f aa       	srle	r10
80009b48:	f5 e9 10 09 	or	r9,r10,r9
80009b4c:	e0 80 00 9a 	breq	80009c80 <_malloc_r+0x414>
80009b50:	e0 68 09 dc 	mov	r8,2524
80009b54:	70 01       	ld.w	r1,r8[0x0]
80009b56:	e0 68 05 ac 	mov	r8,1452
80009b5a:	2f 01       	sub	r1,-16
80009b5c:	70 08       	ld.w	r8,r8[0x0]
80009b5e:	0e 01       	add	r1,r7
80009b60:	5b f8       	cp.w	r8,-1
80009b62:	c0 40       	breq	80009b6a <_malloc_r+0x2fe>
80009b64:	28 11       	sub	r1,-127
80009b66:	e0 11 ff 80 	andl	r1,0xff80
80009b6a:	02 9b       	mov	r11,r1
80009b6c:	0a 9c       	mov	r12,r5
80009b6e:	e0 a0 06 f9 	rcall	8000a960 <_sbrk_r>
80009b72:	18 96       	mov	r6,r12
80009b74:	5b fc       	cp.w	r12,-1
80009b76:	c7 50       	breq	80009c60 <_malloc_r+0x3f4>
80009b78:	e6 02 00 08 	add	r8,r3,r2
80009b7c:	10 3c       	cp.w	r12,r8
80009b7e:	c0 32       	brcc	80009b84 <_malloc_r+0x318>
80009b80:	08 33       	cp.w	r3,r4
80009b82:	c6 f1       	brne	80009c60 <_malloc_r+0x3f4>
80009b84:	e0 6a 09 e0 	mov	r10,2528
80009b88:	74 09       	ld.w	r9,r10[0x0]
80009b8a:	e2 09 00 09 	add	r9,r1,r9
80009b8e:	95 09       	st.w	r10[0x0],r9
80009b90:	10 36       	cp.w	r6,r8
80009b92:	c0 a1       	brne	80009ba6 <_malloc_r+0x33a>
80009b94:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80009b98:	c0 71       	brne	80009ba6 <_malloc_r+0x33a>
80009b9a:	e2 02 00 02 	add	r2,r1,r2
80009b9e:	68 28       	ld.w	r8,r4[0x8]
80009ba0:	a1 a2       	sbr	r2,0x0
80009ba2:	91 12       	st.w	r8[0x4],r2
80009ba4:	c4 f8       	rjmp	80009c42 <_malloc_r+0x3d6>
80009ba6:	e0 6a 05 ac 	mov	r10,1452
80009baa:	74 0b       	ld.w	r11,r10[0x0]
80009bac:	5b fb       	cp.w	r11,-1
80009bae:	c0 31       	brne	80009bb4 <_malloc_r+0x348>
80009bb0:	95 06       	st.w	r10[0x0],r6
80009bb2:	c0 78       	rjmp	80009bc0 <_malloc_r+0x354>
80009bb4:	ec 09 00 09 	add	r9,r6,r9
80009bb8:	e0 6a 09 e0 	mov	r10,2528
80009bbc:	10 19       	sub	r9,r8
80009bbe:	95 09       	st.w	r10[0x0],r9
80009bc0:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80009bc4:	f0 09 11 08 	rsub	r9,r8,8
80009bc8:	58 08       	cp.w	r8,0
80009bca:	f2 08 17 10 	movne	r8,r9
80009bce:	ed d8 e1 06 	addne	r6,r6,r8
80009bd2:	28 08       	sub	r8,-128
80009bd4:	ec 01 00 01 	add	r1,r6,r1
80009bd8:	0a 9c       	mov	r12,r5
80009bda:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
80009bde:	f0 01 01 01 	sub	r1,r8,r1
80009be2:	02 9b       	mov	r11,r1
80009be4:	e0 a0 06 be 	rcall	8000a960 <_sbrk_r>
80009be8:	e0 68 09 e0 	mov	r8,2528
80009bec:	5b fc       	cp.w	r12,-1
80009bee:	ec 0c 17 00 	moveq	r12,r6
80009bf2:	f9 b1 00 00 	moveq	r1,0
80009bf6:	70 09       	ld.w	r9,r8[0x0]
80009bf8:	0c 1c       	sub	r12,r6
80009bfa:	89 26       	st.w	r4[0x8],r6
80009bfc:	02 0c       	add	r12,r1
80009bfe:	12 01       	add	r1,r9
80009c00:	a1 ac       	sbr	r12,0x0
80009c02:	91 01       	st.w	r8[0x0],r1
80009c04:	8d 1c       	st.w	r6[0x4],r12
80009c06:	08 33       	cp.w	r3,r4
80009c08:	c1 d0       	breq	80009c42 <_malloc_r+0x3d6>
80009c0a:	58 f2       	cp.w	r2,15
80009c0c:	e0 8b 00 05 	brhi	80009c16 <_malloc_r+0x3aa>
80009c10:	30 18       	mov	r8,1
80009c12:	8d 18       	st.w	r6[0x4],r8
80009c14:	c2 68       	rjmp	80009c60 <_malloc_r+0x3f4>
80009c16:	30 59       	mov	r9,5
80009c18:	20 c2       	sub	r2,12
80009c1a:	e0 12 ff f8 	andl	r2,0xfff8
80009c1e:	e6 02 00 08 	add	r8,r3,r2
80009c22:	91 29       	st.w	r8[0x8],r9
80009c24:	91 19       	st.w	r8[0x4],r9
80009c26:	66 18       	ld.w	r8,r3[0x4]
80009c28:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009c2c:	e5 e8 10 08 	or	r8,r2,r8
80009c30:	87 18       	st.w	r3[0x4],r8
80009c32:	58 f2       	cp.w	r2,15
80009c34:	e0 88 00 07 	brls	80009c42 <_malloc_r+0x3d6>
80009c38:	e6 cb ff f8 	sub	r11,r3,-8
80009c3c:	0a 9c       	mov	r12,r5
80009c3e:	fe b0 fb 3b 	rcall	800092b4 <_free_r>
80009c42:	e0 69 09 d8 	mov	r9,2520
80009c46:	72 0a       	ld.w	r10,r9[0x0]
80009c48:	e0 68 09 e0 	mov	r8,2528
80009c4c:	70 08       	ld.w	r8,r8[0x0]
80009c4e:	14 38       	cp.w	r8,r10
80009c50:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80009c54:	e0 69 09 d4 	mov	r9,2516
80009c58:	72 0a       	ld.w	r10,r9[0x0]
80009c5a:	14 38       	cp.w	r8,r10
80009c5c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80009c60:	68 28       	ld.w	r8,r4[0x8]
80009c62:	70 18       	ld.w	r8,r8[0x4]
80009c64:	e0 18 ff fc 	andl	r8,0xfffc
80009c68:	0e 38       	cp.w	r8,r7
80009c6a:	5f 39       	srlo	r9
80009c6c:	0e 18       	sub	r8,r7
80009c6e:	58 f8       	cp.w	r8,15
80009c70:	5f aa       	srle	r10
80009c72:	f5 e9 10 09 	or	r9,r10,r9
80009c76:	c0 50       	breq	80009c80 <_malloc_r+0x414>
80009c78:	0a 9c       	mov	r12,r5
80009c7a:	c6 ac       	rcall	80009d4e <__malloc_unlock>
80009c7c:	d8 3a       	popm	r0-r7,pc,r12=0
80009c7e:	d7 03       	nop
80009c80:	68 26       	ld.w	r6,r4[0x8]
80009c82:	a1 a8       	sbr	r8,0x0
80009c84:	0e 99       	mov	r9,r7
80009c86:	a1 a9       	sbr	r9,0x0
80009c88:	8d 19       	st.w	r6[0x4],r9
80009c8a:	ec 07 00 07 	add	r7,r6,r7
80009c8e:	0a 9c       	mov	r12,r5
80009c90:	89 27       	st.w	r4[0x8],r7
80009c92:	8f 18       	st.w	r7[0x4],r8
80009c94:	c5 dc       	rcall	80009d4e <__malloc_unlock>
80009c96:	ec cc ff f8 	sub	r12,r6,-8
80009c9a:	d8 32       	popm	r0-r7,pc

80009c9c <_mbrtowc_r>:
80009c9c:	d4 21       	pushm	r4-r7,lr
80009c9e:	18 97       	mov	r7,r12
80009ca0:	10 96       	mov	r6,r8
80009ca2:	58 0a       	cp.w	r10,0
80009ca4:	c0 51       	brne	80009cae <_mbrtowc_r+0x12>
80009ca6:	14 9b       	mov	r11,r10
80009ca8:	30 19       	mov	r9,1
80009caa:	fe ca c0 72 	sub	r10,pc,-16270
80009cae:	c0 9c       	rcall	80009cc0 <_mbtowc_r>
80009cb0:	5b fc       	cp.w	r12,-1
80009cb2:	c0 61       	brne	80009cbe <_mbrtowc_r+0x22>
80009cb4:	30 08       	mov	r8,0
80009cb6:	8d 08       	st.w	r6[0x0],r8
80009cb8:	e0 68 00 8a 	mov	r8,138
80009cbc:	8f 38       	st.w	r7[0xc],r8
80009cbe:	d8 22       	popm	r4-r7,pc

80009cc0 <_mbtowc_r>:
80009cc0:	20 1d       	sub	sp,4
80009cc2:	58 09       	cp.w	r9,0
80009cc4:	5f 09       	sreq	r9
80009cc6:	58 0a       	cp.w	r10,0
80009cc8:	5f 18       	srne	r8
80009cca:	58 0b       	cp.w	r11,0
80009ccc:	fa 0b 17 00 	moveq	r11,sp
80009cd0:	f3 e8 00 08 	and	r8,r9,r8
80009cd4:	30 09       	mov	r9,0
80009cd6:	f2 08 18 00 	cp.b	r8,r9
80009cda:	c0 30       	breq	80009ce0 <_mbtowc_r+0x20>
80009cdc:	3f ec       	mov	r12,-2
80009cde:	c0 b8       	rjmp	80009cf4 <_mbtowc_r+0x34>
80009ce0:	58 0a       	cp.w	r10,0
80009ce2:	c0 31       	brne	80009ce8 <_mbtowc_r+0x28>
80009ce4:	14 9c       	mov	r12,r10
80009ce6:	c0 78       	rjmp	80009cf4 <_mbtowc_r+0x34>
80009ce8:	15 89       	ld.ub	r9,r10[0x0]
80009cea:	97 09       	st.w	r11[0x0],r9
80009cec:	15 89       	ld.ub	r9,r10[0x0]
80009cee:	f0 09 18 00 	cp.b	r9,r8
80009cf2:	5f 1c       	srne	r12
80009cf4:	2f fd       	sub	sp,-4
80009cf6:	5e fc       	retal	r12

80009cf8 <memchr>:
80009cf8:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80009cfc:	c0 68       	rjmp	80009d08 <memchr+0x10>
80009cfe:	20 1a       	sub	r10,1
80009d00:	19 88       	ld.ub	r8,r12[0x0]
80009d02:	16 38       	cp.w	r8,r11
80009d04:	5e 0c       	reteq	r12
80009d06:	2f fc       	sub	r12,-1
80009d08:	58 0a       	cp.w	r10,0
80009d0a:	cf a1       	brne	80009cfe <memchr+0x6>
80009d0c:	5e fa       	retal	r10

80009d0e <memmove>:
80009d0e:	d4 01       	pushm	lr
80009d10:	18 3b       	cp.w	r11,r12
80009d12:	c1 92       	brcc	80009d44 <memmove+0x36>
80009d14:	f6 0a 00 09 	add	r9,r11,r10
80009d18:	12 3c       	cp.w	r12,r9
80009d1a:	c1 52       	brcc	80009d44 <memmove+0x36>
80009d1c:	f8 0a 00 0b 	add	r11,r12,r10
80009d20:	30 08       	mov	r8,0
80009d22:	c0 68       	rjmp	80009d2e <memmove+0x20>
80009d24:	f2 08 07 0e 	ld.ub	lr,r9[r8]
80009d28:	20 1a       	sub	r10,1
80009d2a:	f6 08 0b 0e 	st.b	r11[r8],lr
80009d2e:	20 18       	sub	r8,1
80009d30:	58 0a       	cp.w	r10,0
80009d32:	cf 91       	brne	80009d24 <memmove+0x16>
80009d34:	d8 02       	popm	pc
80009d36:	f6 08 07 09 	ld.ub	r9,r11[r8]
80009d3a:	20 1a       	sub	r10,1
80009d3c:	f8 08 0b 09 	st.b	r12[r8],r9
80009d40:	2f f8       	sub	r8,-1
80009d42:	c0 28       	rjmp	80009d46 <memmove+0x38>
80009d44:	30 08       	mov	r8,0
80009d46:	58 0a       	cp.w	r10,0
80009d48:	cf 71       	brne	80009d36 <memmove+0x28>
80009d4a:	d8 02       	popm	pc

80009d4c <__malloc_lock>:
80009d4c:	5e fc       	retal	r12

80009d4e <__malloc_unlock>:
80009d4e:	5e fc       	retal	r12

80009d50 <__hi0bits>:
80009d50:	18 98       	mov	r8,r12
80009d52:	e0 1c 00 00 	andl	r12,0x0
80009d56:	f0 09 15 10 	lsl	r9,r8,0x10
80009d5a:	58 0c       	cp.w	r12,0
80009d5c:	f2 08 17 00 	moveq	r8,r9
80009d60:	f9 bc 00 10 	moveq	r12,16
80009d64:	f9 bc 01 00 	movne	r12,0
80009d68:	10 9a       	mov	r10,r8
80009d6a:	f0 09 15 08 	lsl	r9,r8,0x8
80009d6e:	e6 1a ff 00 	andh	r10,0xff00,COH
80009d72:	f7 bc 00 f8 	subeq	r12,-8
80009d76:	f2 08 17 00 	moveq	r8,r9
80009d7a:	10 9a       	mov	r10,r8
80009d7c:	f0 09 15 04 	lsl	r9,r8,0x4
80009d80:	e6 1a f0 00 	andh	r10,0xf000,COH
80009d84:	f7 bc 00 fc 	subeq	r12,-4
80009d88:	f2 08 17 00 	moveq	r8,r9
80009d8c:	10 9a       	mov	r10,r8
80009d8e:	f0 09 15 02 	lsl	r9,r8,0x2
80009d92:	e6 1a c0 00 	andh	r10,0xc000,COH
80009d96:	f7 bc 00 fe 	subeq	r12,-2
80009d9a:	f2 08 17 00 	moveq	r8,r9
80009d9e:	58 08       	cp.w	r8,0
80009da0:	5e 5c       	retlt	r12
80009da2:	ed b8 00 1e 	bld	r8,0x1e
80009da6:	f9 bc 01 20 	movne	r12,32
80009daa:	f7 bc 00 ff 	subeq	r12,-1
80009dae:	5e fc       	retal	r12

80009db0 <__lo0bits>:
80009db0:	18 99       	mov	r9,r12
80009db2:	78 08       	ld.w	r8,r12[0x0]
80009db4:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80009db8:	c1 50       	breq	80009de2 <__lo0bits+0x32>
80009dba:	ed b8 00 00 	bld	r8,0x0
80009dbe:	c0 21       	brne	80009dc2 <__lo0bits+0x12>
80009dc0:	5e fd       	retal	0
80009dc2:	10 9b       	mov	r11,r8
80009dc4:	f0 0a 16 01 	lsr	r10,r8,0x1
80009dc8:	e2 1b 00 02 	andl	r11,0x2,COH
80009dcc:	a3 88       	lsr	r8,0x2
80009dce:	58 0b       	cp.w	r11,0
80009dd0:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80009dd4:	f9 bc 01 01 	movne	r12,1
80009dd8:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80009ddc:	f9 bc 00 02 	moveq	r12,2
80009de0:	5e fc       	retal	r12
80009de2:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80009de6:	f0 0b 16 10 	lsr	r11,r8,0x10
80009dea:	58 0a       	cp.w	r10,0
80009dec:	f6 08 17 00 	moveq	r8,r11
80009df0:	f9 bc 00 10 	moveq	r12,16
80009df4:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80009df8:	f0 0a 16 08 	lsr	r10,r8,0x8
80009dfc:	58 0b       	cp.w	r11,0
80009dfe:	f7 bc 00 f8 	subeq	r12,-8
80009e02:	f4 08 17 00 	moveq	r8,r10
80009e06:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80009e0a:	f0 0a 16 04 	lsr	r10,r8,0x4
80009e0e:	58 0b       	cp.w	r11,0
80009e10:	f7 bc 00 fc 	subeq	r12,-4
80009e14:	f4 08 17 00 	moveq	r8,r10
80009e18:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80009e1c:	f0 0a 16 02 	lsr	r10,r8,0x2
80009e20:	58 0b       	cp.w	r11,0
80009e22:	f7 bc 00 fe 	subeq	r12,-2
80009e26:	f4 08 17 00 	moveq	r8,r10
80009e2a:	ed b8 00 00 	bld	r8,0x0
80009e2e:	c0 60       	breq	80009e3a <__lo0bits+0x8a>
80009e30:	a1 98       	lsr	r8,0x1
80009e32:	c0 31       	brne	80009e38 <__lo0bits+0x88>
80009e34:	32 0c       	mov	r12,32
80009e36:	5e fc       	retal	r12
80009e38:	2f fc       	sub	r12,-1
80009e3a:	93 08       	st.w	r9[0x0],r8
80009e3c:	5e fc       	retal	r12

80009e3e <__mcmp>:
80009e3e:	d4 01       	pushm	lr
80009e40:	18 98       	mov	r8,r12
80009e42:	76 49       	ld.w	r9,r11[0x10]
80009e44:	78 4c       	ld.w	r12,r12[0x10]
80009e46:	12 1c       	sub	r12,r9
80009e48:	c1 31       	brne	80009e6e <__mcmp+0x30>
80009e4a:	2f b9       	sub	r9,-5
80009e4c:	a3 69       	lsl	r9,0x2
80009e4e:	12 0b       	add	r11,r9
80009e50:	f0 09 00 09 	add	r9,r8,r9
80009e54:	2e c8       	sub	r8,-20
80009e56:	13 4e       	ld.w	lr,--r9
80009e58:	17 4a       	ld.w	r10,--r11
80009e5a:	14 3e       	cp.w	lr,r10
80009e5c:	c0 60       	breq	80009e68 <__mcmp+0x2a>
80009e5e:	f9 bc 03 ff 	movlo	r12,-1
80009e62:	f9 bc 02 01 	movhs	r12,1
80009e66:	d8 02       	popm	pc
80009e68:	10 39       	cp.w	r9,r8
80009e6a:	fe 9b ff f6 	brhi	80009e56 <__mcmp+0x18>
80009e6e:	d8 02       	popm	pc

80009e70 <__ulp>:
80009e70:	e6 1b 7f f0 	andh	r11,0x7ff0,COH
80009e74:	fc 18 fc c0 	movh	r8,0xfcc0
80009e78:	f6 08 00 08 	add	r8,r11,r8
80009e7c:	58 08       	cp.w	r8,0
80009e7e:	e0 8a 00 04 	brle	80009e86 <__ulp+0x16>
80009e82:	10 9b       	mov	r11,r8
80009e84:	c0 a8       	rjmp	80009e98 <__ulp+0x28>
80009e86:	5c 38       	neg	r8
80009e88:	b5 48       	asr	r8,0x14
80009e8a:	59 38       	cp.w	r8,19
80009e8c:	e0 89 00 08 	brgt	80009e9c <__ulp+0x2c>
80009e90:	e8 69 00 00 	mov	r9,524288
80009e94:	f2 08 08 4b 	asr	r11,r9,r8
80009e98:	30 0a       	mov	r10,0
80009e9a:	5e fc       	retal	r12
80009e9c:	21 48       	sub	r8,20
80009e9e:	59 e8       	cp.w	r8,30
80009ea0:	e0 8a 00 04 	brle	80009ea8 <__ulp+0x38>
80009ea4:	30 18       	mov	r8,1
80009ea6:	c0 68       	rjmp	80009eb2 <__ulp+0x42>
80009ea8:	f0 08 11 1f 	rsub	r8,r8,31
80009eac:	30 19       	mov	r9,1
80009eae:	f2 08 09 48 	lsl	r8,r9,r8
80009eb2:	30 0b       	mov	r11,0
80009eb4:	10 9a       	mov	r10,r8
80009eb6:	5e fc       	retal	r12

80009eb8 <__b2d>:
80009eb8:	d4 21       	pushm	r4-r7,lr
80009eba:	78 47       	ld.w	r7,r12[0x10]
80009ebc:	16 94       	mov	r4,r11
80009ebe:	2f b7       	sub	r7,-5
80009ec0:	f8 c5 ff ec 	sub	r5,r12,-20
80009ec4:	f8 07 00 27 	add	r7,r12,r7<<0x2
80009ec8:	0f 46       	ld.w	r6,--r7
80009eca:	0c 9c       	mov	r12,r6
80009ecc:	c4 2f       	rcall	80009d50 <__hi0bits>
80009ece:	f8 08 11 20 	rsub	r8,r12,32
80009ed2:	89 08       	st.w	r4[0x0],r8
80009ed4:	58 ac       	cp.w	r12,10
80009ed6:	e0 89 00 18 	brgt	80009f06 <__b2d+0x4e>
80009eda:	f8 08 11 0b 	rsub	r8,r12,11
80009ede:	0a 37       	cp.w	r7,r5
80009ee0:	e0 8b 00 04 	brhi	80009ee8 <__b2d+0x30>
80009ee4:	30 09       	mov	r9,0
80009ee6:	c0 38       	rjmp	80009eec <__b2d+0x34>
80009ee8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009eec:	f2 08 0a 49 	lsr	r9,r9,r8
80009ef0:	2e bc       	sub	r12,-21
80009ef2:	ec 0c 09 4c 	lsl	r12,r6,r12
80009ef6:	ec 08 0a 46 	lsr	r6,r6,r8
80009efa:	f3 ec 10 0a 	or	r10,r9,r12
80009efe:	0c 9b       	mov	r11,r6
80009f00:	ea 1b 3f f0 	orh	r11,0x3ff0
80009f04:	d8 22       	popm	r4-r7,pc
80009f06:	0a 37       	cp.w	r7,r5
80009f08:	e0 8b 00 04 	brhi	80009f10 <__b2d+0x58>
80009f0c:	30 08       	mov	r8,0
80009f0e:	c0 28       	rjmp	80009f12 <__b2d+0x5a>
80009f10:	0f 48       	ld.w	r8,--r7
80009f12:	20 bc       	sub	r12,11
80009f14:	c1 90       	breq	80009f46 <__b2d+0x8e>
80009f16:	f8 09 11 20 	rsub	r9,r12,32
80009f1a:	0a 37       	cp.w	r7,r5
80009f1c:	e0 8b 00 04 	brhi	80009f24 <__b2d+0x6c>
80009f20:	30 0a       	mov	r10,0
80009f22:	c0 38       	rjmp	80009f28 <__b2d+0x70>
80009f24:	ee fa ff fc 	ld.w	r10,r7[-4]
80009f28:	f0 0c 09 47 	lsl	r7,r8,r12
80009f2c:	f4 09 0a 45 	lsr	r5,r10,r9
80009f30:	ec 0c 09 4c 	lsl	r12,r6,r12
80009f34:	f0 09 0a 48 	lsr	r8,r8,r9
80009f38:	ea 1c 3f f0 	orh	r12,0x3ff0
80009f3c:	eb e7 10 0a 	or	r10,r5,r7
80009f40:	f9 e8 10 0b 	or	r11,r12,r8
80009f44:	d8 22       	popm	r4-r7,pc
80009f46:	0c 9b       	mov	r11,r6
80009f48:	10 9a       	mov	r10,r8
80009f4a:	ea 1b 3f f0 	orh	r11,0x3ff0
80009f4e:	d8 22       	popm	r4-r7,pc

80009f50 <__ratio>:
80009f50:	d4 21       	pushm	r4-r7,lr
80009f52:	20 2d       	sub	sp,8
80009f54:	16 95       	mov	r5,r11
80009f56:	18 94       	mov	r4,r12
80009f58:	fa cb ff fc 	sub	r11,sp,-4
80009f5c:	ca ef       	rcall	80009eb8 <__b2d>
80009f5e:	16 99       	mov	r9,r11
80009f60:	0a 9c       	mov	r12,r5
80009f62:	12 97       	mov	r7,r9
80009f64:	14 96       	mov	r6,r10
80009f66:	1a 9b       	mov	r11,sp
80009f68:	ca 8f       	rcall	80009eb8 <__b2d>
80009f6a:	14 98       	mov	r8,r10
80009f6c:	6a 4a       	ld.w	r10,r5[0x10]
80009f6e:	16 99       	mov	r9,r11
80009f70:	40 1c       	lddsp	r12,sp[0x4]
80009f72:	68 4b       	ld.w	r11,r4[0x10]
80009f74:	14 1b       	sub	r11,r10
80009f76:	40 0a       	lddsp	r10,sp[0x0]
80009f78:	a5 7b       	lsl	r11,0x5
80009f7a:	f8 0a 01 0a 	sub	r10,r12,r10
80009f7e:	16 0a       	add	r10,r11
80009f80:	58 0a       	cp.w	r10,0
80009f82:	e0 8a 00 06 	brle	80009f8e <__ratio+0x3e>
80009f86:	b5 6a       	lsl	r10,0x14
80009f88:	0e 0a       	add	r10,r7
80009f8a:	14 97       	mov	r7,r10
80009f8c:	c0 38       	rjmp	80009f92 <__ratio+0x42>
80009f8e:	b5 6a       	lsl	r10,0x14
80009f90:	14 19       	sub	r9,r10
80009f92:	0c 9a       	mov	r10,r6
80009f94:	0e 9b       	mov	r11,r7
80009f96:	e0 a0 17 05 	rcall	8000cda0 <__avr32_f64_div>
80009f9a:	2f ed       	sub	sp,-8
80009f9c:	d8 22       	popm	r4-r7,pc
80009f9e:	d7 03       	nop

80009fa0 <__copybits>:
80009fa0:	74 48       	ld.w	r8,r10[0x10]
80009fa2:	f6 c9 00 01 	sub	r9,r11,1
80009fa6:	2f b8       	sub	r8,-5
80009fa8:	a5 59       	asr	r9,0x5
80009faa:	f4 08 00 28 	add	r8,r10,r8<<0x2
80009fae:	2f f9       	sub	r9,-1
80009fb0:	2e ca       	sub	r10,-20
80009fb2:	f8 09 00 29 	add	r9,r12,r9<<0x2
80009fb6:	c0 38       	rjmp	80009fbc <__copybits+0x1c>
80009fb8:	15 0b       	ld.w	r11,r10++
80009fba:	18 ab       	st.w	r12++,r11
80009fbc:	10 3a       	cp.w	r10,r8
80009fbe:	cf d3       	brcs	80009fb8 <__copybits+0x18>
80009fc0:	c0 38       	rjmp	80009fc6 <__copybits+0x26>
80009fc2:	18 a8       	st.w	r12++,r8
80009fc4:	c0 28       	rjmp	80009fc8 <__copybits+0x28>
80009fc6:	30 08       	mov	r8,0
80009fc8:	12 3c       	cp.w	r12,r9
80009fca:	cf c3       	brcs	80009fc2 <__copybits+0x22>
80009fcc:	5e fc       	retal	r12

80009fce <__any_on>:
80009fce:	d4 01       	pushm	lr
80009fd0:	f8 ca ff ec 	sub	r10,r12,-20
80009fd4:	78 49       	ld.w	r9,r12[0x10]
80009fd6:	f6 08 14 05 	asr	r8,r11,0x5
80009fda:	12 38       	cp.w	r8,r9
80009fdc:	e0 8a 00 04 	brle	80009fe4 <__any_on+0x16>
80009fe0:	12 98       	mov	r8,r9
80009fe2:	c1 08       	rjmp	8000a002 <__any_on+0x34>
80009fe4:	12 38       	cp.w	r8,r9
80009fe6:	c0 e4       	brge	8000a002 <__any_on+0x34>
80009fe8:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80009fec:	c0 b0       	breq	8000a002 <__any_on+0x34>
80009fee:	f0 c9 ff fb 	sub	r9,r8,-5
80009ff2:	f8 09 03 29 	ld.w	r9,r12[r9<<0x2]
80009ff6:	f2 0b 0a 4e 	lsr	lr,r9,r11
80009ffa:	fc 0b 09 4b 	lsl	r11,lr,r11
80009ffe:	12 3b       	cp.w	r11,r9
8000a000:	c0 c1       	brne	8000a018 <__any_on+0x4a>
8000a002:	2f b8       	sub	r8,-5
8000a004:	f8 08 00 2c 	add	r12,r12,r8<<0x2
8000a008:	c0 48       	rjmp	8000a010 <__any_on+0x42>
8000a00a:	19 48       	ld.w	r8,--r12
8000a00c:	58 08       	cp.w	r8,0
8000a00e:	c0 51       	brne	8000a018 <__any_on+0x4a>
8000a010:	14 3c       	cp.w	r12,r10
8000a012:	fe 9b ff fc 	brhi	8000a00a <__any_on+0x3c>
8000a016:	d8 0a       	popm	pc,r12=0
8000a018:	da 0a       	popm	pc,r12=1
8000a01a:	d7 03       	nop

8000a01c <_Bfree>:
8000a01c:	d4 21       	pushm	r4-r7,lr
8000a01e:	18 97       	mov	r7,r12
8000a020:	16 95       	mov	r5,r11
8000a022:	78 96       	ld.w	r6,r12[0x24]
8000a024:	58 06       	cp.w	r6,0
8000a026:	c0 91       	brne	8000a038 <_Bfree+0x1c>
8000a028:	31 0c       	mov	r12,16
8000a02a:	fe b0 fc 19 	rcall	8000985c <malloc>
8000a02e:	99 36       	st.w	r12[0xc],r6
8000a030:	8f 9c       	st.w	r7[0x24],r12
8000a032:	99 16       	st.w	r12[0x4],r6
8000a034:	99 26       	st.w	r12[0x8],r6
8000a036:	99 06       	st.w	r12[0x0],r6
8000a038:	58 05       	cp.w	r5,0
8000a03a:	c0 90       	breq	8000a04c <_Bfree+0x30>
8000a03c:	6a 19       	ld.w	r9,r5[0x4]
8000a03e:	6e 98       	ld.w	r8,r7[0x24]
8000a040:	70 38       	ld.w	r8,r8[0xc]
8000a042:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000a046:	8b 0a       	st.w	r5[0x0],r10
8000a048:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000a04c:	d8 22       	popm	r4-r7,pc
8000a04e:	d7 03       	nop

8000a050 <_Balloc>:
8000a050:	d4 21       	pushm	r4-r7,lr
8000a052:	18 97       	mov	r7,r12
8000a054:	16 96       	mov	r6,r11
8000a056:	78 95       	ld.w	r5,r12[0x24]
8000a058:	58 05       	cp.w	r5,0
8000a05a:	c0 91       	brne	8000a06c <_Balloc+0x1c>
8000a05c:	31 0c       	mov	r12,16
8000a05e:	fe b0 fb ff 	rcall	8000985c <malloc>
8000a062:	99 35       	st.w	r12[0xc],r5
8000a064:	8f 9c       	st.w	r7[0x24],r12
8000a066:	99 15       	st.w	r12[0x4],r5
8000a068:	99 25       	st.w	r12[0x8],r5
8000a06a:	99 05       	st.w	r12[0x0],r5
8000a06c:	6e 95       	ld.w	r5,r7[0x24]
8000a06e:	6a 38       	ld.w	r8,r5[0xc]
8000a070:	58 08       	cp.w	r8,0
8000a072:	c0 b1       	brne	8000a088 <_Balloc+0x38>
8000a074:	31 0a       	mov	r10,16
8000a076:	30 4b       	mov	r11,4
8000a078:	0e 9c       	mov	r12,r7
8000a07a:	e0 a0 0f 37 	rcall	8000bee8 <_calloc_r>
8000a07e:	8b 3c       	st.w	r5[0xc],r12
8000a080:	6e 98       	ld.w	r8,r7[0x24]
8000a082:	70 3c       	ld.w	r12,r8[0xc]
8000a084:	58 0c       	cp.w	r12,0
8000a086:	c1 b0       	breq	8000a0bc <_Balloc+0x6c>
8000a088:	6e 98       	ld.w	r8,r7[0x24]
8000a08a:	70 38       	ld.w	r8,r8[0xc]
8000a08c:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000a090:	70 0c       	ld.w	r12,r8[0x0]
8000a092:	58 0c       	cp.w	r12,0
8000a094:	c0 40       	breq	8000a09c <_Balloc+0x4c>
8000a096:	78 09       	ld.w	r9,r12[0x0]
8000a098:	91 09       	st.w	r8[0x0],r9
8000a09a:	c0 e8       	rjmp	8000a0b6 <_Balloc+0x66>
8000a09c:	0e 9c       	mov	r12,r7
8000a09e:	30 17       	mov	r7,1
8000a0a0:	0e 9b       	mov	r11,r7
8000a0a2:	ee 06 09 47 	lsl	r7,r7,r6
8000a0a6:	ee ca ff fb 	sub	r10,r7,-5
8000a0aa:	a3 6a       	lsl	r10,0x2
8000a0ac:	e0 a0 0f 1e 	rcall	8000bee8 <_calloc_r>
8000a0b0:	c0 60       	breq	8000a0bc <_Balloc+0x6c>
8000a0b2:	99 16       	st.w	r12[0x4],r6
8000a0b4:	99 27       	st.w	r12[0x8],r7
8000a0b6:	30 08       	mov	r8,0
8000a0b8:	99 38       	st.w	r12[0xc],r8
8000a0ba:	99 48       	st.w	r12[0x10],r8
8000a0bc:	d8 22       	popm	r4-r7,pc
8000a0be:	d7 03       	nop

8000a0c0 <__d2b>:
8000a0c0:	d4 31       	pushm	r0-r7,lr
8000a0c2:	20 2d       	sub	sp,8
8000a0c4:	16 93       	mov	r3,r11
8000a0c6:	12 96       	mov	r6,r9
8000a0c8:	10 95       	mov	r5,r8
8000a0ca:	14 92       	mov	r2,r10
8000a0cc:	30 1b       	mov	r11,1
8000a0ce:	cc 1f       	rcall	8000a050 <_Balloc>
8000a0d0:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000a0d4:	50 09       	stdsp	sp[0x0],r9
8000a0d6:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000a0da:	b5 a9       	sbr	r9,0x14
8000a0dc:	f0 01 16 14 	lsr	r1,r8,0x14
8000a0e0:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000a0e4:	18 94       	mov	r4,r12
8000a0e6:	58 02       	cp.w	r2,0
8000a0e8:	c1 d0       	breq	8000a122 <__d2b+0x62>
8000a0ea:	fa cc ff f8 	sub	r12,sp,-8
8000a0ee:	18 d2       	st.w	--r12,r2
8000a0f0:	c6 0e       	rcall	80009db0 <__lo0bits>
8000a0f2:	40 18       	lddsp	r8,sp[0x4]
8000a0f4:	c0 d0       	breq	8000a10e <__d2b+0x4e>
8000a0f6:	40 09       	lddsp	r9,sp[0x0]
8000a0f8:	f8 0a 11 20 	rsub	r10,r12,32
8000a0fc:	f2 0a 09 4a 	lsl	r10,r9,r10
8000a100:	f5 e8 10 08 	or	r8,r10,r8
8000a104:	89 58       	st.w	r4[0x14],r8
8000a106:	f2 0c 0a 49 	lsr	r9,r9,r12
8000a10a:	50 09       	stdsp	sp[0x0],r9
8000a10c:	c0 28       	rjmp	8000a110 <__d2b+0x50>
8000a10e:	89 58       	st.w	r4[0x14],r8
8000a110:	40 08       	lddsp	r8,sp[0x0]
8000a112:	58 08       	cp.w	r8,0
8000a114:	f9 b3 01 02 	movne	r3,2
8000a118:	f9 b3 00 01 	moveq	r3,1
8000a11c:	89 68       	st.w	r4[0x18],r8
8000a11e:	89 43       	st.w	r4[0x10],r3
8000a120:	c0 88       	rjmp	8000a130 <__d2b+0x70>
8000a122:	1a 9c       	mov	r12,sp
8000a124:	c4 6e       	rcall	80009db0 <__lo0bits>
8000a126:	30 13       	mov	r3,1
8000a128:	40 08       	lddsp	r8,sp[0x0]
8000a12a:	2e 0c       	sub	r12,-32
8000a12c:	89 43       	st.w	r4[0x10],r3
8000a12e:	89 58       	st.w	r4[0x14],r8
8000a130:	58 01       	cp.w	r1,0
8000a132:	c0 90       	breq	8000a144 <__d2b+0x84>
8000a134:	e2 c1 04 33 	sub	r1,r1,1075
8000a138:	18 01       	add	r1,r12
8000a13a:	8d 01       	st.w	r6[0x0],r1
8000a13c:	f8 0c 11 35 	rsub	r12,r12,53
8000a140:	8b 0c       	st.w	r5[0x0],r12
8000a142:	c0 d8       	rjmp	8000a15c <__d2b+0x9c>
8000a144:	e6 c8 ff fc 	sub	r8,r3,-4
8000a148:	f8 cc 04 32 	sub	r12,r12,1074
8000a14c:	a5 73       	lsl	r3,0x5
8000a14e:	8d 0c       	st.w	r6[0x0],r12
8000a150:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000a154:	fe b0 fd fe 	rcall	80009d50 <__hi0bits>
8000a158:	18 13       	sub	r3,r12
8000a15a:	8b 03       	st.w	r5[0x0],r3
8000a15c:	08 9c       	mov	r12,r4
8000a15e:	2f ed       	sub	sp,-8
8000a160:	d8 32       	popm	r0-r7,pc
8000a162:	d7 03       	nop

8000a164 <__mdiff>:
8000a164:	d4 31       	pushm	r0-r7,lr
8000a166:	74 48       	ld.w	r8,r10[0x10]
8000a168:	76 45       	ld.w	r5,r11[0x10]
8000a16a:	16 97       	mov	r7,r11
8000a16c:	14 96       	mov	r6,r10
8000a16e:	10 15       	sub	r5,r8
8000a170:	c1 31       	brne	8000a196 <__mdiff+0x32>
8000a172:	2f b8       	sub	r8,-5
8000a174:	ee ce ff ec 	sub	lr,r7,-20
8000a178:	a3 68       	lsl	r8,0x2
8000a17a:	f4 08 00 0b 	add	r11,r10,r8
8000a17e:	ee 08 00 08 	add	r8,r7,r8
8000a182:	11 4a       	ld.w	r10,--r8
8000a184:	17 49       	ld.w	r9,--r11
8000a186:	12 3a       	cp.w	r10,r9
8000a188:	c0 30       	breq	8000a18e <__mdiff+0x2a>
8000a18a:	c0 e2       	brcc	8000a1a6 <__mdiff+0x42>
8000a18c:	c0 78       	rjmp	8000a19a <__mdiff+0x36>
8000a18e:	1c 38       	cp.w	r8,lr
8000a190:	fe 9b ff f9 	brhi	8000a182 <__mdiff+0x1e>
8000a194:	c4 98       	rjmp	8000a226 <__mdiff+0xc2>
8000a196:	58 05       	cp.w	r5,0
8000a198:	c0 64       	brge	8000a1a4 <__mdiff+0x40>
8000a19a:	0e 98       	mov	r8,r7
8000a19c:	30 15       	mov	r5,1
8000a19e:	0c 97       	mov	r7,r6
8000a1a0:	10 96       	mov	r6,r8
8000a1a2:	c0 28       	rjmp	8000a1a6 <__mdiff+0x42>
8000a1a4:	30 05       	mov	r5,0
8000a1a6:	6e 1b       	ld.w	r11,r7[0x4]
8000a1a8:	c5 4f       	rcall	8000a050 <_Balloc>
8000a1aa:	6e 49       	ld.w	r9,r7[0x10]
8000a1ac:	6c 44       	ld.w	r4,r6[0x10]
8000a1ae:	99 35       	st.w	r12[0xc],r5
8000a1b0:	2f b4       	sub	r4,-5
8000a1b2:	f2 c5 ff fb 	sub	r5,r9,-5
8000a1b6:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000a1ba:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000a1be:	2e c6       	sub	r6,-20
8000a1c0:	2e c7       	sub	r7,-20
8000a1c2:	f8 c8 ff ec 	sub	r8,r12,-20
8000a1c6:	30 0a       	mov	r10,0
8000a1c8:	0f 0e       	ld.w	lr,r7++
8000a1ca:	0d 0b       	ld.w	r11,r6++
8000a1cc:	fc 02 16 10 	lsr	r2,lr,0x10
8000a1d0:	f6 03 16 10 	lsr	r3,r11,0x10
8000a1d4:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a1d8:	e4 03 01 03 	sub	r3,r2,r3
8000a1dc:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a1e0:	fc 0b 01 0b 	sub	r11,lr,r11
8000a1e4:	f6 0a 00 0a 	add	r10,r11,r10
8000a1e8:	b0 1a       	st.h	r8[0x2],r10
8000a1ea:	b1 4a       	asr	r10,0x10
8000a1ec:	e6 0a 00 0a 	add	r10,r3,r10
8000a1f0:	b0 0a       	st.h	r8[0x0],r10
8000a1f2:	2f c8       	sub	r8,-4
8000a1f4:	b1 4a       	asr	r10,0x10
8000a1f6:	08 36       	cp.w	r6,r4
8000a1f8:	ce 83       	brcs	8000a1c8 <__mdiff+0x64>
8000a1fa:	c0 d8       	rjmp	8000a214 <__mdiff+0xb0>
8000a1fc:	0f 0b       	ld.w	r11,r7++
8000a1fe:	f6 0e 16 10 	lsr	lr,r11,0x10
8000a202:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a206:	16 0a       	add	r10,r11
8000a208:	b0 1a       	st.h	r8[0x2],r10
8000a20a:	b1 4a       	asr	r10,0x10
8000a20c:	1c 0a       	add	r10,lr
8000a20e:	b0 0a       	st.h	r8[0x0],r10
8000a210:	2f c8       	sub	r8,-4
8000a212:	b1 4a       	asr	r10,0x10
8000a214:	0a 37       	cp.w	r7,r5
8000a216:	cf 33       	brcs	8000a1fc <__mdiff+0x98>
8000a218:	c0 28       	rjmp	8000a21c <__mdiff+0xb8>
8000a21a:	20 19       	sub	r9,1
8000a21c:	11 4a       	ld.w	r10,--r8
8000a21e:	58 0a       	cp.w	r10,0
8000a220:	cf d0       	breq	8000a21a <__mdiff+0xb6>
8000a222:	99 49       	st.w	r12[0x10],r9
8000a224:	d8 32       	popm	r0-r7,pc
8000a226:	30 0b       	mov	r11,0
8000a228:	c1 4f       	rcall	8000a050 <_Balloc>
8000a22a:	30 18       	mov	r8,1
8000a22c:	99 48       	st.w	r12[0x10],r8
8000a22e:	30 08       	mov	r8,0
8000a230:	99 58       	st.w	r12[0x14],r8
8000a232:	d8 32       	popm	r0-r7,pc

8000a234 <__lshift>:
8000a234:	d4 31       	pushm	r0-r7,lr
8000a236:	16 97       	mov	r7,r11
8000a238:	76 46       	ld.w	r6,r11[0x10]
8000a23a:	f4 02 14 05 	asr	r2,r10,0x5
8000a23e:	2f f6       	sub	r6,-1
8000a240:	14 93       	mov	r3,r10
8000a242:	18 94       	mov	r4,r12
8000a244:	04 06       	add	r6,r2
8000a246:	76 1b       	ld.w	r11,r11[0x4]
8000a248:	6e 28       	ld.w	r8,r7[0x8]
8000a24a:	c0 38       	rjmp	8000a250 <__lshift+0x1c>
8000a24c:	2f fb       	sub	r11,-1
8000a24e:	a1 78       	lsl	r8,0x1
8000a250:	10 36       	cp.w	r6,r8
8000a252:	fe 99 ff fd 	brgt	8000a24c <__lshift+0x18>
8000a256:	08 9c       	mov	r12,r4
8000a258:	cf ce       	rcall	8000a050 <_Balloc>
8000a25a:	30 09       	mov	r9,0
8000a25c:	18 95       	mov	r5,r12
8000a25e:	f8 c8 ff ec 	sub	r8,r12,-20
8000a262:	12 9a       	mov	r10,r9
8000a264:	c0 38       	rjmp	8000a26a <__lshift+0x36>
8000a266:	10 aa       	st.w	r8++,r10
8000a268:	2f f9       	sub	r9,-1
8000a26a:	04 39       	cp.w	r9,r2
8000a26c:	cf d5       	brlt	8000a266 <__lshift+0x32>
8000a26e:	6e 4b       	ld.w	r11,r7[0x10]
8000a270:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000a274:	2f bb       	sub	r11,-5
8000a276:	ee c9 ff ec 	sub	r9,r7,-20
8000a27a:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000a27e:	58 03       	cp.w	r3,0
8000a280:	c1 30       	breq	8000a2a6 <__lshift+0x72>
8000a282:	e6 0c 11 20 	rsub	r12,r3,32
8000a286:	30 0a       	mov	r10,0
8000a288:	72 02       	ld.w	r2,r9[0x0]
8000a28a:	e4 03 09 42 	lsl	r2,r2,r3
8000a28e:	04 4a       	or	r10,r2
8000a290:	10 aa       	st.w	r8++,r10
8000a292:	13 0a       	ld.w	r10,r9++
8000a294:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a298:	16 39       	cp.w	r9,r11
8000a29a:	cf 73       	brcs	8000a288 <__lshift+0x54>
8000a29c:	91 0a       	st.w	r8[0x0],r10
8000a29e:	58 0a       	cp.w	r10,0
8000a2a0:	c0 70       	breq	8000a2ae <__lshift+0x7a>
8000a2a2:	2f f6       	sub	r6,-1
8000a2a4:	c0 58       	rjmp	8000a2ae <__lshift+0x7a>
8000a2a6:	13 0a       	ld.w	r10,r9++
8000a2a8:	10 aa       	st.w	r8++,r10
8000a2aa:	16 39       	cp.w	r9,r11
8000a2ac:	cf d3       	brcs	8000a2a6 <__lshift+0x72>
8000a2ae:	08 9c       	mov	r12,r4
8000a2b0:	20 16       	sub	r6,1
8000a2b2:	0e 9b       	mov	r11,r7
8000a2b4:	8b 46       	st.w	r5[0x10],r6
8000a2b6:	cb 3e       	rcall	8000a01c <_Bfree>
8000a2b8:	0a 9c       	mov	r12,r5
8000a2ba:	d8 32       	popm	r0-r7,pc

8000a2bc <__multiply>:
8000a2bc:	d4 31       	pushm	r0-r7,lr
8000a2be:	20 2d       	sub	sp,8
8000a2c0:	76 49       	ld.w	r9,r11[0x10]
8000a2c2:	74 48       	ld.w	r8,r10[0x10]
8000a2c4:	16 96       	mov	r6,r11
8000a2c6:	14 95       	mov	r5,r10
8000a2c8:	10 39       	cp.w	r9,r8
8000a2ca:	ec 08 17 50 	movlt	r8,r6
8000a2ce:	ea 06 17 50 	movlt	r6,r5
8000a2d2:	f0 05 17 50 	movlt	r5,r8
8000a2d6:	6c 28       	ld.w	r8,r6[0x8]
8000a2d8:	76 43       	ld.w	r3,r11[0x10]
8000a2da:	74 42       	ld.w	r2,r10[0x10]
8000a2dc:	76 1b       	ld.w	r11,r11[0x4]
8000a2de:	e4 03 00 07 	add	r7,r2,r3
8000a2e2:	10 37       	cp.w	r7,r8
8000a2e4:	f7 bb 09 ff 	subgt	r11,-1
8000a2e8:	cb 4e       	rcall	8000a050 <_Balloc>
8000a2ea:	ee c4 ff fb 	sub	r4,r7,-5
8000a2ee:	f8 c9 ff ec 	sub	r9,r12,-20
8000a2f2:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000a2f6:	30 0a       	mov	r10,0
8000a2f8:	12 98       	mov	r8,r9
8000a2fa:	c0 28       	rjmp	8000a2fe <__multiply+0x42>
8000a2fc:	10 aa       	st.w	r8++,r10
8000a2fe:	08 38       	cp.w	r8,r4
8000a300:	cf e3       	brcs	8000a2fc <__multiply+0x40>
8000a302:	2f b3       	sub	r3,-5
8000a304:	2f b2       	sub	r2,-5
8000a306:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000a30a:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000a30e:	ec cb ff ec 	sub	r11,r6,-20
8000a312:	50 12       	stdsp	sp[0x4],r2
8000a314:	ea ca ff ec 	sub	r10,r5,-20
8000a318:	c4 48       	rjmp	8000a3a0 <__multiply+0xe4>
8000a31a:	94 95       	ld.uh	r5,r10[0x2]
8000a31c:	58 05       	cp.w	r5,0
8000a31e:	c2 00       	breq	8000a35e <__multiply+0xa2>
8000a320:	12 98       	mov	r8,r9
8000a322:	16 96       	mov	r6,r11
8000a324:	30 0e       	mov	lr,0
8000a326:	50 09       	stdsp	sp[0x0],r9
8000a328:	0d 02       	ld.w	r2,r6++
8000a32a:	e4 00 16 10 	lsr	r0,r2,0x10
8000a32e:	70 01       	ld.w	r1,r8[0x0]
8000a330:	70 09       	ld.w	r9,r8[0x0]
8000a332:	b1 81       	lsr	r1,0x10
8000a334:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000a338:	e0 05 03 41 	mac	r1,r0,r5
8000a33c:	ab 32       	mul	r2,r5
8000a33e:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000a342:	00 02       	add	r2,r0
8000a344:	e4 0e 00 0e 	add	lr,r2,lr
8000a348:	b0 1e       	st.h	r8[0x2],lr
8000a34a:	b1 8e       	lsr	lr,0x10
8000a34c:	1c 01       	add	r1,lr
8000a34e:	b0 01       	st.h	r8[0x0],r1
8000a350:	e2 0e 16 10 	lsr	lr,r1,0x10
8000a354:	2f c8       	sub	r8,-4
8000a356:	06 36       	cp.w	r6,r3
8000a358:	ce 83       	brcs	8000a328 <__multiply+0x6c>
8000a35a:	40 09       	lddsp	r9,sp[0x0]
8000a35c:	91 0e       	st.w	r8[0x0],lr
8000a35e:	94 86       	ld.uh	r6,r10[0x0]
8000a360:	58 06       	cp.w	r6,0
8000a362:	c1 d0       	breq	8000a39c <__multiply+0xe0>
8000a364:	72 02       	ld.w	r2,r9[0x0]
8000a366:	12 98       	mov	r8,r9
8000a368:	16 9e       	mov	lr,r11
8000a36a:	30 05       	mov	r5,0
8000a36c:	b0 12       	st.h	r8[0x2],r2
8000a36e:	1d 01       	ld.w	r1,lr++
8000a370:	90 82       	ld.uh	r2,r8[0x0]
8000a372:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000a376:	ad 30       	mul	r0,r6
8000a378:	e0 02 00 02 	add	r2,r0,r2
8000a37c:	e4 05 00 05 	add	r5,r2,r5
8000a380:	b0 05       	st.h	r8[0x0],r5
8000a382:	b1 85       	lsr	r5,0x10
8000a384:	b1 81       	lsr	r1,0x10
8000a386:	2f c8       	sub	r8,-4
8000a388:	ad 31       	mul	r1,r6
8000a38a:	90 92       	ld.uh	r2,r8[0x2]
8000a38c:	e2 02 00 02 	add	r2,r1,r2
8000a390:	0a 02       	add	r2,r5
8000a392:	e4 05 16 10 	lsr	r5,r2,0x10
8000a396:	06 3e       	cp.w	lr,r3
8000a398:	ce a3       	brcs	8000a36c <__multiply+0xb0>
8000a39a:	91 02       	st.w	r8[0x0],r2
8000a39c:	2f ca       	sub	r10,-4
8000a39e:	2f c9       	sub	r9,-4
8000a3a0:	40 18       	lddsp	r8,sp[0x4]
8000a3a2:	10 3a       	cp.w	r10,r8
8000a3a4:	cb b3       	brcs	8000a31a <__multiply+0x5e>
8000a3a6:	c0 28       	rjmp	8000a3aa <__multiply+0xee>
8000a3a8:	20 17       	sub	r7,1
8000a3aa:	58 07       	cp.w	r7,0
8000a3ac:	e0 8a 00 05 	brle	8000a3b6 <__multiply+0xfa>
8000a3b0:	09 48       	ld.w	r8,--r4
8000a3b2:	58 08       	cp.w	r8,0
8000a3b4:	cf a0       	breq	8000a3a8 <__multiply+0xec>
8000a3b6:	99 47       	st.w	r12[0x10],r7
8000a3b8:	2f ed       	sub	sp,-8
8000a3ba:	d8 32       	popm	r0-r7,pc

8000a3bc <__i2b>:
8000a3bc:	d4 21       	pushm	r4-r7,lr
8000a3be:	16 97       	mov	r7,r11
8000a3c0:	30 1b       	mov	r11,1
8000a3c2:	c4 7e       	rcall	8000a050 <_Balloc>
8000a3c4:	30 19       	mov	r9,1
8000a3c6:	99 57       	st.w	r12[0x14],r7
8000a3c8:	99 49       	st.w	r12[0x10],r9
8000a3ca:	d8 22       	popm	r4-r7,pc

8000a3cc <__multadd>:
8000a3cc:	d4 31       	pushm	r0-r7,lr
8000a3ce:	30 08       	mov	r8,0
8000a3d0:	12 95       	mov	r5,r9
8000a3d2:	16 97       	mov	r7,r11
8000a3d4:	18 96       	mov	r6,r12
8000a3d6:	76 44       	ld.w	r4,r11[0x10]
8000a3d8:	f6 c9 ff ec 	sub	r9,r11,-20
8000a3dc:	72 0b       	ld.w	r11,r9[0x0]
8000a3de:	f6 0c 16 10 	lsr	r12,r11,0x10
8000a3e2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a3e6:	f4 0c 02 4c 	mul	r12,r10,r12
8000a3ea:	f4 0b 03 45 	mac	r5,r10,r11
8000a3ee:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000a3f2:	b1 85       	lsr	r5,0x10
8000a3f4:	18 05       	add	r5,r12
8000a3f6:	ea 0c 15 10 	lsl	r12,r5,0x10
8000a3fa:	f8 0b 00 0b 	add	r11,r12,r11
8000a3fe:	12 ab       	st.w	r9++,r11
8000a400:	2f f8       	sub	r8,-1
8000a402:	b1 85       	lsr	r5,0x10
8000a404:	08 38       	cp.w	r8,r4
8000a406:	ce b5       	brlt	8000a3dc <__multadd+0x10>
8000a408:	58 05       	cp.w	r5,0
8000a40a:	c1 c0       	breq	8000a442 <__multadd+0x76>
8000a40c:	6e 28       	ld.w	r8,r7[0x8]
8000a40e:	10 34       	cp.w	r4,r8
8000a410:	c1 35       	brlt	8000a436 <__multadd+0x6a>
8000a412:	6e 1b       	ld.w	r11,r7[0x4]
8000a414:	0c 9c       	mov	r12,r6
8000a416:	2f fb       	sub	r11,-1
8000a418:	c1 ce       	rcall	8000a050 <_Balloc>
8000a41a:	6e 4a       	ld.w	r10,r7[0x10]
8000a41c:	ee cb ff f4 	sub	r11,r7,-12
8000a420:	18 93       	mov	r3,r12
8000a422:	2f ea       	sub	r10,-2
8000a424:	2f 4c       	sub	r12,-12
8000a426:	a3 6a       	lsl	r10,0x2
8000a428:	fe b0 d1 62 	rcall	800046ec <memcpy>
8000a42c:	0e 9b       	mov	r11,r7
8000a42e:	0c 9c       	mov	r12,r6
8000a430:	fe b0 fd f6 	rcall	8000a01c <_Bfree>
8000a434:	06 97       	mov	r7,r3
8000a436:	e8 c8 ff ff 	sub	r8,r4,-1
8000a43a:	2f b4       	sub	r4,-5
8000a43c:	8f 48       	st.w	r7[0x10],r8
8000a43e:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000a442:	0e 9c       	mov	r12,r7
8000a444:	d8 32       	popm	r0-r7,pc
8000a446:	d7 03       	nop

8000a448 <__pow5mult>:
8000a448:	d4 31       	pushm	r0-r7,lr
8000a44a:	14 96       	mov	r6,r10
8000a44c:	18 97       	mov	r7,r12
8000a44e:	16 94       	mov	r4,r11
8000a450:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000a454:	c0 90       	breq	8000a466 <__pow5mult+0x1e>
8000a456:	20 18       	sub	r8,1
8000a458:	fe c9 c4 f4 	sub	r9,pc,-15116
8000a45c:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000a460:	30 09       	mov	r9,0
8000a462:	cb 5f       	rcall	8000a3cc <__multadd>
8000a464:	18 94       	mov	r4,r12
8000a466:	a3 46       	asr	r6,0x2
8000a468:	c3 40       	breq	8000a4d0 <__pow5mult+0x88>
8000a46a:	6e 95       	ld.w	r5,r7[0x24]
8000a46c:	58 05       	cp.w	r5,0
8000a46e:	c0 91       	brne	8000a480 <__pow5mult+0x38>
8000a470:	31 0c       	mov	r12,16
8000a472:	fe b0 f9 f5 	rcall	8000985c <malloc>
8000a476:	99 35       	st.w	r12[0xc],r5
8000a478:	8f 9c       	st.w	r7[0x24],r12
8000a47a:	99 15       	st.w	r12[0x4],r5
8000a47c:	99 25       	st.w	r12[0x8],r5
8000a47e:	99 05       	st.w	r12[0x0],r5
8000a480:	6e 93       	ld.w	r3,r7[0x24]
8000a482:	66 25       	ld.w	r5,r3[0x8]
8000a484:	58 05       	cp.w	r5,0
8000a486:	c0 c1       	brne	8000a49e <__pow5mult+0x56>
8000a488:	e0 6b 02 71 	mov	r11,625
8000a48c:	0e 9c       	mov	r12,r7
8000a48e:	c9 7f       	rcall	8000a3bc <__i2b>
8000a490:	87 2c       	st.w	r3[0x8],r12
8000a492:	30 08       	mov	r8,0
8000a494:	18 95       	mov	r5,r12
8000a496:	99 08       	st.w	r12[0x0],r8
8000a498:	c0 38       	rjmp	8000a49e <__pow5mult+0x56>
8000a49a:	06 9c       	mov	r12,r3
8000a49c:	18 95       	mov	r5,r12
8000a49e:	ed b6 00 00 	bld	r6,0x0
8000a4a2:	c0 b1       	brne	8000a4b8 <__pow5mult+0x70>
8000a4a4:	08 9b       	mov	r11,r4
8000a4a6:	0a 9a       	mov	r10,r5
8000a4a8:	0e 9c       	mov	r12,r7
8000a4aa:	c0 9f       	rcall	8000a2bc <__multiply>
8000a4ac:	08 9b       	mov	r11,r4
8000a4ae:	18 93       	mov	r3,r12
8000a4b0:	0e 9c       	mov	r12,r7
8000a4b2:	06 94       	mov	r4,r3
8000a4b4:	fe b0 fd b4 	rcall	8000a01c <_Bfree>
8000a4b8:	a1 56       	asr	r6,0x1
8000a4ba:	c0 b0       	breq	8000a4d0 <__pow5mult+0x88>
8000a4bc:	6a 03       	ld.w	r3,r5[0x0]
8000a4be:	58 03       	cp.w	r3,0
8000a4c0:	ce d1       	brne	8000a49a <__pow5mult+0x52>
8000a4c2:	0a 9a       	mov	r10,r5
8000a4c4:	0a 9b       	mov	r11,r5
8000a4c6:	0e 9c       	mov	r12,r7
8000a4c8:	cf ae       	rcall	8000a2bc <__multiply>
8000a4ca:	8b 0c       	st.w	r5[0x0],r12
8000a4cc:	99 03       	st.w	r12[0x0],r3
8000a4ce:	ce 7b       	rjmp	8000a49c <__pow5mult+0x54>
8000a4d0:	08 9c       	mov	r12,r4
8000a4d2:	d8 32       	popm	r0-r7,pc

8000a4d4 <__s2b>:
8000a4d4:	d4 31       	pushm	r0-r7,lr
8000a4d6:	12 93       	mov	r3,r9
8000a4d8:	10 94       	mov	r4,r8
8000a4da:	f2 c8 ff f8 	sub	r8,r9,-8
8000a4de:	30 99       	mov	r9,9
8000a4e0:	f0 09 0c 08 	divs	r8,r8,r9
8000a4e4:	16 95       	mov	r5,r11
8000a4e6:	10 99       	mov	r9,r8
8000a4e8:	18 96       	mov	r6,r12
8000a4ea:	14 97       	mov	r7,r10
8000a4ec:	30 18       	mov	r8,1
8000a4ee:	30 0b       	mov	r11,0
8000a4f0:	c0 38       	rjmp	8000a4f6 <__s2b+0x22>
8000a4f2:	a1 78       	lsl	r8,0x1
8000a4f4:	2f fb       	sub	r11,-1
8000a4f6:	10 39       	cp.w	r9,r8
8000a4f8:	fe 99 ff fd 	brgt	8000a4f2 <__s2b+0x1e>
8000a4fc:	0c 9c       	mov	r12,r6
8000a4fe:	fe b0 fd a9 	rcall	8000a050 <_Balloc>
8000a502:	30 18       	mov	r8,1
8000a504:	99 54       	st.w	r12[0x14],r4
8000a506:	99 48       	st.w	r12[0x10],r8
8000a508:	58 97       	cp.w	r7,9
8000a50a:	e0 8a 00 13 	brle	8000a530 <__s2b+0x5c>
8000a50e:	ea c2 ff f7 	sub	r2,r5,-9
8000a512:	30 94       	mov	r4,9
8000a514:	ea 04 07 09 	ld.ub	r9,r5[r4]
8000a518:	18 9b       	mov	r11,r12
8000a51a:	2f f4       	sub	r4,-1
8000a51c:	23 09       	sub	r9,48
8000a51e:	30 aa       	mov	r10,10
8000a520:	0c 9c       	mov	r12,r6
8000a522:	c5 5f       	rcall	8000a3cc <__multadd>
8000a524:	0e 34       	cp.w	r4,r7
8000a526:	cf 75       	brlt	8000a514 <__s2b+0x40>
8000a528:	e4 07 00 05 	add	r5,r2,r7
8000a52c:	20 85       	sub	r5,8
8000a52e:	c0 b8       	rjmp	8000a544 <__s2b+0x70>
8000a530:	2f 65       	sub	r5,-10
8000a532:	30 97       	mov	r7,9
8000a534:	c0 88       	rjmp	8000a544 <__s2b+0x70>
8000a536:	18 9b       	mov	r11,r12
8000a538:	0b 39       	ld.ub	r9,r5++
8000a53a:	2f f7       	sub	r7,-1
8000a53c:	23 09       	sub	r9,48
8000a53e:	30 aa       	mov	r10,10
8000a540:	0c 9c       	mov	r12,r6
8000a542:	c4 5f       	rcall	8000a3cc <__multadd>
8000a544:	06 37       	cp.w	r7,r3
8000a546:	cf 85       	brlt	8000a536 <__s2b+0x62>
8000a548:	d8 32       	popm	r0-r7,pc
8000a54a:	d7 03       	nop

8000a54c <_realloc_r>:
8000a54c:	d4 31       	pushm	r0-r7,lr
8000a54e:	20 1d       	sub	sp,4
8000a550:	16 94       	mov	r4,r11
8000a552:	18 92       	mov	r2,r12
8000a554:	14 9b       	mov	r11,r10
8000a556:	58 04       	cp.w	r4,0
8000a558:	c0 51       	brne	8000a562 <_realloc_r+0x16>
8000a55a:	fe b0 f9 89 	rcall	8000986c <_malloc_r>
8000a55e:	18 95       	mov	r5,r12
8000a560:	c5 39       	rjmp	8000a806 <_realloc_r+0x2ba>
8000a562:	50 0a       	stdsp	sp[0x0],r10
8000a564:	fe b0 fb f4 	rcall	80009d4c <__malloc_lock>
8000a568:	40 0b       	lddsp	r11,sp[0x0]
8000a56a:	f6 c8 ff f5 	sub	r8,r11,-11
8000a56e:	e8 c1 00 08 	sub	r1,r4,8
8000a572:	10 96       	mov	r6,r8
8000a574:	62 1c       	ld.w	r12,r1[0x4]
8000a576:	e0 16 ff f8 	andl	r6,0xfff8
8000a57a:	59 68       	cp.w	r8,22
8000a57c:	f9 b6 08 10 	movls	r6,16
8000a580:	16 36       	cp.w	r6,r11
8000a582:	5f 38       	srlo	r8
8000a584:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000a588:	c0 50       	breq	8000a592 <_realloc_r+0x46>
8000a58a:	30 c8       	mov	r8,12
8000a58c:	30 05       	mov	r5,0
8000a58e:	85 38       	st.w	r2[0xc],r8
8000a590:	c3 b9       	rjmp	8000a806 <_realloc_r+0x2ba>
8000a592:	18 90       	mov	r0,r12
8000a594:	e0 10 ff fc 	andl	r0,0xfffc
8000a598:	0c 30       	cp.w	r0,r6
8000a59a:	e0 84 01 0b 	brge	8000a7b0 <_realloc_r+0x264>
8000a59e:	e0 68 01 a0 	mov	r8,416
8000a5a2:	e2 00 00 09 	add	r9,r1,r0
8000a5a6:	70 25       	ld.w	r5,r8[0x8]
8000a5a8:	0a 39       	cp.w	r9,r5
8000a5aa:	c0 90       	breq	8000a5bc <_realloc_r+0x70>
8000a5ac:	72 1a       	ld.w	r10,r9[0x4]
8000a5ae:	a1 ca       	cbr	r10,0x0
8000a5b0:	f2 0a 00 0a 	add	r10,r9,r10
8000a5b4:	74 1a       	ld.w	r10,r10[0x4]
8000a5b6:	ed ba 00 00 	bld	r10,0x0
8000a5ba:	c2 20       	breq	8000a5fe <_realloc_r+0xb2>
8000a5bc:	72 1a       	ld.w	r10,r9[0x4]
8000a5be:	e0 1a ff fc 	andl	r10,0xfffc
8000a5c2:	f4 00 00 03 	add	r3,r10,r0
8000a5c6:	0a 39       	cp.w	r9,r5
8000a5c8:	c1 31       	brne	8000a5ee <_realloc_r+0xa2>
8000a5ca:	ec c7 ff f0 	sub	r7,r6,-16
8000a5ce:	0e 33       	cp.w	r3,r7
8000a5d0:	c1 95       	brlt	8000a602 <_realloc_r+0xb6>
8000a5d2:	e2 06 00 09 	add	r9,r1,r6
8000a5d6:	0c 13       	sub	r3,r6
8000a5d8:	a1 a3       	sbr	r3,0x0
8000a5da:	93 13       	st.w	r9[0x4],r3
8000a5dc:	91 29       	st.w	r8[0x8],r9
8000a5de:	04 9c       	mov	r12,r2
8000a5e0:	62 18       	ld.w	r8,r1[0x4]
8000a5e2:	08 95       	mov	r5,r4
8000a5e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a5e8:	10 46       	or	r6,r8
8000a5ea:	83 16       	st.w	r1[0x4],r6
8000a5ec:	c0 b9       	rjmp	8000a802 <_realloc_r+0x2b6>
8000a5ee:	0c 33       	cp.w	r3,r6
8000a5f0:	c0 95       	brlt	8000a602 <_realloc_r+0xb6>
8000a5f2:	72 28       	ld.w	r8,r9[0x8]
8000a5f4:	02 97       	mov	r7,r1
8000a5f6:	72 39       	ld.w	r9,r9[0xc]
8000a5f8:	93 28       	st.w	r9[0x8],r8
8000a5fa:	91 39       	st.w	r8[0xc],r9
8000a5fc:	cd c8       	rjmp	8000a7b4 <_realloc_r+0x268>
8000a5fe:	30 0a       	mov	r10,0
8000a600:	14 99       	mov	r9,r10
8000a602:	ed bc 00 00 	bld	r12,0x0
8000a606:	e0 80 00 95 	breq	8000a730 <_realloc_r+0x1e4>
8000a60a:	62 07       	ld.w	r7,r1[0x0]
8000a60c:	e2 07 01 07 	sub	r7,r1,r7
8000a610:	6e 1c       	ld.w	r12,r7[0x4]
8000a612:	e0 1c ff fc 	andl	r12,0xfffc
8000a616:	58 09       	cp.w	r9,0
8000a618:	c5 60       	breq	8000a6c4 <_realloc_r+0x178>
8000a61a:	f8 00 00 03 	add	r3,r12,r0
8000a61e:	0a 39       	cp.w	r9,r5
8000a620:	c4 81       	brne	8000a6b0 <_realloc_r+0x164>
8000a622:	14 03       	add	r3,r10
8000a624:	ec c9 ff f0 	sub	r9,r6,-16
8000a628:	12 33       	cp.w	r3,r9
8000a62a:	c4 d5       	brlt	8000a6c4 <_realloc_r+0x178>
8000a62c:	6e 3a       	ld.w	r10,r7[0xc]
8000a62e:	6e 29       	ld.w	r9,r7[0x8]
8000a630:	95 29       	st.w	r10[0x8],r9
8000a632:	93 3a       	st.w	r9[0xc],r10
8000a634:	ee c5 ff f8 	sub	r5,r7,-8
8000a638:	e0 ca 00 04 	sub	r10,r0,4
8000a63c:	e0 4a 00 24 	cp.w	r10,36
8000a640:	e0 8b 00 25 	brhi	8000a68a <_realloc_r+0x13e>
8000a644:	0a 99       	mov	r9,r5
8000a646:	59 3a       	cp.w	r10,19
8000a648:	e0 88 00 1a 	brls	8000a67c <_realloc_r+0x130>
8000a64c:	09 09       	ld.w	r9,r4++
8000a64e:	8b 09       	st.w	r5[0x0],r9
8000a650:	09 09       	ld.w	r9,r4++
8000a652:	8f 39       	st.w	r7[0xc],r9
8000a654:	ee c9 ff f0 	sub	r9,r7,-16
8000a658:	59 ba       	cp.w	r10,27
8000a65a:	e0 88 00 11 	brls	8000a67c <_realloc_r+0x130>
8000a65e:	09 0b       	ld.w	r11,r4++
8000a660:	93 0b       	st.w	r9[0x0],r11
8000a662:	09 09       	ld.w	r9,r4++
8000a664:	8f 59       	st.w	r7[0x14],r9
8000a666:	ee c9 ff e8 	sub	r9,r7,-24
8000a66a:	e0 4a 00 24 	cp.w	r10,36
8000a66e:	c0 71       	brne	8000a67c <_realloc_r+0x130>
8000a670:	09 0a       	ld.w	r10,r4++
8000a672:	93 0a       	st.w	r9[0x0],r10
8000a674:	ee c9 ff e0 	sub	r9,r7,-32
8000a678:	09 0a       	ld.w	r10,r4++
8000a67a:	8f 7a       	st.w	r7[0x1c],r10
8000a67c:	09 0a       	ld.w	r10,r4++
8000a67e:	12 aa       	st.w	r9++,r10
8000a680:	68 0a       	ld.w	r10,r4[0x0]
8000a682:	93 0a       	st.w	r9[0x0],r10
8000a684:	68 1a       	ld.w	r10,r4[0x4]
8000a686:	93 1a       	st.w	r9[0x4],r10
8000a688:	c0 78       	rjmp	8000a696 <_realloc_r+0x14a>
8000a68a:	50 08       	stdsp	sp[0x0],r8
8000a68c:	08 9b       	mov	r11,r4
8000a68e:	0a 9c       	mov	r12,r5
8000a690:	fe b0 fb 3f 	rcall	80009d0e <memmove>
8000a694:	40 08       	lddsp	r8,sp[0x0]
8000a696:	ee 06 00 09 	add	r9,r7,r6
8000a69a:	0c 13       	sub	r3,r6
8000a69c:	a1 a3       	sbr	r3,0x0
8000a69e:	93 13       	st.w	r9[0x4],r3
8000a6a0:	91 29       	st.w	r8[0x8],r9
8000a6a2:	04 9c       	mov	r12,r2
8000a6a4:	6e 18       	ld.w	r8,r7[0x4]
8000a6a6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a6aa:	10 46       	or	r6,r8
8000a6ac:	8f 16       	st.w	r7[0x4],r6
8000a6ae:	ca a8       	rjmp	8000a802 <_realloc_r+0x2b6>
8000a6b0:	14 03       	add	r3,r10
8000a6b2:	0c 33       	cp.w	r3,r6
8000a6b4:	c0 85       	brlt	8000a6c4 <_realloc_r+0x178>
8000a6b6:	72 28       	ld.w	r8,r9[0x8]
8000a6b8:	72 39       	ld.w	r9,r9[0xc]
8000a6ba:	93 28       	st.w	r9[0x8],r8
8000a6bc:	91 39       	st.w	r8[0xc],r9
8000a6be:	6e 28       	ld.w	r8,r7[0x8]
8000a6c0:	6e 39       	ld.w	r9,r7[0xc]
8000a6c2:	c0 78       	rjmp	8000a6d0 <_realloc_r+0x184>
8000a6c4:	f8 00 00 03 	add	r3,r12,r0
8000a6c8:	0c 33       	cp.w	r3,r6
8000a6ca:	c3 35       	brlt	8000a730 <_realloc_r+0x1e4>
8000a6cc:	6e 39       	ld.w	r9,r7[0xc]
8000a6ce:	6e 28       	ld.w	r8,r7[0x8]
8000a6d0:	93 28       	st.w	r9[0x8],r8
8000a6d2:	91 39       	st.w	r8[0xc],r9
8000a6d4:	e0 ca 00 04 	sub	r10,r0,4
8000a6d8:	ee cc ff f8 	sub	r12,r7,-8
8000a6dc:	e0 4a 00 24 	cp.w	r10,36
8000a6e0:	e0 8b 00 24 	brhi	8000a728 <_realloc_r+0x1dc>
8000a6e4:	59 3a       	cp.w	r10,19
8000a6e6:	e0 88 00 1a 	brls	8000a71a <_realloc_r+0x1ce>
8000a6ea:	09 08       	ld.w	r8,r4++
8000a6ec:	99 08       	st.w	r12[0x0],r8
8000a6ee:	09 08       	ld.w	r8,r4++
8000a6f0:	8f 38       	st.w	r7[0xc],r8
8000a6f2:	ee cc ff f0 	sub	r12,r7,-16
8000a6f6:	59 ba       	cp.w	r10,27
8000a6f8:	e0 88 00 11 	brls	8000a71a <_realloc_r+0x1ce>
8000a6fc:	09 08       	ld.w	r8,r4++
8000a6fe:	99 08       	st.w	r12[0x0],r8
8000a700:	09 08       	ld.w	r8,r4++
8000a702:	8f 58       	st.w	r7[0x14],r8
8000a704:	ee cc ff e8 	sub	r12,r7,-24
8000a708:	e0 4a 00 24 	cp.w	r10,36
8000a70c:	c0 71       	brne	8000a71a <_realloc_r+0x1ce>
8000a70e:	09 08       	ld.w	r8,r4++
8000a710:	99 08       	st.w	r12[0x0],r8
8000a712:	ee cc ff e0 	sub	r12,r7,-32
8000a716:	09 08       	ld.w	r8,r4++
8000a718:	8f 78       	st.w	r7[0x1c],r8
8000a71a:	09 08       	ld.w	r8,r4++
8000a71c:	18 a8       	st.w	r12++,r8
8000a71e:	68 08       	ld.w	r8,r4[0x0]
8000a720:	99 08       	st.w	r12[0x0],r8
8000a722:	68 18       	ld.w	r8,r4[0x4]
8000a724:	99 18       	st.w	r12[0x4],r8
8000a726:	c4 78       	rjmp	8000a7b4 <_realloc_r+0x268>
8000a728:	08 9b       	mov	r11,r4
8000a72a:	fe b0 fa f2 	rcall	80009d0e <memmove>
8000a72e:	c4 38       	rjmp	8000a7b4 <_realloc_r+0x268>
8000a730:	04 9c       	mov	r12,r2
8000a732:	fe b0 f8 9d 	rcall	8000986c <_malloc_r>
8000a736:	18 95       	mov	r5,r12
8000a738:	c3 a0       	breq	8000a7ac <_realloc_r+0x260>
8000a73a:	62 18       	ld.w	r8,r1[0x4]
8000a73c:	f8 c9 00 08 	sub	r9,r12,8
8000a740:	a1 c8       	cbr	r8,0x0
8000a742:	e2 08 00 08 	add	r8,r1,r8
8000a746:	10 39       	cp.w	r9,r8
8000a748:	c0 71       	brne	8000a756 <_realloc_r+0x20a>
8000a74a:	72 13       	ld.w	r3,r9[0x4]
8000a74c:	02 97       	mov	r7,r1
8000a74e:	e0 13 ff fc 	andl	r3,0xfffc
8000a752:	00 03       	add	r3,r0
8000a754:	c3 08       	rjmp	8000a7b4 <_realloc_r+0x268>
8000a756:	e0 ca 00 04 	sub	r10,r0,4
8000a75a:	e0 4a 00 24 	cp.w	r10,36
8000a75e:	e0 8b 00 20 	brhi	8000a79e <_realloc_r+0x252>
8000a762:	08 99       	mov	r9,r4
8000a764:	18 98       	mov	r8,r12
8000a766:	59 3a       	cp.w	r10,19
8000a768:	e0 88 00 14 	brls	8000a790 <_realloc_r+0x244>
8000a76c:	13 0b       	ld.w	r11,r9++
8000a76e:	10 ab       	st.w	r8++,r11
8000a770:	13 0b       	ld.w	r11,r9++
8000a772:	10 ab       	st.w	r8++,r11
8000a774:	59 ba       	cp.w	r10,27
8000a776:	e0 88 00 0d 	brls	8000a790 <_realloc_r+0x244>
8000a77a:	13 0b       	ld.w	r11,r9++
8000a77c:	10 ab       	st.w	r8++,r11
8000a77e:	13 0b       	ld.w	r11,r9++
8000a780:	10 ab       	st.w	r8++,r11
8000a782:	e0 4a 00 24 	cp.w	r10,36
8000a786:	c0 51       	brne	8000a790 <_realloc_r+0x244>
8000a788:	13 0a       	ld.w	r10,r9++
8000a78a:	10 aa       	st.w	r8++,r10
8000a78c:	13 0a       	ld.w	r10,r9++
8000a78e:	10 aa       	st.w	r8++,r10
8000a790:	13 0a       	ld.w	r10,r9++
8000a792:	10 aa       	st.w	r8++,r10
8000a794:	72 0a       	ld.w	r10,r9[0x0]
8000a796:	91 0a       	st.w	r8[0x0],r10
8000a798:	72 19       	ld.w	r9,r9[0x4]
8000a79a:	91 19       	st.w	r8[0x4],r9
8000a79c:	c0 48       	rjmp	8000a7a4 <_realloc_r+0x258>
8000a79e:	08 9b       	mov	r11,r4
8000a7a0:	fe b0 fa b7 	rcall	80009d0e <memmove>
8000a7a4:	08 9b       	mov	r11,r4
8000a7a6:	04 9c       	mov	r12,r2
8000a7a8:	fe b0 f5 86 	rcall	800092b4 <_free_r>
8000a7ac:	04 9c       	mov	r12,r2
8000a7ae:	c2 a8       	rjmp	8000a802 <_realloc_r+0x2b6>
8000a7b0:	00 93       	mov	r3,r0
8000a7b2:	02 97       	mov	r7,r1
8000a7b4:	e6 06 01 09 	sub	r9,r3,r6
8000a7b8:	6e 18       	ld.w	r8,r7[0x4]
8000a7ba:	58 f9       	cp.w	r9,15
8000a7bc:	e0 88 00 16 	brls	8000a7e8 <_realloc_r+0x29c>
8000a7c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a7c4:	ed e8 10 08 	or	r8,r6,r8
8000a7c8:	8f 18       	st.w	r7[0x4],r8
8000a7ca:	12 98       	mov	r8,r9
8000a7cc:	a1 a8       	sbr	r8,0x0
8000a7ce:	ee 06 00 0b 	add	r11,r7,r6
8000a7d2:	f6 09 00 09 	add	r9,r11,r9
8000a7d6:	97 18       	st.w	r11[0x4],r8
8000a7d8:	72 18       	ld.w	r8,r9[0x4]
8000a7da:	a1 a8       	sbr	r8,0x0
8000a7dc:	2f 8b       	sub	r11,-8
8000a7de:	93 18       	st.w	r9[0x4],r8
8000a7e0:	04 9c       	mov	r12,r2
8000a7e2:	fe b0 f5 69 	rcall	800092b4 <_free_r>
8000a7e6:	c0 b8       	rjmp	8000a7fc <_realloc_r+0x2b0>
8000a7e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a7ec:	e7 e8 10 08 	or	r8,r3,r8
8000a7f0:	8f 18       	st.w	r7[0x4],r8
8000a7f2:	ee 03 00 03 	add	r3,r7,r3
8000a7f6:	66 18       	ld.w	r8,r3[0x4]
8000a7f8:	a1 a8       	sbr	r8,0x0
8000a7fa:	87 18       	st.w	r3[0x4],r8
8000a7fc:	04 9c       	mov	r12,r2
8000a7fe:	ee c5 ff f8 	sub	r5,r7,-8
8000a802:	fe b0 fa a6 	rcall	80009d4e <__malloc_unlock>
8000a806:	0a 9c       	mov	r12,r5
8000a808:	2f fd       	sub	sp,-4
8000a80a:	d8 32       	popm	r0-r7,pc

8000a80c <__srefill_r>:
8000a80c:	d4 21       	pushm	r4-r7,lr
8000a80e:	16 97       	mov	r7,r11
8000a810:	18 96       	mov	r6,r12
8000a812:	58 0c       	cp.w	r12,0
8000a814:	c0 60       	breq	8000a820 <__srefill_r+0x14>
8000a816:	78 68       	ld.w	r8,r12[0x18]
8000a818:	58 08       	cp.w	r8,0
8000a81a:	c0 31       	brne	8000a820 <__srefill_r+0x14>
8000a81c:	fe b0 f4 58 	rcall	800090cc <__sinit>
8000a820:	fe c8 c9 5c 	sub	r8,pc,-13988
8000a824:	10 37       	cp.w	r7,r8
8000a826:	c0 31       	brne	8000a82c <__srefill_r+0x20>
8000a828:	6c 07       	ld.w	r7,r6[0x0]
8000a82a:	c0 c8       	rjmp	8000a842 <__srefill_r+0x36>
8000a82c:	fe c8 c9 48 	sub	r8,pc,-14008
8000a830:	10 37       	cp.w	r7,r8
8000a832:	c0 31       	brne	8000a838 <__srefill_r+0x2c>
8000a834:	6c 17       	ld.w	r7,r6[0x4]
8000a836:	c0 68       	rjmp	8000a842 <__srefill_r+0x36>
8000a838:	fe c8 c9 34 	sub	r8,pc,-14028
8000a83c:	10 37       	cp.w	r7,r8
8000a83e:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000a842:	30 08       	mov	r8,0
8000a844:	8f 18       	st.w	r7[0x4],r8
8000a846:	8e 68       	ld.sh	r8,r7[0xc]
8000a848:	ed b8 00 05 	bld	r8,0x5
8000a84c:	c5 b0       	breq	8000a902 <__srefill_r+0xf6>
8000a84e:	ed b8 00 02 	bld	r8,0x2
8000a852:	c1 a0       	breq	8000a886 <__srefill_r+0x7a>
8000a854:	ed b8 00 04 	bld	r8,0x4
8000a858:	c0 60       	breq	8000a864 <__srefill_r+0x58>
8000a85a:	a7 a8       	sbr	r8,0x6
8000a85c:	ae 68       	st.h	r7[0xc],r8
8000a85e:	30 98       	mov	r8,9
8000a860:	8d 38       	st.w	r6[0xc],r8
8000a862:	c4 f8       	rjmp	8000a900 <__srefill_r+0xf4>
8000a864:	ed b8 00 03 	bld	r8,0x3
8000a868:	c0 b1       	brne	8000a87e <__srefill_r+0x72>
8000a86a:	0e 9b       	mov	r11,r7
8000a86c:	0c 9c       	mov	r12,r6
8000a86e:	fe b0 f3 45 	rcall	80008ef8 <_fflush_r>
8000a872:	c4 81       	brne	8000a902 <__srefill_r+0xf6>
8000a874:	8e 68       	ld.sh	r8,r7[0xc]
8000a876:	8f 6c       	st.w	r7[0x18],r12
8000a878:	a3 d8       	cbr	r8,0x3
8000a87a:	8f 2c       	st.w	r7[0x8],r12
8000a87c:	ae 68       	st.h	r7[0xc],r8
8000a87e:	8e 68       	ld.sh	r8,r7[0xc]
8000a880:	a3 a8       	sbr	r8,0x2
8000a882:	ae 68       	st.h	r7[0xc],r8
8000a884:	c1 48       	rjmp	8000a8ac <__srefill_r+0xa0>
8000a886:	6e db       	ld.w	r11,r7[0x34]
8000a888:	58 0b       	cp.w	r11,0
8000a88a:	c1 10       	breq	8000a8ac <__srefill_r+0xa0>
8000a88c:	ee c8 ff bc 	sub	r8,r7,-68
8000a890:	10 3b       	cp.w	r11,r8
8000a892:	c0 40       	breq	8000a89a <__srefill_r+0x8e>
8000a894:	0c 9c       	mov	r12,r6
8000a896:	fe b0 f5 0f 	rcall	800092b4 <_free_r>
8000a89a:	30 0c       	mov	r12,0
8000a89c:	6f 08       	ld.w	r8,r7[0x40]
8000a89e:	8f dc       	st.w	r7[0x34],r12
8000a8a0:	8f 18       	st.w	r7[0x4],r8
8000a8a2:	58 08       	cp.w	r8,0
8000a8a4:	c0 40       	breq	8000a8ac <__srefill_r+0xa0>
8000a8a6:	6e f8       	ld.w	r8,r7[0x3c]
8000a8a8:	8f 08       	st.w	r7[0x0],r8
8000a8aa:	d8 22       	popm	r4-r7,pc
8000a8ac:	6e 48       	ld.w	r8,r7[0x10]
8000a8ae:	58 08       	cp.w	r8,0
8000a8b0:	c0 51       	brne	8000a8ba <__srefill_r+0xae>
8000a8b2:	0e 9b       	mov	r11,r7
8000a8b4:	0c 9c       	mov	r12,r6
8000a8b6:	fe b0 f7 75 	rcall	800097a0 <__smakebuf_r>
8000a8ba:	8e 68       	ld.sh	r8,r7[0xc]
8000a8bc:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000a8c0:	c0 80       	breq	8000a8d0 <__srefill_r+0xc4>
8000a8c2:	fe c8 cf 16 	sub	r8,pc,-12522
8000a8c6:	fe cb ff c2 	sub	r11,pc,-62
8000a8ca:	70 0c       	ld.w	r12,r8[0x0]
8000a8cc:	fe b0 f7 32 	rcall	80009730 <_fwalk>
8000a8d0:	6e 4a       	ld.w	r10,r7[0x10]
8000a8d2:	6e 98       	ld.w	r8,r7[0x24]
8000a8d4:	0c 9c       	mov	r12,r6
8000a8d6:	8f 0a       	st.w	r7[0x0],r10
8000a8d8:	6e 59       	ld.w	r9,r7[0x14]
8000a8da:	6e 8b       	ld.w	r11,r7[0x20]
8000a8dc:	5d 18       	icall	r8
8000a8de:	8e 68       	ld.sh	r8,r7[0xc]
8000a8e0:	8f 1c       	st.w	r7[0x4],r12
8000a8e2:	ad d8       	cbr	r8,0xd
8000a8e4:	ae 68       	st.h	r7[0xc],r8
8000a8e6:	58 0c       	cp.w	r12,0
8000a8e8:	e0 8a 00 03 	brle	8000a8ee <__srefill_r+0xe2>
8000a8ec:	d8 2a       	popm	r4-r7,pc,r12=0
8000a8ee:	58 0c       	cp.w	r12,0
8000a8f0:	c0 41       	brne	8000a8f8 <__srefill_r+0xec>
8000a8f2:	a5 b8       	sbr	r8,0x5
8000a8f4:	ae 68       	st.h	r7[0xc],r8
8000a8f6:	c0 58       	rjmp	8000a900 <__srefill_r+0xf4>
8000a8f8:	a7 a8       	sbr	r8,0x6
8000a8fa:	ae 68       	st.h	r7[0xc],r8
8000a8fc:	30 08       	mov	r8,0
8000a8fe:	8f 18       	st.w	r7[0x4],r8
8000a900:	dc 2a       	popm	r4-r7,pc,r12=-1
8000a902:	dc 2a       	popm	r4-r7,pc,r12=-1

8000a904 <lflush>:
8000a904:	d4 01       	pushm	lr
8000a906:	98 68       	ld.sh	r8,r12[0xc]
8000a908:	e2 18 00 09 	andl	r8,0x9,COH
8000a90c:	58 98       	cp.w	r8,9
8000a90e:	c0 20       	breq	8000a912 <lflush+0xe>
8000a910:	d8 0a       	popm	pc,r12=0
8000a912:	fe b0 f3 79 	rcall	80009004 <fflush>
8000a916:	d8 02       	popm	pc

8000a918 <__isinfd>:
8000a918:	14 98       	mov	r8,r10
8000a91a:	fc 19 7f f0 	movh	r9,0x7ff0
8000a91e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000a922:	f0 0b 11 00 	rsub	r11,r8,0
8000a926:	f7 e8 10 08 	or	r8,r11,r8
8000a92a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000a92e:	f2 08 01 08 	sub	r8,r9,r8
8000a932:	f0 0c 11 00 	rsub	r12,r8,0
8000a936:	f9 e8 10 08 	or	r8,r12,r8
8000a93a:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000a93e:	2f fc       	sub	r12,-1
8000a940:	5e fc       	retal	r12

8000a942 <__isnand>:
8000a942:	14 98       	mov	r8,r10
8000a944:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000a948:	f0 0c 11 00 	rsub	r12,r8,0
8000a94c:	10 4c       	or	r12,r8
8000a94e:	fc 18 7f f0 	movh	r8,0x7ff0
8000a952:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000a956:	f0 0c 01 0c 	sub	r12,r8,r12
8000a95a:	bf 9c       	lsr	r12,0x1f
8000a95c:	5e fc       	retal	r12
8000a95e:	d7 03       	nop

8000a960 <_sbrk_r>:
8000a960:	d4 21       	pushm	r4-r7,lr
8000a962:	30 08       	mov	r8,0
8000a964:	18 97       	mov	r7,r12
8000a966:	e0 66 0c 38 	mov	r6,3128
8000a96a:	16 9c       	mov	r12,r11
8000a96c:	8d 08       	st.w	r6[0x0],r8
8000a96e:	e0 a0 09 ed 	rcall	8000bd48 <_sbrk>
8000a972:	5b fc       	cp.w	r12,-1
8000a974:	c0 51       	brne	8000a97e <_sbrk_r+0x1e>
8000a976:	6c 08       	ld.w	r8,r6[0x0]
8000a978:	58 08       	cp.w	r8,0
8000a97a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000a97e:	d8 22       	popm	r4-r7,pc

8000a980 <__sccl>:
8000a980:	d4 31       	pushm	r0-r7,lr
8000a982:	18 9e       	mov	lr,r12
8000a984:	17 38       	ld.ub	r8,r11++
8000a986:	e0 48 00 5e 	cp.w	r8,94
8000a98a:	c0 30       	breq	8000a990 <__sccl+0x10>
8000a98c:	30 0a       	mov	r10,0
8000a98e:	c0 38       	rjmp	8000a994 <__sccl+0x14>
8000a990:	17 38       	ld.ub	r8,r11++
8000a992:	30 1a       	mov	r10,1
8000a994:	30 09       	mov	r9,0
8000a996:	fc 09 0b 0a 	st.b	lr[r9],r10
8000a99a:	2f f9       	sub	r9,-1
8000a99c:	e0 49 01 00 	cp.w	r9,256
8000a9a0:	cf b1       	brne	8000a996 <__sccl+0x16>
8000a9a2:	58 08       	cp.w	r8,0
8000a9a4:	c0 41       	brne	8000a9ac <__sccl+0x2c>
8000a9a6:	f6 cc 00 01 	sub	r12,r11,1
8000a9aa:	d8 32       	popm	r0-r7,pc
8000a9ac:	14 96       	mov	r6,r10
8000a9ae:	32 d4       	mov	r4,45
8000a9b0:	ec 16 00 01 	eorl	r6,0x1
8000a9b4:	30 07       	mov	r7,0
8000a9b6:	35 d5       	mov	r5,93
8000a9b8:	c0 38       	rjmp	8000a9be <__sccl+0x3e>
8000a9ba:	14 98       	mov	r8,r10
8000a9bc:	12 9b       	mov	r11,r9
8000a9be:	fc 08 0b 06 	st.b	lr[r8],r6
8000a9c2:	f6 c9 ff ff 	sub	r9,r11,-1
8000a9c6:	17 8a       	ld.ub	r10,r11[0x0]
8000a9c8:	12 9c       	mov	r12,r9
8000a9ca:	e8 0a 18 00 	cp.b	r10,r4
8000a9ce:	c0 90       	breq	8000a9e0 <__sccl+0x60>
8000a9d0:	ea 0a 18 00 	cp.b	r10,r5
8000a9d4:	c1 e0       	breq	8000aa10 <__sccl+0x90>
8000a9d6:	ee 0a 18 00 	cp.b	r10,r7
8000a9da:	cf 01       	brne	8000a9ba <__sccl+0x3a>
8000a9dc:	16 9c       	mov	r12,r11
8000a9de:	d8 32       	popm	r0-r7,pc
8000a9e0:	13 8c       	ld.ub	r12,r9[0x0]
8000a9e2:	10 3c       	cp.w	r12,r8
8000a9e4:	5f 53       	srlt	r3
8000a9e6:	e0 4c 00 5d 	cp.w	r12,93
8000a9ea:	5f 0a       	sreq	r10
8000a9ec:	e7 ea 10 0a 	or	r10,r3,r10
8000a9f0:	ee 0a 18 00 	cp.b	r10,r7
8000a9f4:	c0 30       	breq	8000a9fa <__sccl+0x7a>
8000a9f6:	32 d8       	mov	r8,45
8000a9f8:	ce 2b       	rjmp	8000a9bc <__sccl+0x3c>
8000a9fa:	f0 ca ff ff 	sub	r10,r8,-1
8000a9fe:	fc 0a 00 0a 	add	r10,lr,r10
8000aa02:	14 c6       	st.b	r10++,r6
8000aa04:	2f f8       	sub	r8,-1
8000aa06:	18 38       	cp.w	r8,r12
8000aa08:	cf d5       	brlt	8000aa02 <__sccl+0x82>
8000aa0a:	2f eb       	sub	r11,-2
8000aa0c:	2f e9       	sub	r9,-2
8000aa0e:	cd cb       	rjmp	8000a9c6 <__sccl+0x46>
8000aa10:	d8 32       	popm	r0-r7,pc

8000aa12 <nanf>:
8000aa12:	fc 1c 7f c0 	movh	r12,0x7fc0
8000aa16:	5e fc       	retal	r12

8000aa18 <sprintf>:
8000aa18:	d4 01       	pushm	lr
8000aa1a:	21 7d       	sub	sp,92
8000aa1c:	e0 68 ff ff 	mov	r8,65535
8000aa20:	ea 18 7f ff 	orh	r8,0x7fff
8000aa24:	50 58       	stdsp	sp[0x14],r8
8000aa26:	50 28       	stdsp	sp[0x8],r8
8000aa28:	e0 68 02 08 	mov	r8,520
8000aa2c:	ba 68       	st.h	sp[0xc],r8
8000aa2e:	3f f8       	mov	r8,-1
8000aa30:	ba 78       	st.h	sp[0xe],r8
8000aa32:	e0 68 01 94 	mov	r8,404
8000aa36:	50 4c       	stdsp	sp[0x10],r12
8000aa38:	16 9a       	mov	r10,r11
8000aa3a:	50 0c       	stdsp	sp[0x0],r12
8000aa3c:	fa c9 ff a0 	sub	r9,sp,-96
8000aa40:	70 0c       	ld.w	r12,r8[0x0]
8000aa42:	1a 9b       	mov	r11,sp
8000aa44:	fe b0 d1 5e 	rcall	80004d00 <_vfprintf_r>
8000aa48:	30 09       	mov	r9,0
8000aa4a:	40 08       	lddsp	r8,sp[0x0]
8000aa4c:	b0 89       	st.b	r8[0x0],r9
8000aa4e:	2e 9d       	sub	sp,-92
8000aa50:	d8 02       	popm	pc
8000aa52:	d7 03       	nop

8000aa54 <__sclose>:
8000aa54:	d4 01       	pushm	lr
8000aa56:	96 7b       	ld.sh	r11,r11[0xe]
8000aa58:	e0 a0 0a 74 	rcall	8000bf40 <_close_r>
8000aa5c:	d8 02       	popm	pc
8000aa5e:	d7 03       	nop

8000aa60 <__sseek>:
8000aa60:	d4 21       	pushm	r4-r7,lr
8000aa62:	16 97       	mov	r7,r11
8000aa64:	96 7b       	ld.sh	r11,r11[0xe]
8000aa66:	e0 a0 0e 2f 	rcall	8000c6c4 <_lseek_r>
8000aa6a:	8e 68       	ld.sh	r8,r7[0xc]
8000aa6c:	10 99       	mov	r9,r8
8000aa6e:	ad c8       	cbr	r8,0xc
8000aa70:	ad a9       	sbr	r9,0xc
8000aa72:	5b fc       	cp.w	r12,-1
8000aa74:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000aa78:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000aa7c:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000aa80:	d8 22       	popm	r4-r7,pc
8000aa82:	d7 03       	nop

8000aa84 <__swrite>:
8000aa84:	d4 21       	pushm	r4-r7,lr
8000aa86:	96 68       	ld.sh	r8,r11[0xc]
8000aa88:	16 97       	mov	r7,r11
8000aa8a:	14 95       	mov	r5,r10
8000aa8c:	12 94       	mov	r4,r9
8000aa8e:	e2 18 01 00 	andl	r8,0x100,COH
8000aa92:	18 96       	mov	r6,r12
8000aa94:	c0 60       	breq	8000aaa0 <__swrite+0x1c>
8000aa96:	30 29       	mov	r9,2
8000aa98:	30 0a       	mov	r10,0
8000aa9a:	96 7b       	ld.sh	r11,r11[0xe]
8000aa9c:	e0 a0 0e 14 	rcall	8000c6c4 <_lseek_r>
8000aaa0:	8e 68       	ld.sh	r8,r7[0xc]
8000aaa2:	ad c8       	cbr	r8,0xc
8000aaa4:	08 99       	mov	r9,r4
8000aaa6:	0a 9a       	mov	r10,r5
8000aaa8:	8e 7b       	ld.sh	r11,r7[0xe]
8000aaaa:	0c 9c       	mov	r12,r6
8000aaac:	ae 68       	st.h	r7[0xc],r8
8000aaae:	e0 a0 0a 09 	rcall	8000bec0 <_write_r>
8000aab2:	d8 22       	popm	r4-r7,pc

8000aab4 <__sread>:
8000aab4:	d4 21       	pushm	r4-r7,lr
8000aab6:	16 97       	mov	r7,r11
8000aab8:	96 7b       	ld.sh	r11,r11[0xe]
8000aaba:	e0 a0 0e 19 	rcall	8000c6ec <_read_r>
8000aabe:	c0 65       	brlt	8000aaca <__sread+0x16>
8000aac0:	6f 58       	ld.w	r8,r7[0x54]
8000aac2:	18 08       	add	r8,r12
8000aac4:	ef 48 00 54 	st.w	r7[84],r8
8000aac8:	d8 22       	popm	r4-r7,pc
8000aaca:	8e 68       	ld.sh	r8,r7[0xc]
8000aacc:	ad c8       	cbr	r8,0xc
8000aace:	ae 68       	st.h	r7[0xc],r8
8000aad0:	d8 22       	popm	r4-r7,pc
8000aad2:	d7 03       	nop

8000aad4 <strlen>:
8000aad4:	30 09       	mov	r9,0
8000aad6:	18 98       	mov	r8,r12
8000aad8:	c0 28       	rjmp	8000aadc <strlen+0x8>
8000aada:	2f f8       	sub	r8,-1
8000aadc:	11 8a       	ld.ub	r10,r8[0x0]
8000aade:	f2 0a 18 00 	cp.b	r10,r9
8000aae2:	cf c1       	brne	8000aada <strlen+0x6>
8000aae4:	f0 0c 01 0c 	sub	r12,r8,r12
8000aae8:	5e fc       	retal	r12
8000aaea:	d7 03       	nop

8000aaec <_strtod_r>:
8000aaec:	d4 31       	pushm	r0-r7,lr
8000aaee:	21 bd       	sub	sp,108
8000aaf0:	50 ba       	stdsp	sp[0x2c],r10
8000aaf2:	51 8b       	stdsp	sp[0x60],r11
8000aaf4:	16 92       	mov	r2,r11
8000aaf6:	18 96       	mov	r6,r12
8000aaf8:	fa c7 ff b8 	sub	r7,sp,-72
8000aafc:	30 08       	mov	r8,0
8000aafe:	30 09       	mov	r9,0
8000ab00:	30 d5       	mov	r5,13
8000ab02:	ee e9 00 00 	st.d	r7[0],r8
8000ab06:	32 be       	mov	lr,43
8000ab08:	32 dc       	mov	r12,45
8000ab0a:	32 0b       	mov	r11,32
8000ab0c:	30 9a       	mov	r10,9
8000ab0e:	41 89       	lddsp	r9,sp[0x60]
8000ab10:	13 88       	ld.ub	r8,r9[0x0]
8000ab12:	ea 08 18 00 	cp.b	r8,r5
8000ab16:	e0 8b 00 0b 	brhi	8000ab2c <_strtod_r+0x40>
8000ab1a:	f4 08 18 00 	cp.b	r8,r10
8000ab1e:	c1 f2       	brcc	8000ab5c <_strtod_r+0x70>
8000ab20:	30 09       	mov	r9,0
8000ab22:	f2 08 18 00 	cp.b	r8,r9
8000ab26:	c1 e1       	brne	8000ab62 <_strtod_r+0x76>
8000ab28:	e0 8f 01 fe 	bral	8000af24 <_strtod_r+0x438>
8000ab2c:	fc 08 18 00 	cp.b	r8,lr
8000ab30:	c0 80       	breq	8000ab40 <_strtod_r+0x54>
8000ab32:	f8 08 18 00 	cp.b	r8,r12
8000ab36:	c0 80       	breq	8000ab46 <_strtod_r+0x5a>
8000ab38:	f6 08 18 00 	cp.b	r8,r11
8000ab3c:	c1 31       	brne	8000ab62 <_strtod_r+0x76>
8000ab3e:	c0 f8       	rjmp	8000ab5c <_strtod_r+0x70>
8000ab40:	30 0e       	mov	lr,0
8000ab42:	50 8e       	stdsp	sp[0x20],lr
8000ab44:	c0 38       	rjmp	8000ab4a <_strtod_r+0x5e>
8000ab46:	30 1c       	mov	r12,1
8000ab48:	50 8c       	stdsp	sp[0x20],r12
8000ab4a:	2f f9       	sub	r9,-1
8000ab4c:	51 89       	stdsp	sp[0x60],r9
8000ab4e:	30 08       	mov	r8,0
8000ab50:	13 89       	ld.ub	r9,r9[0x0]
8000ab52:	f0 09 18 00 	cp.b	r9,r8
8000ab56:	c0 81       	brne	8000ab66 <_strtod_r+0x7a>
8000ab58:	e0 8f 01 e6 	bral	8000af24 <_strtod_r+0x438>
8000ab5c:	2f f9       	sub	r9,-1
8000ab5e:	51 89       	stdsp	sp[0x60],r9
8000ab60:	cd 7b       	rjmp	8000ab0e <_strtod_r+0x22>
8000ab62:	30 0b       	mov	r11,0
8000ab64:	50 8b       	stdsp	sp[0x20],r11
8000ab66:	41 89       	lddsp	r9,sp[0x60]
8000ab68:	33 0a       	mov	r10,48
8000ab6a:	13 88       	ld.ub	r8,r9[0x0]
8000ab6c:	f4 08 18 00 	cp.b	r8,r10
8000ab70:	c0 30       	breq	8000ab76 <_strtod_r+0x8a>
8000ab72:	30 00       	mov	r0,0
8000ab74:	c6 b8       	rjmp	8000ac4a <_strtod_r+0x15e>
8000ab76:	13 99       	ld.ub	r9,r9[0x1]
8000ab78:	35 8a       	mov	r10,88
8000ab7a:	f4 09 18 00 	cp.b	r9,r10
8000ab7e:	c0 50       	breq	8000ab88 <_strtod_r+0x9c>
8000ab80:	37 8a       	mov	r10,120
8000ab82:	f4 09 18 00 	cp.b	r9,r10
8000ab86:	c5 61       	brne	8000ac32 <_strtod_r+0x146>
8000ab88:	40 8a       	lddsp	r10,sp[0x20]
8000ab8a:	e0 67 05 c4 	mov	r7,1476
8000ab8e:	1a da       	st.w	--sp,r10
8000ab90:	0c 9c       	mov	r12,r6
8000ab92:	fa c8 ff a0 	sub	r8,sp,-96
8000ab96:	fa c9 ff a4 	sub	r9,sp,-92
8000ab9a:	fa cb ff 9c 	sub	r11,sp,-100
8000ab9e:	0e 9a       	mov	r10,r7
8000aba0:	e0 a0 0a c0 	rcall	8000c120 <__gethex>
8000aba4:	2f fd       	sub	sp,-4
8000aba6:	18 94       	mov	r4,r12
8000aba8:	eb dc c0 03 	bfextu	r5,r12,0x0,0x3
8000abac:	e0 80 05 be 	breq	8000b728 <_strtod_r+0xc3c>
8000abb0:	58 65       	cp.w	r5,6
8000abb2:	c0 61       	brne	8000abbe <_strtod_r+0xd2>
8000abb4:	30 09       	mov	r9,0
8000abb6:	51 82       	stdsp	sp[0x60],r2
8000abb8:	50 89       	stdsp	sp[0x20],r9
8000abba:	e0 8f 05 b7 	bral	8000b728 <_strtod_r+0xc3c>
8000abbe:	41 7a       	lddsp	r10,sp[0x5c]
8000abc0:	58 0a       	cp.w	r10,0
8000abc2:	c0 a0       	breq	8000abd6 <_strtod_r+0xea>
8000abc4:	6e 0b       	ld.w	r11,r7[0x0]
8000abc6:	fa cc ff c8 	sub	r12,sp,-56
8000abca:	fe b0 f9 eb 	rcall	80009fa0 <__copybits>
8000abce:	0c 9c       	mov	r12,r6
8000abd0:	41 7b       	lddsp	r11,sp[0x5c]
8000abd2:	fe b0 fa 25 	rcall	8000a01c <_Bfree>
8000abd6:	41 69       	lddsp	r9,sp[0x58]
8000abd8:	58 65       	cp.w	r5,6
8000abda:	e0 8b 00 23 	brhi	8000ac20 <_strtod_r+0x134>
8000abde:	fe c8 cb 7e 	sub	r8,pc,-13442
8000abe2:	f0 05 03 2f 	ld.w	pc,r8[r5<<0x2]
8000abe6:	30 08       	mov	r8,0
8000abe8:	51 28       	stdsp	sp[0x48],r8
8000abea:	c1 a8       	rjmp	8000ac1e <_strtod_r+0x132>
8000abec:	40 e8       	lddsp	r8,sp[0x38]
8000abee:	51 38       	stdsp	sp[0x4c],r8
8000abf0:	40 f8       	lddsp	r8,sp[0x3c]
8000abf2:	c0 98       	rjmp	8000ac04 <_strtod_r+0x118>
8000abf4:	40 e8       	lddsp	r8,sp[0x38]
8000abf6:	f2 c9 fb cd 	sub	r9,r9,-1075
8000abfa:	51 38       	stdsp	sp[0x4c],r8
8000abfc:	40 f8       	lddsp	r8,sp[0x3c]
8000abfe:	b5 c8       	cbr	r8,0x14
8000ac00:	f1 e9 11 48 	or	r8,r8,r9<<0x14
8000ac04:	51 28       	stdsp	sp[0x48],r8
8000ac06:	c0 d8       	rjmp	8000ac20 <_strtod_r+0x134>
8000ac08:	fc 18 7f f0 	movh	r8,0x7ff0
8000ac0c:	51 28       	stdsp	sp[0x48],r8
8000ac0e:	30 08       	mov	r8,0
8000ac10:	c0 78       	rjmp	8000ac1e <_strtod_r+0x132>
8000ac12:	e0 68 ff ff 	mov	r8,65535
8000ac16:	ea 18 7f ff 	orh	r8,0x7fff
8000ac1a:	51 28       	stdsp	sp[0x48],r8
8000ac1c:	3f f8       	mov	r8,-1
8000ac1e:	51 38       	stdsp	sp[0x4c],r8
8000ac20:	e2 14 00 08 	andl	r4,0x8,COH
8000ac24:	e0 80 05 82 	breq	8000b728 <_strtod_r+0xc3c>
8000ac28:	41 28       	lddsp	r8,sp[0x48]
8000ac2a:	bf b8       	sbr	r8,0x1f
8000ac2c:	51 28       	stdsp	sp[0x48],r8
8000ac2e:	e0 8f 05 7d 	bral	8000b728 <_strtod_r+0xc3c>
8000ac32:	10 9a       	mov	r10,r8
8000ac34:	41 88       	lddsp	r8,sp[0x60]
8000ac36:	2f f8       	sub	r8,-1
8000ac38:	51 88       	stdsp	sp[0x60],r8
8000ac3a:	11 88       	ld.ub	r8,r8[0x0]
8000ac3c:	f4 08 18 00 	cp.b	r8,r10
8000ac40:	cf a0       	breq	8000ac34 <_strtod_r+0x148>
8000ac42:	58 08       	cp.w	r8,0
8000ac44:	e0 80 05 72 	breq	8000b728 <_strtod_r+0xc3c>
8000ac48:	30 10       	mov	r0,1
8000ac4a:	30 04       	mov	r4,0
8000ac4c:	41 88       	lddsp	r8,sp[0x60]
8000ac4e:	08 93       	mov	r3,r4
8000ac50:	50 78       	stdsp	sp[0x1c],r8
8000ac52:	08 9a       	mov	r10,r4
8000ac54:	c1 38       	rjmp	8000ac7a <_strtod_r+0x18e>
8000ac56:	58 8a       	cp.w	r10,8
8000ac58:	e0 89 00 06 	brgt	8000ac64 <_strtod_r+0x178>
8000ac5c:	23 08       	sub	r8,48
8000ac5e:	f0 0b 00 13 	add	r3,r8,r11<<0x1
8000ac62:	c0 98       	rjmp	8000ac74 <_strtod_r+0x188>
8000ac64:	58 fa       	cp.w	r10,15
8000ac66:	e0 89 00 07 	brgt	8000ac74 <_strtod_r+0x188>
8000ac6a:	e8 04 00 24 	add	r4,r4,r4<<0x2
8000ac6e:	23 08       	sub	r8,48
8000ac70:	f0 04 00 14 	add	r4,r8,r4<<0x1
8000ac74:	2f f9       	sub	r9,-1
8000ac76:	2f fa       	sub	r10,-1
8000ac78:	51 89       	stdsp	sp[0x60],r9
8000ac7a:	41 89       	lddsp	r9,sp[0x60]
8000ac7c:	e6 03 00 2b 	add	r11,r3,r3<<0x2
8000ac80:	13 88       	ld.ub	r8,r9[0x0]
8000ac82:	e0 48 00 2f 	cp.w	r8,47
8000ac86:	e0 8a 00 07 	brle	8000ac94 <_strtod_r+0x1a8>
8000ac8a:	e0 48 00 39 	cp.w	r8,57
8000ac8e:	fe 9a ff e4 	brle	8000ac56 <_strtod_r+0x16a>
8000ac92:	c5 b8       	rjmp	8000ad48 <_strtod_r+0x25c>
8000ac94:	14 95       	mov	r5,r10
8000ac96:	e0 48 00 2e 	cp.w	r8,46
8000ac9a:	c5 71       	brne	8000ad48 <_strtod_r+0x25c>
8000ac9c:	2f f9       	sub	r9,-1
8000ac9e:	51 89       	stdsp	sp[0x60],r9
8000aca0:	13 88       	ld.ub	r8,r9[0x0]
8000aca2:	58 0a       	cp.w	r10,0
8000aca4:	c0 40       	breq	8000acac <_strtod_r+0x1c0>
8000aca6:	30 09       	mov	r9,0
8000aca8:	12 9b       	mov	r11,r9
8000acaa:	c4 78       	rjmp	8000ad38 <_strtod_r+0x24c>
8000acac:	14 99       	mov	r9,r10
8000acae:	c0 68       	rjmp	8000acba <_strtod_r+0x1ce>
8000acb0:	41 88       	lddsp	r8,sp[0x60]
8000acb2:	2f f9       	sub	r9,-1
8000acb4:	2f f8       	sub	r8,-1
8000acb6:	51 88       	stdsp	sp[0x60],r8
8000acb8:	11 88       	ld.ub	r8,r8[0x0]
8000acba:	e0 48 00 30 	cp.w	r8,48
8000acbe:	cf 90       	breq	8000acb0 <_strtod_r+0x1c4>
8000acc0:	f0 cb 00 31 	sub	r11,r8,49
8000acc4:	58 8b       	cp.w	r11,8
8000acc6:	e0 88 00 07 	brls	8000acd4 <_strtod_r+0x1e8>
8000acca:	30 0a       	mov	r10,0
8000accc:	30 11       	mov	r1,1
8000acce:	14 9b       	mov	r11,r10
8000acd0:	50 11       	stdsp	sp[0x4],r1
8000acd2:	c3 f8       	rjmp	8000ad50 <_strtod_r+0x264>
8000acd4:	12 9b       	mov	r11,r9
8000acd6:	41 8e       	lddsp	lr,sp[0x60]
8000acd8:	30 09       	mov	r9,0
8000acda:	50 7e       	stdsp	sp[0x1c],lr
8000acdc:	2f f9       	sub	r9,-1
8000acde:	23 08       	sub	r8,48
8000ace0:	c2 80       	breq	8000ad30 <_strtod_r+0x244>
8000ace2:	12 0b       	add	r11,r9
8000ace4:	30 1e       	mov	lr,1
8000ace6:	c1 08       	rjmp	8000ad06 <_strtod_r+0x21a>
8000ace8:	18 95       	mov	r5,r12
8000acea:	20 1c       	sub	r12,1
8000acec:	58 8c       	cp.w	r12,8
8000acee:	e0 89 00 05 	brgt	8000acf8 <_strtod_r+0x20c>
8000acf2:	e2 03 15 01 	lsl	r3,r1,0x1
8000acf6:	c0 78       	rjmp	8000ad04 <_strtod_r+0x218>
8000acf8:	59 05       	cp.w	r5,16
8000acfa:	e0 89 00 05 	brgt	8000ad04 <_strtod_r+0x218>
8000acfe:	e8 04 00 24 	add	r4,r4,r4<<0x2
8000ad02:	a1 74       	lsl	r4,0x1
8000ad04:	2f fe       	sub	lr,-1
8000ad06:	e6 03 00 21 	add	r1,r3,r3<<0x2
8000ad0a:	ea cc ff ff 	sub	r12,r5,-1
8000ad0e:	12 3e       	cp.w	lr,r9
8000ad10:	ce c5       	brlt	8000ace8 <_strtod_r+0x1fc>
8000ad12:	58 85       	cp.w	r5,8
8000ad14:	e0 89 00 05 	brgt	8000ad1e <_strtod_r+0x232>
8000ad18:	f0 01 00 13 	add	r3,r8,r1<<0x1
8000ad1c:	c0 88       	rjmp	8000ad2c <_strtod_r+0x240>
8000ad1e:	59 0c       	cp.w	r12,16
8000ad20:	e0 89 00 06 	brgt	8000ad2c <_strtod_r+0x240>
8000ad24:	e8 04 00 24 	add	r4,r4,r4<<0x2
8000ad28:	f0 04 00 14 	add	r4,r8,r4<<0x1
8000ad2c:	18 95       	mov	r5,r12
8000ad2e:	30 09       	mov	r9,0
8000ad30:	41 88       	lddsp	r8,sp[0x60]
8000ad32:	2f f8       	sub	r8,-1
8000ad34:	51 88       	stdsp	sp[0x60],r8
8000ad36:	11 88       	ld.ub	r8,r8[0x0]
8000ad38:	f0 cc 00 30 	sub	r12,r8,48
8000ad3c:	58 9c       	cp.w	r12,9
8000ad3e:	fe 98 ff cf 	brls	8000acdc <_strtod_r+0x1f0>
8000ad42:	30 1c       	mov	r12,1
8000ad44:	50 1c       	stdsp	sp[0x4],r12
8000ad46:	c0 58       	rjmp	8000ad50 <_strtod_r+0x264>
8000ad48:	30 09       	mov	r9,0
8000ad4a:	14 95       	mov	r5,r10
8000ad4c:	12 9b       	mov	r11,r9
8000ad4e:	50 19       	stdsp	sp[0x4],r9
8000ad50:	e0 48 00 45 	cp.w	r8,69
8000ad54:	5f 0e       	sreq	lr
8000ad56:	e0 48 00 65 	cp.w	r8,101
8000ad5a:	5f 0c       	sreq	r12
8000ad5c:	fd ec 10 0c 	or	r12,lr,r12
8000ad60:	c6 60       	breq	8000ae2c <_strtod_r+0x340>
8000ad62:	eb e9 10 08 	or	r8,r5,r9
8000ad66:	00 48       	or	r8,r0
8000ad68:	e0 80 00 de 	breq	8000af24 <_strtod_r+0x438>
8000ad6c:	41 82       	lddsp	r2,sp[0x60]
8000ad6e:	e4 cc ff ff 	sub	r12,r2,-1
8000ad72:	51 8c       	stdsp	sp[0x60],r12
8000ad74:	32 be       	mov	lr,43
8000ad76:	19 88       	ld.ub	r8,r12[0x0]
8000ad78:	fc 08 18 00 	cp.b	r8,lr
8000ad7c:	c0 60       	breq	8000ad88 <_strtod_r+0x29c>
8000ad7e:	32 de       	mov	lr,45
8000ad80:	fc 08 18 00 	cp.b	r8,lr
8000ad84:	c0 51       	brne	8000ad8e <_strtod_r+0x2a2>
8000ad86:	c0 78       	rjmp	8000ad94 <_strtod_r+0x2a8>
8000ad88:	30 08       	mov	r8,0
8000ad8a:	50 c8       	stdsp	sp[0x30],r8
8000ad8c:	c0 68       	rjmp	8000ad98 <_strtod_r+0x2ac>
8000ad8e:	30 01       	mov	r1,0
8000ad90:	50 c1       	stdsp	sp[0x30],r1
8000ad92:	c0 68       	rjmp	8000ad9e <_strtod_r+0x2b2>
8000ad94:	30 1e       	mov	lr,1
8000ad96:	50 ce       	stdsp	sp[0x30],lr
8000ad98:	2f fc       	sub	r12,-1
8000ad9a:	51 8c       	stdsp	sp[0x60],r12
8000ad9c:	19 88       	ld.ub	r8,r12[0x0]
8000ad9e:	f0 cc 00 30 	sub	r12,r8,48
8000ada2:	58 9c       	cp.w	r12,9
8000ada4:	e0 88 00 08 	brls	8000adb4 <_strtod_r+0x2c8>
8000ada8:	c3 e8       	rjmp	8000ae24 <_strtod_r+0x338>
8000adaa:	41 88       	lddsp	r8,sp[0x60]
8000adac:	2f f8       	sub	r8,-1
8000adae:	51 88       	stdsp	sp[0x60],r8
8000adb0:	11 88       	ld.ub	r8,r8[0x0]
8000adb2:	c0 28       	rjmp	8000adb6 <_strtod_r+0x2ca>
8000adb4:	40 ce       	lddsp	lr,sp[0x30]
8000adb6:	e0 48 00 30 	cp.w	r8,48
8000adba:	cf 80       	breq	8000adaa <_strtod_r+0x2be>
8000adbc:	50 ce       	stdsp	sp[0x30],lr
8000adbe:	f0 cc 00 31 	sub	r12,r8,49
8000adc2:	58 8c       	cp.w	r12,8
8000adc4:	e0 8b 00 34 	brhi	8000ae2c <_strtod_r+0x340>
8000adc8:	41 8c       	lddsp	r12,sp[0x60]
8000adca:	23 08       	sub	r8,48
8000adcc:	50 3c       	stdsp	sp[0xc],r12
8000adce:	50 98       	stdsp	sp[0x24],r8
8000add0:	10 9c       	mov	r12,r8
8000add2:	c0 58       	rjmp	8000addc <_strtod_r+0x2f0>
8000add4:	23 08       	sub	r8,48
8000add6:	40 51       	lddsp	r1,sp[0x14]
8000add8:	f0 01 00 1c 	add	r12,r8,r1<<0x1
8000addc:	41 81       	lddsp	r1,sp[0x60]
8000adde:	f8 0c 00 28 	add	r8,r12,r12<<0x2
8000ade2:	2f f1       	sub	r1,-1
8000ade4:	50 58       	stdsp	sp[0x14],r8
8000ade6:	51 81       	stdsp	sp[0x60],r1
8000ade8:	03 88       	ld.ub	r8,r1[0x0]
8000adea:	e0 48 00 2f 	cp.w	r8,47
8000adee:	e0 8a 00 06 	brle	8000adfa <_strtod_r+0x30e>
8000adf2:	e0 48 00 39 	cp.w	r8,57
8000adf6:	fe 9a ff ef 	brle	8000add4 <_strtod_r+0x2e8>
8000adfa:	50 ce       	stdsp	sp[0x30],lr
8000adfc:	40 3e       	lddsp	lr,sp[0xc]
8000adfe:	1c 11       	sub	r1,lr
8000ae00:	50 9c       	stdsp	sp[0x24],r12
8000ae02:	58 81       	cp.w	r1,8
8000ae04:	5f 9c       	srgt	r12
8000ae06:	40 91       	lddsp	r1,sp[0x24]
8000ae08:	e0 41 4e 1f 	cp.w	r1,19999
8000ae0c:	5f 9e       	srgt	lr
8000ae0e:	1c 4c       	or	r12,lr
8000ae10:	e0 6e 4e 1f 	mov	lr,19999
8000ae14:	fc 01 17 10 	movne	r1,lr
8000ae18:	50 31       	stdsp	sp[0xc],r1
8000ae1a:	40 cc       	lddsp	r12,sp[0x30]
8000ae1c:	58 0c       	cp.w	r12,0
8000ae1e:	c0 90       	breq	8000ae30 <_strtod_r+0x344>
8000ae20:	5c 31       	neg	r1
8000ae22:	c0 38       	rjmp	8000ae28 <_strtod_r+0x33c>
8000ae24:	51 82       	stdsp	sp[0x60],r2
8000ae26:	30 01       	mov	r1,0
8000ae28:	50 31       	stdsp	sp[0xc],r1
8000ae2a:	c0 38       	rjmp	8000ae30 <_strtod_r+0x344>
8000ae2c:	30 0e       	mov	lr,0
8000ae2e:	50 3e       	stdsp	sp[0xc],lr
8000ae30:	58 05       	cp.w	r5,0
8000ae32:	c7 e1       	brne	8000af2e <_strtod_r+0x442>
8000ae34:	00 49       	or	r9,r0
8000ae36:	e0 81 04 79 	brne	8000b728 <_strtod_r+0xc3c>
8000ae3a:	40 1c       	lddsp	r12,sp[0x4]
8000ae3c:	58 0c       	cp.w	r12,0
8000ae3e:	c7 31       	brne	8000af24 <_strtod_r+0x438>
8000ae40:	e0 48 00 4e 	cp.w	r8,78
8000ae44:	c3 e0       	breq	8000aec0 <_strtod_r+0x3d4>
8000ae46:	e0 89 00 06 	brgt	8000ae52 <_strtod_r+0x366>
8000ae4a:	e0 48 00 49 	cp.w	r8,73
8000ae4e:	c6 b1       	brne	8000af24 <_strtod_r+0x438>
8000ae50:	c0 88       	rjmp	8000ae60 <_strtod_r+0x374>
8000ae52:	e0 48 00 69 	cp.w	r8,105
8000ae56:	c0 50       	breq	8000ae60 <_strtod_r+0x374>
8000ae58:	e0 48 00 6e 	cp.w	r8,110
8000ae5c:	c6 41       	brne	8000af24 <_strtod_r+0x438>
8000ae5e:	c3 18       	rjmp	8000aec0 <_strtod_r+0x3d4>
8000ae60:	41 88       	lddsp	r8,sp[0x60]
8000ae62:	fe ca cd e6 	sub	r10,pc,-12826
8000ae66:	c0 d8       	rjmp	8000ae80 <_strtod_r+0x394>
8000ae68:	2f f8       	sub	r8,-1
8000ae6a:	11 89       	ld.ub	r9,r8[0x0]
8000ae6c:	e0 49 00 40 	cp.w	r9,64
8000ae70:	e0 8a 00 06 	brle	8000ae7c <_strtod_r+0x390>
8000ae74:	e0 49 00 5a 	cp.w	r9,90
8000ae78:	f7 b9 0a e0 	suble	r9,-32
8000ae7c:	16 39       	cp.w	r9,r11
8000ae7e:	c5 31       	brne	8000af24 <_strtod_r+0x438>
8000ae80:	15 3b       	ld.ub	r11,r10++
8000ae82:	58 0b       	cp.w	r11,0
8000ae84:	cf 21       	brne	8000ae68 <_strtod_r+0x37c>
8000ae86:	51 88       	stdsp	sp[0x60],r8
8000ae88:	10 9a       	mov	r10,r8
8000ae8a:	fe cb ce 0a 	sub	r11,pc,-12790
8000ae8e:	c0 c8       	rjmp	8000aea6 <_strtod_r+0x3ba>
8000ae90:	15 89       	ld.ub	r9,r10[0x0]
8000ae92:	e0 49 00 40 	cp.w	r9,64
8000ae96:	e0 8a 00 06 	brle	8000aea2 <_strtod_r+0x3b6>
8000ae9a:	e0 49 00 5a 	cp.w	r9,90
8000ae9e:	f7 b9 0a e0 	suble	r9,-32
8000aea2:	18 39       	cp.w	r9,r12
8000aea4:	c0 91       	brne	8000aeb6 <_strtod_r+0x3ca>
8000aea6:	f4 c9 ff ff 	sub	r9,r10,-1
8000aeaa:	17 3c       	ld.ub	r12,r11++
8000aeac:	12 9a       	mov	r10,r9
8000aeae:	58 0c       	cp.w	r12,0
8000aeb0:	cf 01       	brne	8000ae90 <_strtod_r+0x3a4>
8000aeb2:	51 89       	stdsp	sp[0x60],r9
8000aeb4:	c0 38       	rjmp	8000aeba <_strtod_r+0x3ce>
8000aeb6:	2f f8       	sub	r8,-1
8000aeb8:	51 88       	stdsp	sp[0x60],r8
8000aeba:	fc 18 7f f0 	movh	r8,0x7ff0
8000aebe:	c2 e8       	rjmp	8000af1a <_strtod_r+0x42e>
8000aec0:	41 89       	lddsp	r9,sp[0x60]
8000aec2:	fe ca ce 3a 	sub	r10,pc,-12742
8000aec6:	c0 c8       	rjmp	8000aede <_strtod_r+0x3f2>
8000aec8:	13 88       	ld.ub	r8,r9[0x0]
8000aeca:	e0 48 00 40 	cp.w	r8,64
8000aece:	e0 8a 00 06 	brle	8000aeda <_strtod_r+0x3ee>
8000aed2:	e0 48 00 5a 	cp.w	r8,90
8000aed6:	f7 b8 0a e0 	suble	r8,-32
8000aeda:	16 38       	cp.w	r8,r11
8000aedc:	c2 41       	brne	8000af24 <_strtod_r+0x438>
8000aede:	f2 c8 ff ff 	sub	r8,r9,-1
8000aee2:	15 3b       	ld.ub	r11,r10++
8000aee4:	10 99       	mov	r9,r8
8000aee6:	58 0b       	cp.w	r11,0
8000aee8:	cf 01       	brne	8000aec8 <_strtod_r+0x3dc>
8000aeea:	51 88       	stdsp	sp[0x60],r8
8000aeec:	11 89       	ld.ub	r9,r8[0x0]
8000aeee:	32 88       	mov	r8,40
8000aef0:	f0 09 18 00 	cp.b	r9,r8
8000aef4:	c1 11       	brne	8000af16 <_strtod_r+0x42a>
8000aef6:	fa ca ff c8 	sub	r10,sp,-56
8000aefa:	e0 6b 05 b0 	mov	r11,1456
8000aefe:	fa cc ff a0 	sub	r12,sp,-96
8000af02:	e0 a0 0b 23 	rcall	8000c548 <__hexnan>
8000af06:	58 5c       	cp.w	r12,5
8000af08:	c0 71       	brne	8000af16 <_strtod_r+0x42a>
8000af0a:	40 f8       	lddsp	r8,sp[0x3c]
8000af0c:	ea 18 7f f0 	orh	r8,0x7ff0
8000af10:	8f 08       	st.w	r7[0x0],r8
8000af12:	40 e8       	lddsp	r8,sp[0x38]
8000af14:	c0 58       	rjmp	8000af1e <_strtod_r+0x432>
8000af16:	fc 18 7f f8 	movh	r8,0x7ff8
8000af1a:	8f 08       	st.w	r7[0x0],r8
8000af1c:	30 08       	mov	r8,0
8000af1e:	8f 18       	st.w	r7[0x4],r8
8000af20:	e0 8f 04 04 	bral	8000b728 <_strtod_r+0xc3c>
8000af24:	30 0b       	mov	r11,0
8000af26:	51 82       	stdsp	sp[0x60],r2
8000af28:	50 8b       	stdsp	sp[0x20],r11
8000af2a:	e0 8f 03 ff 	bral	8000b728 <_strtod_r+0xc3c>
8000af2e:	58 0a       	cp.w	r10,0
8000af30:	ea 0a 17 00 	moveq	r10,r5
8000af34:	40 31       	lddsp	r1,sp[0xc]
8000af36:	50 5a       	stdsp	sp[0x14],r10
8000af38:	16 11       	sub	r1,r11
8000af3a:	06 9c       	mov	r12,r3
8000af3c:	e0 a0 0e 43 	rcall	8000cbc2 <__avr32_u32_to_f64>
8000af40:	ee eb 00 00 	st.d	r7[0],r10
8000af44:	31 02       	mov	r2,16
8000af46:	ea 02 0d 42 	min	r2,r5,r2
8000af4a:	58 92       	cp.w	r2,9
8000af4c:	e0 8a 00 19 	brle	8000af7e <_strtod_r+0x492>
8000af50:	fa e8 00 48 	ld.d	r8,sp[72]
8000af54:	e4 cb 00 09 	sub	r11,r2,9
8000af58:	fe ca cf e8 	sub	r10,pc,-12312
8000af5c:	f4 0b 02 3a 	ld.d	r10,r10[r11<<0x3]
8000af60:	e0 a0 0b da 	rcall	8000c714 <__avr32_f64_mul>
8000af64:	08 9c       	mov	r12,r4
8000af66:	fa eb 00 04 	st.d	sp[4],r10
8000af6a:	e0 a0 0e 2c 	rcall	8000cbc2 <__avr32_u32_to_f64>
8000af6e:	14 98       	mov	r8,r10
8000af70:	16 99       	mov	r9,r11
8000af72:	fa ea 00 04 	ld.d	r10,sp[4]
8000af76:	e0 a0 0d 89 	rcall	8000ca88 <__avr32_f64_add>
8000af7a:	ee eb 00 00 	st.d	r7[0],r10
8000af7e:	58 f5       	cp.w	r5,15
8000af80:	e0 89 00 2b 	brgt	8000afd6 <_strtod_r+0x4ea>
8000af84:	58 01       	cp.w	r1,0
8000af86:	e0 80 03 d1 	breq	8000b728 <_strtod_r+0xc3c>
8000af8a:	e0 8a 00 19 	brle	8000afbc <_strtod_r+0x4d0>
8000af8e:	59 61       	cp.w	r1,22
8000af90:	e0 8a 00 0a 	brle	8000afa4 <_strtod_r+0x4b8>
8000af94:	ea 08 11 0f 	rsub	r8,r5,15
8000af98:	f0 c9 ff ea 	sub	r9,r8,-22
8000af9c:	12 31       	cp.w	r1,r9
8000af9e:	e0 89 00 1c 	brgt	8000afd6 <_strtod_r+0x4ea>
8000afa2:	10 11       	sub	r1,r8
8000afa4:	fe c8 d0 34 	sub	r8,pc,-12236
8000afa8:	fa ea 00 48 	ld.d	r10,sp[72]
8000afac:	f0 01 02 38 	ld.d	r8,r8[r1<<0x3]
8000afb0:	e0 a0 0b b2 	rcall	8000c714 <__avr32_f64_mul>
8000afb4:	ee eb 00 00 	st.d	r7[0],r10
8000afb8:	e0 8f 03 b8 	bral	8000b728 <_strtod_r+0xc3c>
8000afbc:	5a a1       	cp.w	r1,-22
8000afbe:	c0 c5       	brlt	8000afd6 <_strtod_r+0x4ea>
8000afc0:	fe c8 d0 50 	sub	r8,pc,-12208
8000afc4:	fa ea 00 48 	ld.d	r10,sp[72]
8000afc8:	f0 01 01 31 	sub	r1,r8,r1<<0x3
8000afcc:	e2 e8 00 00 	ld.d	r8,r1[0]
8000afd0:	e0 a0 0e e8 	rcall	8000cda0 <__avr32_f64_div>
8000afd4:	cf 0b       	rjmp	8000afb4 <_strtod_r+0x4c8>
8000afd6:	ea 02 01 04 	sub	r4,r5,r2
8000afda:	02 04       	add	r4,r1
8000afdc:	58 04       	cp.w	r4,0
8000afde:	e0 8a 00 72 	brle	8000b0c2 <_strtod_r+0x5d6>
8000afe2:	f1 d4 c0 04 	bfextu	r8,r4,0x0,0x4
8000afe6:	c0 b0       	breq	8000affc <_strtod_r+0x510>
8000afe8:	fa ea 00 48 	ld.d	r10,sp[72]
8000afec:	fe c9 d0 7c 	sub	r9,pc,-12164
8000aff0:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000aff4:	e0 a0 0b 90 	rcall	8000c714 <__avr32_f64_mul>
8000aff8:	ee eb 00 00 	st.d	r7[0],r10
8000affc:	e0 14 ff f0 	andl	r4,0xfff0
8000b000:	e0 80 00 d2 	breq	8000b1a4 <_strtod_r+0x6b8>
8000b004:	e0 44 01 34 	cp.w	r4,308
8000b008:	e0 8a 00 15 	brle	8000b032 <_strtod_r+0x546>
8000b00c:	30 05       	mov	r5,0
8000b00e:	0a 92       	mov	r2,r5
8000b010:	50 75       	stdsp	sp[0x1c],r5
8000b012:	0a 90       	mov	r0,r5
8000b014:	c0 28       	rjmp	8000b018 <_strtod_r+0x52c>
8000b016:	06 95       	mov	r5,r3
8000b018:	32 28       	mov	r8,34
8000b01a:	8d 38       	st.w	r6[0xc],r8
8000b01c:	fc 18 7f f0 	movh	r8,0x7ff0
8000b020:	8f 08       	st.w	r7[0x0],r8
8000b022:	30 08       	mov	r8,0
8000b024:	8f 18       	st.w	r7[0x4],r8
8000b026:	40 7a       	lddsp	r10,sp[0x1c]
8000b028:	58 0a       	cp.w	r10,0
8000b02a:	e0 81 03 6b 	brne	8000b700 <_strtod_r+0xc14>
8000b02e:	e0 8f 03 7d 	bral	8000b728 <_strtod_r+0xc3c>
8000b032:	fa e8 00 48 	ld.d	r8,sp[72]
8000b036:	a5 44       	asr	r4,0x4
8000b038:	fa e9 00 04 	st.d	sp[4],r8
8000b03c:	fe c2 d0 04 	sub	r2,pc,-12284
8000b040:	30 00       	mov	r0,0
8000b042:	c0 f8       	rjmp	8000b060 <_strtod_r+0x574>
8000b044:	2f f0       	sub	r0,-1
8000b046:	ed b4 00 00 	bld	r4,0x0
8000b04a:	c0 91       	brne	8000b05c <_strtod_r+0x570>
8000b04c:	fa ea 00 04 	ld.d	r10,sp[4]
8000b050:	e4 e8 00 00 	ld.d	r8,r2[0]
8000b054:	e0 a0 0b 60 	rcall	8000c714 <__avr32_f64_mul>
8000b058:	ee eb 00 00 	st.d	r7[0],r10
8000b05c:	a1 54       	asr	r4,0x1
8000b05e:	2f 82       	sub	r2,-8
8000b060:	58 14       	cp.w	r4,1
8000b062:	fe 99 ff f1 	brgt	8000b044 <_strtod_r+0x558>
8000b066:	41 24       	lddsp	r4,sp[0x48]
8000b068:	fc 18 fc b0 	movh	r8,0xfcb0
8000b06c:	e8 08 00 08 	add	r8,r4,r8
8000b070:	8f 08       	st.w	r7[0x0],r8
8000b072:	fe c8 d0 3a 	sub	r8,pc,-12230
8000b076:	fa ea 00 48 	ld.d	r10,sp[72]
8000b07a:	f0 00 02 38 	ld.d	r8,r8[r0<<0x3]
8000b07e:	e0 a0 0b 4b 	rcall	8000c714 <__avr32_f64_mul>
8000b082:	ee eb 00 00 	st.d	r7[0],r10
8000b086:	08 98       	mov	r8,r4
8000b088:	fc 1e 7c a0 	movh	lr,0x7ca0
8000b08c:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b090:	1c 38       	cp.w	r8,lr
8000b092:	fe 9b ff bd 	brhi	8000b00c <_strtod_r+0x520>
8000b096:	fc 1c 7c 90 	movh	r12,0x7c90
8000b09a:	18 38       	cp.w	r8,r12
8000b09c:	e0 88 00 0c 	brls	8000b0b4 <_strtod_r+0x5c8>
8000b0a0:	e0 68 ff ff 	mov	r8,65535
8000b0a4:	ea 18 7f ef 	orh	r8,0x7fef
8000b0a8:	8f 08       	st.w	r7[0x0],r8
8000b0aa:	3f f8       	mov	r8,-1
8000b0ac:	8f 18       	st.w	r7[0x4],r8
8000b0ae:	30 0b       	mov	r11,0
8000b0b0:	50 1b       	stdsp	sp[0x4],r11
8000b0b2:	c7 b8       	rjmp	8000b1a8 <_strtod_r+0x6bc>
8000b0b4:	fc 18 03 50 	movh	r8,0x350
8000b0b8:	10 04       	add	r4,r8
8000b0ba:	8f 04       	st.w	r7[0x0],r4
8000b0bc:	30 0a       	mov	r10,0
8000b0be:	50 1a       	stdsp	sp[0x4],r10
8000b0c0:	c7 48       	rjmp	8000b1a8 <_strtod_r+0x6bc>
8000b0c2:	58 04       	cp.w	r4,0
8000b0c4:	c7 00       	breq	8000b1a4 <_strtod_r+0x6b8>
8000b0c6:	5c 34       	neg	r4
8000b0c8:	f1 d4 c0 04 	bfextu	r8,r4,0x0,0x4
8000b0cc:	c0 b0       	breq	8000b0e2 <_strtod_r+0x5f6>
8000b0ce:	fa ea 00 48 	ld.d	r10,sp[72]
8000b0d2:	fe c9 d1 62 	sub	r9,pc,-11934
8000b0d6:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000b0da:	e0 a0 0e 63 	rcall	8000cda0 <__avr32_f64_div>
8000b0de:	ee eb 00 00 	st.d	r7[0],r10
8000b0e2:	a5 44       	asr	r4,0x4
8000b0e4:	c6 00       	breq	8000b1a4 <_strtod_r+0x6b8>
8000b0e6:	59 f4       	cp.w	r4,31
8000b0e8:	e0 89 00 4c 	brgt	8000b180 <_strtod_r+0x694>
8000b0ec:	08 98       	mov	r8,r4
8000b0ee:	e2 18 00 10 	andl	r8,0x10,COH
8000b0f2:	f9 b8 01 6a 	movne	r8,106
8000b0f6:	fe c2 d0 6a 	sub	r2,pc,-12182
8000b0fa:	50 18       	stdsp	sp[0x4],r8
8000b0fc:	fa e8 00 48 	ld.d	r8,sp[72]
8000b100:	fa e9 00 0c 	st.d	sp[12],r8
8000b104:	c0 f8       	rjmp	8000b122 <_strtod_r+0x636>
8000b106:	d7 03       	nop
8000b108:	ed b4 00 00 	bld	r4,0x0
8000b10c:	c0 91       	brne	8000b11e <_strtod_r+0x632>
8000b10e:	fa ea 00 0c 	ld.d	r10,sp[12]
8000b112:	e4 e8 00 00 	ld.d	r8,r2[0]
8000b116:	e0 a0 0a ff 	rcall	8000c714 <__avr32_f64_mul>
8000b11a:	ee eb 00 00 	st.d	r7[0],r10
8000b11e:	a1 54       	asr	r4,0x1
8000b120:	2f 82       	sub	r2,-8
8000b122:	58 04       	cp.w	r4,0
8000b124:	fe 99 ff f2 	brgt	8000b108 <_strtod_r+0x61c>
8000b128:	40 18       	lddsp	r8,sp[0x4]
8000b12a:	58 08       	cp.w	r8,0
8000b12c:	c2 30       	breq	8000b172 <_strtod_r+0x686>
8000b12e:	41 29       	lddsp	r9,sp[0x48]
8000b130:	f1 d9 c2 8b 	bfextu	r8,r9,0x14,0xb
8000b134:	f0 08 11 6b 	rsub	r8,r8,107
8000b138:	58 08       	cp.w	r8,0
8000b13a:	e0 8a 00 1c 	brle	8000b172 <_strtod_r+0x686>
8000b13e:	59 f8       	cp.w	r8,31
8000b140:	e0 8a 00 13 	brle	8000b166 <_strtod_r+0x67a>
8000b144:	30 0a       	mov	r10,0
8000b146:	8f 1a       	st.w	r7[0x4],r10
8000b148:	e0 48 00 34 	cp.w	r8,52
8000b14c:	e0 8a 00 06 	brle	8000b158 <_strtod_r+0x66c>
8000b150:	fc 18 03 70 	movh	r8,0x370
8000b154:	8f 08       	st.w	r7[0x0],r8
8000b156:	c0 e8       	rjmp	8000b172 <_strtod_r+0x686>
8000b158:	3f fa       	mov	r10,-1
8000b15a:	f4 08 09 48 	lsl	r8,r10,r8
8000b15e:	f1 e9 00 09 	and	r9,r8,r9
8000b162:	8f 09       	st.w	r7[0x0],r9
8000b164:	c0 78       	rjmp	8000b172 <_strtod_r+0x686>
8000b166:	3f f9       	mov	r9,-1
8000b168:	f2 08 09 48 	lsl	r8,r9,r8
8000b16c:	41 39       	lddsp	r9,sp[0x4c]
8000b16e:	12 68       	and	r8,r9
8000b170:	8f 18       	st.w	r7[0x4],r8
8000b172:	30 08       	mov	r8,0
8000b174:	30 09       	mov	r9,0
8000b176:	fa ea 00 48 	ld.d	r10,sp[72]
8000b17a:	e0 a0 0d 98 	rcall	8000ccaa <__avr32_f64_cmp_eq>
8000b17e:	c1 50       	breq	8000b1a8 <_strtod_r+0x6bc>
8000b180:	30 05       	mov	r5,0
8000b182:	0a 92       	mov	r2,r5
8000b184:	50 75       	stdsp	sp[0x1c],r5
8000b186:	0a 90       	mov	r0,r5
8000b188:	c0 28       	rjmp	8000b18c <_strtod_r+0x6a0>
8000b18a:	06 95       	mov	r5,r3
8000b18c:	30 08       	mov	r8,0
8000b18e:	30 09       	mov	r9,0
8000b190:	ee e9 00 00 	st.d	r7[0],r8
8000b194:	32 28       	mov	r8,34
8000b196:	8d 38       	st.w	r6[0xc],r8
8000b198:	40 71       	lddsp	r1,sp[0x1c]
8000b19a:	58 01       	cp.w	r1,0
8000b19c:	e0 81 02 b2 	brne	8000b700 <_strtod_r+0xc14>
8000b1a0:	e0 8f 02 c4 	bral	8000b728 <_strtod_r+0xc3c>
8000b1a4:	30 0e       	mov	lr,0
8000b1a6:	50 1e       	stdsp	sp[0x4],lr
8000b1a8:	06 98       	mov	r8,r3
8000b1aa:	0a 99       	mov	r9,r5
8000b1ac:	40 5a       	lddsp	r10,sp[0x14]
8000b1ae:	40 7b       	lddsp	r11,sp[0x1c]
8000b1b0:	0c 9c       	mov	r12,r6
8000b1b2:	fe b0 f9 91 	rcall	8000a4d4 <__s2b>
8000b1b6:	50 7c       	stdsp	sp[0x1c],r12
8000b1b8:	2f 4c       	sub	r12,-12
8000b1ba:	50 dc       	stdsp	sp[0x34],r12
8000b1bc:	e2 0c 11 00 	rsub	r12,r1,0
8000b1c0:	50 cc       	stdsp	sp[0x30],r12
8000b1c2:	40 7a       	lddsp	r10,sp[0x1c]
8000b1c4:	0c 9c       	mov	r12,r6
8000b1c6:	74 1b       	ld.w	r11,r10[0x4]
8000b1c8:	fe b0 f7 44 	rcall	8000a050 <_Balloc>
8000b1cc:	40 79       	lddsp	r9,sp[0x1c]
8000b1ce:	40 db       	lddsp	r11,sp[0x34]
8000b1d0:	72 4a       	ld.w	r10,r9[0x10]
8000b1d2:	18 90       	mov	r0,r12
8000b1d4:	2f ea       	sub	r10,-2
8000b1d6:	2f 4c       	sub	r12,-12
8000b1d8:	a3 6a       	lsl	r10,0x2
8000b1da:	fe b0 ca 89 	rcall	800046ec <memcpy>
8000b1de:	fa ea 00 48 	ld.d	r10,sp[72]
8000b1e2:	fa c8 ff 9c 	sub	r8,sp,-100
8000b1e6:	fa c9 ff 98 	sub	r9,sp,-104
8000b1ea:	0c 9c       	mov	r12,r6
8000b1ec:	fe b0 f7 6a 	rcall	8000a0c0 <__d2b>
8000b1f0:	30 1b       	mov	r11,1
8000b1f2:	51 7c       	stdsp	sp[0x5c],r12
8000b1f4:	0c 9c       	mov	r12,r6
8000b1f6:	fe b0 f8 e3 	rcall	8000a3bc <__i2b>
8000b1fa:	41 ab       	lddsp	r11,sp[0x68]
8000b1fc:	58 01       	cp.w	r1,0
8000b1fe:	f9 ba 04 00 	movge	r10,0
8000b202:	e2 03 17 40 	movge	r3,r1
8000b206:	e2 05 17 40 	movge	r5,r1
8000b20a:	f4 08 17 40 	movge	r8,r10
8000b20e:	f9 b3 05 00 	movlt	r3,0
8000b212:	fb fa 50 0c 	ld.wlt	r10,sp[0x30]
8000b216:	f4 08 17 50 	movlt	r8,r10
8000b21a:	e6 05 17 50 	movlt	r5,r3
8000b21e:	18 92       	mov	r2,r12
8000b220:	58 0b       	cp.w	r11,0
8000b222:	c0 45       	brlt	8000b22a <_strtod_r+0x73e>
8000b224:	f4 0b 00 08 	add	r8,r10,r11
8000b228:	c0 28       	rjmp	8000b22c <_strtod_r+0x740>
8000b22a:	16 15       	sub	r5,r11
8000b22c:	40 1e       	lddsp	lr,sp[0x4]
8000b22e:	41 99       	lddsp	r9,sp[0x64]
8000b230:	1c 1b       	sub	r11,lr
8000b232:	1c 05       	add	r5,lr
8000b234:	f6 cc fb cd 	sub	r12,r11,-1075
8000b238:	f2 0e 11 36 	rsub	lr,r9,54
8000b23c:	f6 09 00 09 	add	r9,r11,r9
8000b240:	fe 59 fc 02 	cp.w	r9,-1022
8000b244:	fc 09 17 90 	movgt	r9,lr
8000b248:	f8 09 17 a0 	movle	r9,r12
8000b24c:	12 05       	add	r5,r9
8000b24e:	f2 08 00 04 	add	r4,r9,r8
8000b252:	e8 05 0d 49 	min	r9,r4,r5
8000b256:	f2 08 0d 49 	min	r9,r9,r8
8000b25a:	58 09       	cp.w	r9,0
8000b25c:	e0 89 00 04 	brgt	8000b264 <_strtod_r+0x778>
8000b260:	50 38       	stdsp	sp[0xc],r8
8000b262:	c0 58       	rjmp	8000b26c <_strtod_r+0x780>
8000b264:	12 18       	sub	r8,r9
8000b266:	12 14       	sub	r4,r9
8000b268:	50 38       	stdsp	sp[0xc],r8
8000b26a:	12 15       	sub	r5,r9
8000b26c:	58 0a       	cp.w	r10,0
8000b26e:	c1 30       	breq	8000b294 <_strtod_r+0x7a8>
8000b270:	04 9b       	mov	r11,r2
8000b272:	0c 9c       	mov	r12,r6
8000b274:	fe b0 f8 ea 	rcall	8000a448 <__pow5mult>
8000b278:	41 7a       	lddsp	r10,sp[0x5c]
8000b27a:	18 9b       	mov	r11,r12
8000b27c:	18 92       	mov	r2,r12
8000b27e:	0c 9c       	mov	r12,r6
8000b280:	fe b0 f8 1e 	rcall	8000a2bc <__multiply>
8000b284:	18 98       	mov	r8,r12
8000b286:	41 7b       	lddsp	r11,sp[0x5c]
8000b288:	50 08       	stdsp	sp[0x0],r8
8000b28a:	0c 9c       	mov	r12,r6
8000b28c:	fe b0 f6 c8 	rcall	8000a01c <_Bfree>
8000b290:	40 08       	lddsp	r8,sp[0x0]
8000b292:	51 78       	stdsp	sp[0x5c],r8
8000b294:	58 04       	cp.w	r4,0
8000b296:	e0 8a 00 08 	brle	8000b2a6 <_strtod_r+0x7ba>
8000b29a:	08 9a       	mov	r10,r4
8000b29c:	41 7b       	lddsp	r11,sp[0x5c]
8000b29e:	0c 9c       	mov	r12,r6
8000b2a0:	fe b0 f7 ca 	rcall	8000a234 <__lshift>
8000b2a4:	51 7c       	stdsp	sp[0x5c],r12
8000b2a6:	58 03       	cp.w	r3,0
8000b2a8:	c0 70       	breq	8000b2b6 <_strtod_r+0x7ca>
8000b2aa:	00 9b       	mov	r11,r0
8000b2ac:	06 9a       	mov	r10,r3
8000b2ae:	0c 9c       	mov	r12,r6
8000b2b0:	fe b0 f8 cc 	rcall	8000a448 <__pow5mult>
8000b2b4:	18 90       	mov	r0,r12
8000b2b6:	58 05       	cp.w	r5,0
8000b2b8:	e0 8a 00 08 	brle	8000b2c8 <_strtod_r+0x7dc>
8000b2bc:	00 9b       	mov	r11,r0
8000b2be:	0a 9a       	mov	r10,r5
8000b2c0:	0c 9c       	mov	r12,r6
8000b2c2:	fe b0 f7 b9 	rcall	8000a234 <__lshift>
8000b2c6:	18 90       	mov	r0,r12
8000b2c8:	40 3c       	lddsp	r12,sp[0xc]
8000b2ca:	58 0c       	cp.w	r12,0
8000b2cc:	e0 8a 00 08 	brle	8000b2dc <_strtod_r+0x7f0>
8000b2d0:	18 9a       	mov	r10,r12
8000b2d2:	04 9b       	mov	r11,r2
8000b2d4:	0c 9c       	mov	r12,r6
8000b2d6:	fe b0 f7 af 	rcall	8000a234 <__lshift>
8000b2da:	18 92       	mov	r2,r12
8000b2dc:	00 9a       	mov	r10,r0
8000b2de:	41 7b       	lddsp	r11,sp[0x5c]
8000b2e0:	0c 9c       	mov	r12,r6
8000b2e2:	fe b0 f7 41 	rcall	8000a164 <__mdiff>
8000b2e6:	30 09       	mov	r9,0
8000b2e8:	78 3a       	ld.w	r10,r12[0xc]
8000b2ea:	18 93       	mov	r3,r12
8000b2ec:	04 9b       	mov	r11,r2
8000b2ee:	50 3a       	stdsp	sp[0xc],r10
8000b2f0:	99 39       	st.w	r12[0xc],r9
8000b2f2:	fe b0 f5 a6 	rcall	80009e3e <__mcmp>
8000b2f6:	c2 a4       	brge	8000b34a <_strtod_r+0x85e>
8000b2f8:	06 95       	mov	r5,r3
8000b2fa:	40 38       	lddsp	r8,sp[0xc]
8000b2fc:	58 08       	cp.w	r8,0
8000b2fe:	e0 81 01 e5 	brne	8000b6c8 <_strtod_r+0xbdc>
8000b302:	41 38       	lddsp	r8,sp[0x4c]
8000b304:	58 08       	cp.w	r8,0
8000b306:	e0 81 01 e1 	brne	8000b6c8 <_strtod_r+0xbdc>
8000b30a:	41 28       	lddsp	r8,sp[0x48]
8000b30c:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8000b310:	e0 81 01 dc 	brne	8000b6c8 <_strtod_r+0xbdc>
8000b314:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b318:	fc 11 06 b0 	movh	r1,0x6b0
8000b31c:	02 38       	cp.w	r8,r1
8000b31e:	e0 88 01 d5 	brls	8000b6c8 <_strtod_r+0xbdc>
8000b322:	66 58       	ld.w	r8,r3[0x14]
8000b324:	58 08       	cp.w	r8,0
8000b326:	c0 51       	brne	8000b330 <_strtod_r+0x844>
8000b328:	66 48       	ld.w	r8,r3[0x10]
8000b32a:	58 18       	cp.w	r8,1
8000b32c:	e0 8a 01 ce 	brle	8000b6c8 <_strtod_r+0xbdc>
8000b330:	0a 9b       	mov	r11,r5
8000b332:	30 1a       	mov	r10,1
8000b334:	0c 9c       	mov	r12,r6
8000b336:	fe b0 f7 7f 	rcall	8000a234 <__lshift>
8000b33a:	04 9b       	mov	r11,r2
8000b33c:	18 95       	mov	r5,r12
8000b33e:	fe b0 f5 80 	rcall	80009e3e <__mcmp>
8000b342:	e0 89 00 33 	brgt	8000b3a8 <_strtod_r+0x8bc>
8000b346:	e0 8f 01 c1 	bral	8000b6c8 <_strtod_r+0xbdc>
8000b34a:	58 0c       	cp.w	r12,0
8000b34c:	c7 91       	brne	8000b43e <_strtod_r+0x952>
8000b34e:	06 95       	mov	r5,r3
8000b350:	41 28       	lddsp	r8,sp[0x48]
8000b352:	40 3e       	lddsp	lr,sp[0xc]
8000b354:	58 0e       	cp.w	lr,0
8000b356:	c2 30       	breq	8000b39c <_strtod_r+0x8b0>
8000b358:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8000b35c:	ee 59 ff ff 	cp.w	r9,1048575
8000b360:	c4 31       	brne	8000b3e6 <_strtod_r+0x8fa>
8000b362:	41 3a       	lddsp	r10,sp[0x4c]
8000b364:	40 1c       	lddsp	r12,sp[0x4]
8000b366:	58 0c       	cp.w	r12,0
8000b368:	c1 00       	breq	8000b388 <_strtod_r+0x89c>
8000b36a:	10 99       	mov	r9,r8
8000b36c:	fc 1b 06 a0 	movh	r11,0x6a0
8000b370:	e6 19 7f f0 	andh	r9,0x7ff0,COH
8000b374:	16 39       	cp.w	r9,r11
8000b376:	e0 8b 00 09 	brhi	8000b388 <_strtod_r+0x89c>
8000b37a:	b5 89       	lsr	r9,0x14
8000b37c:	3f fb       	mov	r11,-1
8000b37e:	f2 09 11 6b 	rsub	r9,r9,107
8000b382:	f6 09 09 49 	lsl	r9,r11,r9
8000b386:	c0 28       	rjmp	8000b38a <_strtod_r+0x89e>
8000b388:	3f f9       	mov	r9,-1
8000b38a:	12 3a       	cp.w	r10,r9
8000b38c:	c2 d1       	brne	8000b3e6 <_strtod_r+0x8fa>
8000b38e:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b392:	f0 28 00 00 	sub	r8,-1048576
8000b396:	8f 08       	st.w	r7[0x0],r8
8000b398:	30 08       	mov	r8,0
8000b39a:	c2 48       	rjmp	8000b3e2 <_strtod_r+0x8f6>
8000b39c:	f1 d8 c0 14 	bfextu	r8,r8,0x0,0x14
8000b3a0:	c2 31       	brne	8000b3e6 <_strtod_r+0x8fa>
8000b3a2:	41 38       	lddsp	r8,sp[0x4c]
8000b3a4:	58 08       	cp.w	r8,0
8000b3a6:	c2 01       	brne	8000b3e6 <_strtod_r+0x8fa>
8000b3a8:	40 1a       	lddsp	r10,sp[0x4]
8000b3aa:	58 0a       	cp.w	r10,0
8000b3ac:	c0 f0       	breq	8000b3ca <_strtod_r+0x8de>
8000b3ae:	41 28       	lddsp	r8,sp[0x48]
8000b3b0:	fc 19 06 b0 	movh	r9,0x6b0
8000b3b4:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b3b8:	12 38       	cp.w	r8,r9
8000b3ba:	e0 8b 00 08 	brhi	8000b3ca <_strtod_r+0x8de>
8000b3be:	fc 11 03 70 	movh	r1,0x370
8000b3c2:	02 38       	cp.w	r8,r1
8000b3c4:	e0 8b 01 85 	brhi	8000b6ce <_strtod_r+0xbe2>
8000b3c8:	ce 2a       	rjmp	8000b18c <_strtod_r+0x6a0>
8000b3ca:	41 28       	lddsp	r8,sp[0x48]
8000b3cc:	f0 69 00 00 	mov	r9,-1048576
8000b3d0:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b3d4:	12 08       	add	r8,r9
8000b3d6:	ea 18 00 0f 	orh	r8,0xf
8000b3da:	e8 18 ff ff 	orl	r8,0xffff
8000b3de:	8f 08       	st.w	r7[0x0],r8
8000b3e0:	3f f8       	mov	r8,-1
8000b3e2:	8f 18       	st.w	r7[0x4],r8
8000b3e4:	c7 29       	rjmp	8000b6c8 <_strtod_r+0xbdc>
8000b3e6:	41 38       	lddsp	r8,sp[0x4c]
8000b3e8:	ed b8 00 00 	bld	r8,0x0
8000b3ec:	e0 81 01 6e 	brne	8000b6c8 <_strtod_r+0xbdc>
8000b3f0:	fa ea 00 48 	ld.d	r10,sp[72]
8000b3f4:	fa eb 00 14 	st.d	sp[20],r10
8000b3f8:	40 3a       	lddsp	r10,sp[0xc]
8000b3fa:	58 0a       	cp.w	r10,0
8000b3fc:	c0 e0       	breq	8000b418 <_strtod_r+0x92c>
8000b3fe:	fa ea 00 14 	ld.d	r10,sp[20]
8000b402:	fe b0 f5 37 	rcall	80009e70 <__ulp>
8000b406:	14 98       	mov	r8,r10
8000b408:	16 99       	mov	r9,r11
8000b40a:	fa ea 00 14 	ld.d	r10,sp[20]
8000b40e:	e0 a0 0b 3d 	rcall	8000ca88 <__avr32_f64_add>
8000b412:	ee eb 00 00 	st.d	r7[0],r10
8000b416:	c5 99       	rjmp	8000b6c8 <_strtod_r+0xbdc>
8000b418:	fa ea 00 14 	ld.d	r10,sp[20]
8000b41c:	fe b0 f5 2a 	rcall	80009e70 <__ulp>
8000b420:	14 98       	mov	r8,r10
8000b422:	16 99       	mov	r9,r11
8000b424:	fa ea 00 14 	ld.d	r10,sp[20]
8000b428:	e0 a0 0a 62 	rcall	8000c8ec <__avr32_f64_sub>
8000b42c:	30 08       	mov	r8,0
8000b42e:	ee eb 00 00 	st.d	r7[0],r10
8000b432:	30 09       	mov	r9,0
8000b434:	e0 a0 0c 3b 	rcall	8000ccaa <__avr32_f64_cmp_eq>
8000b438:	e0 80 01 48 	breq	8000b6c8 <_strtod_r+0xbdc>
8000b43c:	ca 8a       	rjmp	8000b18c <_strtod_r+0x6a0>
8000b43e:	04 9b       	mov	r11,r2
8000b440:	06 9c       	mov	r12,r3
8000b442:	fe b0 f5 87 	rcall	80009f50 <__ratio>
8000b446:	16 95       	mov	r5,r11
8000b448:	14 94       	mov	r4,r10
8000b44a:	14 98       	mov	r8,r10
8000b44c:	0a 99       	mov	r9,r5
8000b44e:	30 0a       	mov	r10,0
8000b450:	fc 1b 40 00 	movh	r11,0x4000
8000b454:	e0 a0 0c 3e 	rcall	8000ccd0 <__avr32_f64_cmp_ge>
8000b458:	c3 a0       	breq	8000b4cc <_strtod_r+0x9e0>
8000b45a:	40 39       	lddsp	r9,sp[0xc]
8000b45c:	58 09       	cp.w	r9,0
8000b45e:	c0 50       	breq	8000b468 <_strtod_r+0x97c>
8000b460:	30 08       	mov	r8,0
8000b462:	fc 19 3f f0 	movh	r9,0x3ff0
8000b466:	c1 28       	rjmp	8000b48a <_strtod_r+0x99e>
8000b468:	41 38       	lddsp	r8,sp[0x4c]
8000b46a:	58 08       	cp.w	r8,0
8000b46c:	c0 61       	brne	8000b478 <_strtod_r+0x98c>
8000b46e:	41 28       	lddsp	r8,sp[0x48]
8000b470:	f1 d8 c0 14 	bfextu	r8,r8,0x0,0x14
8000b474:	c0 81       	brne	8000b484 <_strtod_r+0x998>
8000b476:	c1 08       	rjmp	8000b496 <_strtod_r+0x9aa>
8000b478:	58 18       	cp.w	r8,1
8000b47a:	c0 51       	brne	8000b484 <_strtod_r+0x998>
8000b47c:	41 28       	lddsp	r8,sp[0x48]
8000b47e:	58 08       	cp.w	r8,0
8000b480:	fe 90 fe 85 	breq	8000b18a <_strtod_r+0x69e>
8000b484:	30 08       	mov	r8,0
8000b486:	fc 19 bf f0 	movh	r9,0xbff0
8000b48a:	fa e9 00 50 	st.d	sp[80],r8
8000b48e:	fc 15 3f f0 	movh	r5,0x3ff0
8000b492:	30 04       	mov	r4,0
8000b494:	c3 18       	rjmp	8000b4f6 <_strtod_r+0xa0a>
8000b496:	30 08       	mov	r8,0
8000b498:	fc 19 3f f0 	movh	r9,0x3ff0
8000b49c:	08 9a       	mov	r10,r4
8000b49e:	0a 9b       	mov	r11,r5
8000b4a0:	e0 a0 0c 4c 	rcall	8000cd38 <__avr32_f64_cmp_lt>
8000b4a4:	c0 50       	breq	8000b4ae <_strtod_r+0x9c2>
8000b4a6:	fc 15 3f e0 	movh	r5,0x3fe0
8000b4aa:	30 04       	mov	r4,0
8000b4ac:	c0 a8       	rjmp	8000b4c0 <_strtod_r+0x9d4>
8000b4ae:	08 9a       	mov	r10,r4
8000b4b0:	0a 9b       	mov	r11,r5
8000b4b2:	30 08       	mov	r8,0
8000b4b4:	fc 19 3f e0 	movh	r9,0x3fe0
8000b4b8:	e0 a0 09 2e 	rcall	8000c714 <__avr32_f64_mul>
8000b4bc:	16 95       	mov	r5,r11
8000b4be:	14 94       	mov	r4,r10
8000b4c0:	0a 98       	mov	r8,r5
8000b4c2:	51 54       	stdsp	sp[0x54],r4
8000b4c4:	ee 18 80 00 	eorh	r8,0x8000
8000b4c8:	51 48       	stdsp	sp[0x50],r8
8000b4ca:	c1 68       	rjmp	8000b4f6 <_strtod_r+0xa0a>
8000b4cc:	08 9a       	mov	r10,r4
8000b4ce:	0a 9b       	mov	r11,r5
8000b4d0:	30 08       	mov	r8,0
8000b4d2:	fc 19 3f e0 	movh	r9,0x3fe0
8000b4d6:	e0 a0 09 1f 	rcall	8000c714 <__avr32_f64_mul>
8000b4da:	40 3e       	lddsp	lr,sp[0xc]
8000b4dc:	16 95       	mov	r5,r11
8000b4de:	14 94       	mov	r4,r10
8000b4e0:	0a 9a       	mov	r10,r5
8000b4e2:	08 98       	mov	r8,r4
8000b4e4:	ee 1a 80 00 	eorh	r10,0x8000
8000b4e8:	58 0e       	cp.w	lr,0
8000b4ea:	f4 09 17 00 	moveq	r9,r10
8000b4ee:	ea 09 17 10 	movne	r9,r5
8000b4f2:	fa e9 00 50 	st.d	sp[80],r8
8000b4f6:	41 29       	lddsp	r9,sp[0x48]
8000b4f8:	12 9c       	mov	r12,r9
8000b4fa:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
8000b4fe:	50 5c       	stdsp	sp[0x14],r12
8000b500:	fc 1b 7f e0 	movh	r11,0x7fe0
8000b504:	16 3c       	cp.w	r12,r11
8000b506:	c4 11       	brne	8000b588 <_strtod_r+0xa9c>
8000b508:	fa ea 00 48 	ld.d	r10,sp[72]
8000b50c:	fc 18 fc b0 	movh	r8,0xfcb0
8000b510:	fa eb 00 40 	st.d	sp[64],r10
8000b514:	f2 08 00 08 	add	r8,r9,r8
8000b518:	8f 08       	st.w	r7[0x0],r8
8000b51a:	fa e8 00 50 	ld.d	r8,sp[80]
8000b51e:	fa e9 00 24 	st.d	sp[36],r8
8000b522:	fe b0 f4 a7 	rcall	80009e70 <__ulp>
8000b526:	14 98       	mov	r8,r10
8000b528:	16 99       	mov	r9,r11
8000b52a:	fa ea 00 24 	ld.d	r10,sp[36]
8000b52e:	e0 a0 08 f3 	rcall	8000c714 <__avr32_f64_mul>
8000b532:	14 98       	mov	r8,r10
8000b534:	16 99       	mov	r9,r11
8000b536:	fa ea 00 48 	ld.d	r10,sp[72]
8000b53a:	e0 a0 0a a7 	rcall	8000ca88 <__avr32_f64_add>
8000b53e:	ee eb 00 00 	st.d	r7[0],r10
8000b542:	e0 6e ff ff 	mov	lr,65535
8000b546:	ea 1e 7c 9f 	orh	lr,0x7c9f
8000b54a:	41 28       	lddsp	r8,sp[0x48]
8000b54c:	10 99       	mov	r9,r8
8000b54e:	e6 19 7f f0 	andh	r9,0x7ff0,COH
8000b552:	1c 39       	cp.w	r9,lr
8000b554:	e0 88 00 15 	brls	8000b57e <_strtod_r+0xa92>
8000b558:	41 08       	lddsp	r8,sp[0x40]
8000b55a:	e0 6c ff ff 	mov	r12,65535
8000b55e:	ea 1c 7f ef 	orh	r12,0x7fef
8000b562:	18 38       	cp.w	r8,r12
8000b564:	c0 51       	brne	8000b56e <_strtod_r+0xa82>
8000b566:	41 18       	lddsp	r8,sp[0x44]
8000b568:	5b f8       	cp.w	r8,-1
8000b56a:	fe 90 fd 56 	breq	8000b016 <_strtod_r+0x52a>
8000b56e:	e0 68 ff ff 	mov	r8,65535
8000b572:	ea 18 7f ef 	orh	r8,0x7fef
8000b576:	8f 08       	st.w	r7[0x0],r8
8000b578:	3f f8       	mov	r8,-1
8000b57a:	8f 18       	st.w	r7[0x4],r8
8000b57c:	c9 48       	rjmp	8000b6a4 <_strtod_r+0xbb8>
8000b57e:	fc 19 03 50 	movh	r9,0x350
8000b582:	12 08       	add	r8,r9
8000b584:	8f 08       	st.w	r7[0x0],r8
8000b586:	c4 b8       	rjmp	8000b61c <_strtod_r+0xb30>
8000b588:	40 1b       	lddsp	r11,sp[0x4]
8000b58a:	40 5a       	lddsp	r10,sp[0x14]
8000b58c:	58 0b       	cp.w	r11,0
8000b58e:	5f 19       	srne	r9
8000b590:	fc 18 06 a0 	movh	r8,0x6a0
8000b594:	10 3a       	cp.w	r10,r8
8000b596:	5f 88       	srls	r8
8000b598:	f3 e8 00 08 	and	r8,r9,r8
8000b59c:	c2 a0       	breq	8000b5f0 <_strtod_r+0xb04>
8000b59e:	fc 1a ff c0 	movh	r10,0xffc0
8000b5a2:	e0 6b ff ff 	mov	r11,65535
8000b5a6:	ea 1b 41 df 	orh	r11,0x41df
8000b5aa:	0a 99       	mov	r9,r5
8000b5ac:	08 98       	mov	r8,r4
8000b5ae:	e0 a0 0b 91 	rcall	8000ccd0 <__avr32_f64_cmp_ge>
8000b5b2:	c1 70       	breq	8000b5e0 <_strtod_r+0xaf4>
8000b5b4:	0a 9b       	mov	r11,r5
8000b5b6:	08 9a       	mov	r10,r4
8000b5b8:	e0 a0 0a f0 	rcall	8000cb98 <__avr32_f64_to_u32>
8000b5bc:	f9 bc 00 01 	moveq	r12,1
8000b5c0:	e0 a0 0b 01 	rcall	8000cbc2 <__avr32_u32_to_f64>
8000b5c4:	40 3e       	lddsp	lr,sp[0xc]
8000b5c6:	16 95       	mov	r5,r11
8000b5c8:	14 94       	mov	r4,r10
8000b5ca:	0a 9a       	mov	r10,r5
8000b5cc:	08 98       	mov	r8,r4
8000b5ce:	ee 1a 80 00 	eorh	r10,0x8000
8000b5d2:	58 0e       	cp.w	lr,0
8000b5d4:	f4 09 17 00 	moveq	r9,r10
8000b5d8:	ea 09 17 10 	movne	r9,r5
8000b5dc:	fa e9 00 50 	st.d	sp[80],r8
8000b5e0:	41 49       	lddsp	r9,sp[0x50]
8000b5e2:	fc 18 06 b0 	movh	r8,0x6b0
8000b5e6:	40 5c       	lddsp	r12,sp[0x14]
8000b5e8:	f2 08 00 08 	add	r8,r9,r8
8000b5ec:	18 18       	sub	r8,r12
8000b5ee:	51 48       	stdsp	sp[0x50],r8
8000b5f0:	fa ea 00 50 	ld.d	r10,sp[80]
8000b5f4:	fa eb 00 24 	st.d	sp[36],r10
8000b5f8:	fa ea 00 48 	ld.d	r10,sp[72]
8000b5fc:	fe b0 f4 3a 	rcall	80009e70 <__ulp>
8000b600:	14 98       	mov	r8,r10
8000b602:	16 99       	mov	r9,r11
8000b604:	fa ea 00 24 	ld.d	r10,sp[36]
8000b608:	e0 a0 08 86 	rcall	8000c714 <__avr32_f64_mul>
8000b60c:	14 98       	mov	r8,r10
8000b60e:	16 99       	mov	r9,r11
8000b610:	fa ea 00 48 	ld.d	r10,sp[72]
8000b614:	e0 a0 0a 3a 	rcall	8000ca88 <__avr32_f64_add>
8000b618:	ee eb 00 00 	st.d	r7[0],r10
8000b61c:	41 2a       	lddsp	r10,sp[0x48]
8000b61e:	50 9a       	stdsp	sp[0x24],r10
8000b620:	40 19       	lddsp	r9,sp[0x4]
8000b622:	58 09       	cp.w	r9,0
8000b624:	c4 01       	brne	8000b6a4 <_strtod_r+0xbb8>
8000b626:	14 98       	mov	r8,r10
8000b628:	40 5e       	lddsp	lr,sp[0x14]
8000b62a:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8000b62e:	10 3e       	cp.w	lr,r8
8000b630:	c3 a1       	brne	8000b6a4 <_strtod_r+0xbb8>
8000b632:	0a 9b       	mov	r11,r5
8000b634:	08 9a       	mov	r10,r4
8000b636:	e0 a0 0a b3 	rcall	8000cb9c <__avr32_f64_to_s32>
8000b63a:	e0 a0 0a c8 	rcall	8000cbca <__avr32_s32_to_f64>
8000b63e:	14 98       	mov	r8,r10
8000b640:	16 99       	mov	r9,r11
8000b642:	08 9a       	mov	r10,r4
8000b644:	0a 9b       	mov	r11,r5
8000b646:	e0 a0 09 53 	rcall	8000c8ec <__avr32_f64_sub>
8000b64a:	40 3c       	lddsp	r12,sp[0xc]
8000b64c:	14 94       	mov	r4,r10
8000b64e:	16 95       	mov	r5,r11
8000b650:	58 0c       	cp.w	r12,0
8000b652:	c0 81       	brne	8000b662 <_strtod_r+0xb76>
8000b654:	41 38       	lddsp	r8,sp[0x4c]
8000b656:	58 08       	cp.w	r8,0
8000b658:	c0 51       	brne	8000b662 <_strtod_r+0xb76>
8000b65a:	40 99       	lddsp	r9,sp[0x24]
8000b65c:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
8000b660:	c1 70       	breq	8000b68e <_strtod_r+0xba2>
8000b662:	e0 68 35 95 	mov	r8,13717
8000b666:	ea 18 94 a0 	orh	r8,0x94a0
8000b66a:	e0 69 ff ff 	mov	r9,65535
8000b66e:	ea 19 3f df 	orh	r9,0x3fdf
8000b672:	08 9a       	mov	r10,r4
8000b674:	0a 9b       	mov	r11,r5
8000b676:	e0 a0 0b 61 	rcall	8000cd38 <__avr32_f64_cmp_lt>
8000b67a:	c4 21       	brne	8000b6fe <_strtod_r+0xc12>
8000b67c:	08 98       	mov	r8,r4
8000b67e:	0a 99       	mov	r9,r5
8000b680:	e0 6a e5 35 	mov	r10,58677
8000b684:	ea 1a 35 af 	orh	r10,0x35af
8000b688:	fc 1b 3f e0 	movh	r11,0x3fe0
8000b68c:	c0 98       	rjmp	8000b69e <_strtod_r+0xbb2>
8000b68e:	e0 68 35 95 	mov	r8,13717
8000b692:	ea 18 94 a0 	orh	r8,0x94a0
8000b696:	e0 69 ff ff 	mov	r9,65535
8000b69a:	ea 19 3f cf 	orh	r9,0x3fcf
8000b69e:	e0 a0 0b 4d 	rcall	8000cd38 <__avr32_f64_cmp_lt>
8000b6a2:	c2 e1       	brne	8000b6fe <_strtod_r+0xc12>
8000b6a4:	41 7b       	lddsp	r11,sp[0x5c]
8000b6a6:	0c 9c       	mov	r12,r6
8000b6a8:	fe b0 f4 ba 	rcall	8000a01c <_Bfree>
8000b6ac:	00 9b       	mov	r11,r0
8000b6ae:	0c 9c       	mov	r12,r6
8000b6b0:	fe b0 f4 b6 	rcall	8000a01c <_Bfree>
8000b6b4:	04 9b       	mov	r11,r2
8000b6b6:	0c 9c       	mov	r12,r6
8000b6b8:	fe b0 f4 b2 	rcall	8000a01c <_Bfree>
8000b6bc:	06 9b       	mov	r11,r3
8000b6be:	0c 9c       	mov	r12,r6
8000b6c0:	fe b0 f4 ae 	rcall	8000a01c <_Bfree>
8000b6c4:	fe 9f fd 7f 	bral	8000b1c2 <_strtod_r+0x6d6>
8000b6c8:	40 18       	lddsp	r8,sp[0x4]
8000b6ca:	58 08       	cp.w	r8,0
8000b6cc:	c1 a0       	breq	8000b700 <_strtod_r+0xc14>
8000b6ce:	fc 19 39 50 	movh	r9,0x3950
8000b6d2:	fa ea 00 48 	ld.d	r10,sp[72]
8000b6d6:	fa c8 ff c0 	sub	r8,sp,-64
8000b6da:	91 09       	st.w	r8[0x0],r9
8000b6dc:	30 09       	mov	r9,0
8000b6de:	91 19       	st.w	r8[0x4],r9
8000b6e0:	fa e8 00 40 	ld.d	r8,sp[64]
8000b6e4:	e0 a0 08 18 	rcall	8000c714 <__avr32_f64_mul>
8000b6e8:	ee eb 00 00 	st.d	r7[0],r10
8000b6ec:	41 28       	lddsp	r8,sp[0x48]
8000b6ee:	58 08       	cp.w	r8,0
8000b6f0:	c0 81       	brne	8000b700 <_strtod_r+0xc14>
8000b6f2:	41 38       	lddsp	r8,sp[0x4c]
8000b6f4:	58 08       	cp.w	r8,0
8000b6f6:	c0 51       	brne	8000b700 <_strtod_r+0xc14>
8000b6f8:	32 28       	mov	r8,34
8000b6fa:	8d 38       	st.w	r6[0xc],r8
8000b6fc:	c0 28       	rjmp	8000b700 <_strtod_r+0xc14>
8000b6fe:	06 95       	mov	r5,r3
8000b700:	41 7b       	lddsp	r11,sp[0x5c]
8000b702:	0c 9c       	mov	r12,r6
8000b704:	fe b0 f4 8c 	rcall	8000a01c <_Bfree>
8000b708:	00 9b       	mov	r11,r0
8000b70a:	0c 9c       	mov	r12,r6
8000b70c:	fe b0 f4 88 	rcall	8000a01c <_Bfree>
8000b710:	04 9b       	mov	r11,r2
8000b712:	0c 9c       	mov	r12,r6
8000b714:	fe b0 f4 84 	rcall	8000a01c <_Bfree>
8000b718:	40 7b       	lddsp	r11,sp[0x1c]
8000b71a:	0c 9c       	mov	r12,r6
8000b71c:	fe b0 f4 80 	rcall	8000a01c <_Bfree>
8000b720:	0a 9b       	mov	r11,r5
8000b722:	0c 9c       	mov	r12,r6
8000b724:	fe b0 f4 7c 	rcall	8000a01c <_Bfree>
8000b728:	40 b1       	lddsp	r1,sp[0x2c]
8000b72a:	58 01       	cp.w	r1,0
8000b72c:	fb f8 10 18 	ld.wne	r8,sp[0x60]
8000b730:	e3 f8 1a 00 	st.wne	r1[0x0],r8
8000b734:	40 8e       	lddsp	lr,sp[0x20]
8000b736:	41 28       	lddsp	r8,sp[0x48]
8000b738:	41 3a       	lddsp	r10,sp[0x4c]
8000b73a:	10 99       	mov	r9,r8
8000b73c:	ee 19 80 00 	eorh	r9,0x8000
8000b740:	58 0e       	cp.w	lr,0
8000b742:	f0 0b 17 00 	moveq	r11,r8
8000b746:	f2 0b 17 10 	movne	r11,r9
8000b74a:	2e 5d       	sub	sp,-108
8000b74c:	d8 32       	popm	r0-r7,pc
8000b74e:	d7 03       	nop

8000b750 <_strtol_r>:
8000b750:	d4 31       	pushm	r0-r7,lr
8000b752:	20 3d       	sub	sp,12
8000b754:	e0 68 01 98 	mov	r8,408
8000b758:	50 2c       	stdsp	sp[0x8],r12
8000b75a:	70 01       	ld.w	r1,r8[0x0]
8000b75c:	16 98       	mov	r8,r11
8000b75e:	11 3e       	ld.ub	lr,r8++
8000b760:	e2 0e 07 06 	ld.ub	r6,r1[lr]
8000b764:	e2 16 00 08 	andl	r6,0x8,COH
8000b768:	cf b1       	brne	8000b75e <_strtol_r+0xe>
8000b76a:	e0 4e 00 2d 	cp.w	lr,45
8000b76e:	c0 41       	brne	8000b776 <_strtol_r+0x26>
8000b770:	11 3e       	ld.ub	lr,r8++
8000b772:	30 16       	mov	r6,1
8000b774:	c0 58       	rjmp	8000b77e <_strtol_r+0x2e>
8000b776:	e0 4e 00 2b 	cp.w	lr,43
8000b77a:	c0 21       	brne	8000b77e <_strtol_r+0x2e>
8000b77c:	11 3e       	ld.ub	lr,r8++
8000b77e:	58 09       	cp.w	r9,0
8000b780:	5f 0c       	sreq	r12
8000b782:	59 09       	cp.w	r9,16
8000b784:	5f 05       	sreq	r5
8000b786:	30 07       	mov	r7,0
8000b788:	f9 e5 10 05 	or	r5,r12,r5
8000b78c:	ee 05 18 00 	cp.b	r5,r7
8000b790:	c1 e0       	breq	8000b7cc <_strtol_r+0x7c>
8000b792:	e0 4e 00 30 	cp.w	lr,48
8000b796:	c1 31       	brne	8000b7bc <_strtol_r+0x6c>
8000b798:	11 85       	ld.ub	r5,r8[0x0]
8000b79a:	35 84       	mov	r4,88
8000b79c:	37 83       	mov	r3,120
8000b79e:	e8 05 18 00 	cp.b	r5,r4
8000b7a2:	5f 04       	sreq	r4
8000b7a4:	e6 05 18 00 	cp.b	r5,r3
8000b7a8:	5f 05       	sreq	r5
8000b7aa:	e9 e5 10 05 	or	r5,r4,r5
8000b7ae:	ee 05 18 00 	cp.b	r5,r7
8000b7b2:	c0 50       	breq	8000b7bc <_strtol_r+0x6c>
8000b7b4:	11 9e       	ld.ub	lr,r8[0x1]
8000b7b6:	31 09       	mov	r9,16
8000b7b8:	2f e8       	sub	r8,-2
8000b7ba:	c0 98       	rjmp	8000b7cc <_strtol_r+0x7c>
8000b7bc:	58 0c       	cp.w	r12,0
8000b7be:	c0 70       	breq	8000b7cc <_strtol_r+0x7c>
8000b7c0:	e0 4e 00 30 	cp.w	lr,48
8000b7c4:	f9 b9 00 08 	moveq	r9,8
8000b7c8:	f9 b9 01 0a 	movne	r9,10
8000b7cc:	e0 6c ff ff 	mov	r12,65535
8000b7d0:	ea 1c 7f ff 	orh	r12,0x7fff
8000b7d4:	30 07       	mov	r7,0
8000b7d6:	fc 15 80 00 	movh	r5,0x8000
8000b7da:	0e 93       	mov	r3,r7
8000b7dc:	0e 36       	cp.w	r6,r7
8000b7de:	f8 05 17 00 	moveq	r5,r12
8000b7e2:	0e 9c       	mov	r12,r7
8000b7e4:	ea 09 0d 04 	divu	r4,r5,r9
8000b7e8:	08 92       	mov	r2,r4
8000b7ea:	50 05       	stdsp	sp[0x0],r5
8000b7ec:	e2 0e 07 04 	ld.ub	r4,r1[lr]
8000b7f0:	e1 d4 c0 01 	bfextu	r0,r4,0x0,0x1
8000b7f4:	f9 b0 01 37 	movne	r0,55
8000b7f8:	f9 b0 00 57 	moveq	r0,87
8000b7fc:	50 10       	stdsp	sp[0x4],r0
8000b7fe:	fc c5 00 30 	sub	r5,lr,48
8000b802:	08 90       	mov	r0,r4
8000b804:	e2 10 00 04 	andl	r0,0x4,COH
8000b808:	c0 81       	brne	8000b818 <_strtol_r+0xc8>
8000b80a:	40 10       	lddsp	r0,sp[0x4]
8000b80c:	e9 d4 c0 02 	bfextu	r4,r4,0x0,0x2
8000b810:	fc 00 01 05 	sub	r5,lr,r0
8000b814:	58 04       	cp.w	r4,0
8000b816:	c1 c0       	breq	8000b84e <_strtol_r+0xfe>
8000b818:	12 35       	cp.w	r5,r9
8000b81a:	c1 a4       	brge	8000b84e <_strtol_r+0xfe>
8000b81c:	04 3c       	cp.w	r12,r2
8000b81e:	5f be       	srhi	lr
8000b820:	fd e7 13 fe 	or	lr,lr,r7>>0x1f
8000b824:	e6 0e 18 00 	cp.b	lr,r3
8000b828:	c1 01       	brne	8000b848 <_strtol_r+0xf8>
8000b82a:	04 3c       	cp.w	r12,r2
8000b82c:	5f 0e       	sreq	lr
8000b82e:	40 07       	lddsp	r7,sp[0x0]
8000b830:	0e 35       	cp.w	r5,r7
8000b832:	5f 97       	srgt	r7
8000b834:	ef ee 00 0e 	and	lr,r7,lr
8000b838:	e6 0e 18 00 	cp.b	lr,r3
8000b83c:	c0 61       	brne	8000b848 <_strtol_r+0xf8>
8000b83e:	b3 3c       	mul	r12,r9
8000b840:	30 17       	mov	r7,1
8000b842:	ea 0c 00 0c 	add	r12,r5,r12
8000b846:	c0 28       	rjmp	8000b84a <_strtol_r+0xfa>
8000b848:	3f f7       	mov	r7,-1
8000b84a:	11 3e       	ld.ub	lr,r8++
8000b84c:	cd 0b       	rjmp	8000b7ec <_strtol_r+0x9c>
8000b84e:	5b f7       	cp.w	r7,-1
8000b850:	c0 e1       	brne	8000b86c <_strtol_r+0x11c>
8000b852:	e0 69 ff ff 	mov	r9,65535
8000b856:	ea 19 7f ff 	orh	r9,0x7fff
8000b85a:	fc 1c 80 00 	movh	r12,0x8000
8000b85e:	40 20       	lddsp	r0,sp[0x8]
8000b860:	58 06       	cp.w	r6,0
8000b862:	f2 0c 17 00 	moveq	r12,r9
8000b866:	32 29       	mov	r9,34
8000b868:	81 39       	st.w	r0[0xc],r9
8000b86a:	c0 48       	rjmp	8000b872 <_strtol_r+0x122>
8000b86c:	58 06       	cp.w	r6,0
8000b86e:	fb bc 01 00 	rsubne	r12,0
8000b872:	58 0a       	cp.w	r10,0
8000b874:	c0 60       	breq	8000b880 <_strtol_r+0x130>
8000b876:	20 18       	sub	r8,1
8000b878:	58 07       	cp.w	r7,0
8000b87a:	f0 0b 17 10 	movne	r11,r8
8000b87e:	95 0b       	st.w	r10[0x0],r11
8000b880:	2f dd       	sub	sp,-12
8000b882:	d8 32       	popm	r0-r7,pc

8000b884 <_strtoll_r>:
8000b884:	d4 31       	pushm	r0-r7,lr
8000b886:	20 8d       	sub	sp,32
8000b888:	e0 68 01 98 	mov	r8,408
8000b88c:	16 93       	mov	r3,r11
8000b88e:	70 08       	ld.w	r8,r8[0x0]
8000b890:	50 7c       	stdsp	sp[0x1c],r12
8000b892:	50 2a       	stdsp	sp[0x8],r10
8000b894:	12 95       	mov	r5,r9
8000b896:	50 18       	stdsp	sp[0x4],r8
8000b898:	16 97       	mov	r7,r11
8000b89a:	0f 36       	ld.ub	r6,r7++
8000b89c:	40 1a       	lddsp	r10,sp[0x4]
8000b89e:	f4 06 07 04 	ld.ub	r4,r10[r6]
8000b8a2:	e2 14 00 08 	andl	r4,0x8,COH
8000b8a6:	cf a1       	brne	8000b89a <_strtoll_r+0x16>
8000b8a8:	e0 46 00 2d 	cp.w	r6,45
8000b8ac:	c0 41       	brne	8000b8b4 <_strtoll_r+0x30>
8000b8ae:	0f 36       	ld.ub	r6,r7++
8000b8b0:	30 14       	mov	r4,1
8000b8b2:	c0 58       	rjmp	8000b8bc <_strtoll_r+0x38>
8000b8b4:	e0 46 00 2b 	cp.w	r6,43
8000b8b8:	c0 21       	brne	8000b8bc <_strtoll_r+0x38>
8000b8ba:	0f 36       	ld.ub	r6,r7++
8000b8bc:	58 05       	cp.w	r5,0
8000b8be:	5f 08       	sreq	r8
8000b8c0:	59 05       	cp.w	r5,16
8000b8c2:	5f 0a       	sreq	r10
8000b8c4:	30 09       	mov	r9,0
8000b8c6:	f1 ea 10 0a 	or	r10,r8,r10
8000b8ca:	f2 0a 18 00 	cp.b	r10,r9
8000b8ce:	c1 d0       	breq	8000b908 <_strtoll_r+0x84>
8000b8d0:	e0 46 00 30 	cp.w	r6,48
8000b8d4:	c1 21       	brne	8000b8f8 <_strtoll_r+0x74>
8000b8d6:	0f 8a       	ld.ub	r10,r7[0x0]
8000b8d8:	35 8b       	mov	r11,88
8000b8da:	37 8c       	mov	r12,120
8000b8dc:	f6 0a 18 00 	cp.b	r10,r11
8000b8e0:	5f 0b       	sreq	r11
8000b8e2:	f8 0a 18 00 	cp.b	r10,r12
8000b8e6:	5f 0a       	sreq	r10
8000b8e8:	14 4b       	or	r11,r10
8000b8ea:	f2 0b 18 00 	cp.b	r11,r9
8000b8ee:	c0 50       	breq	8000b8f8 <_strtoll_r+0x74>
8000b8f0:	0f 96       	ld.ub	r6,r7[0x1]
8000b8f2:	31 05       	mov	r5,16
8000b8f4:	2f e7       	sub	r7,-2
8000b8f6:	c0 98       	rjmp	8000b908 <_strtoll_r+0x84>
8000b8f8:	58 08       	cp.w	r8,0
8000b8fa:	c0 70       	breq	8000b908 <_strtoll_r+0x84>
8000b8fc:	e0 46 00 30 	cp.w	r6,48
8000b900:	f9 b5 00 08 	moveq	r5,8
8000b904:	f9 b5 01 0a 	movne	r5,10
8000b908:	58 04       	cp.w	r4,0
8000b90a:	c0 71       	brne	8000b918 <_strtoll_r+0x94>
8000b90c:	3f f0       	mov	r0,-1
8000b90e:	e0 61 ff ff 	mov	r1,65535
8000b912:	ea 11 7f ff 	orh	r1,0x7fff
8000b916:	c0 48       	rjmp	8000b91e <_strtoll_r+0x9a>
8000b918:	30 00       	mov	r0,0
8000b91a:	fc 11 80 00 	movh	r1,0x8000
8000b91e:	ea 09 14 1f 	asr	r9,r5,0x1f
8000b922:	0a 98       	mov	r8,r5
8000b924:	50 09       	stdsp	sp[0x0],r9
8000b926:	00 9a       	mov	r10,r0
8000b928:	02 9b       	mov	r11,r1
8000b92a:	e0 a0 0d 3e 	rcall	8000d3a6 <__avr32_umod64>
8000b92e:	40 09       	lddsp	r9,sp[0x0]
8000b930:	50 5a       	stdsp	sp[0x14],r10
8000b932:	0a 98       	mov	r8,r5
8000b934:	00 9a       	mov	r10,r0
8000b936:	02 9b       	mov	r11,r1
8000b938:	e0 a0 0c 05 	rcall	8000d142 <__avr32_udiv64>
8000b93c:	06 9c       	mov	r12,r3
8000b93e:	14 98       	mov	r8,r10
8000b940:	16 99       	mov	r9,r11
8000b942:	30 0a       	mov	r10,0
8000b944:	30 00       	mov	r0,0
8000b946:	30 01       	mov	r1,0
8000b948:	14 9e       	mov	lr,r10
8000b94a:	10 92       	mov	r2,r8
8000b94c:	12 93       	mov	r3,r9
8000b94e:	40 19       	lddsp	r9,sp[0x4]
8000b950:	f2 06 07 0b 	ld.ub	r11,r9[r6]
8000b954:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000b958:	f9 b9 01 37 	movne	r9,55
8000b95c:	f9 b9 00 57 	moveq	r9,87
8000b960:	50 69       	stdsp	sp[0x18],r9
8000b962:	ec c8 00 30 	sub	r8,r6,48
8000b966:	ed bb 00 02 	bld	r11,0x2
8000b96a:	c0 80       	breq	8000b97a <_strtoll_r+0xf6>
8000b96c:	40 69       	lddsp	r9,sp[0x18]
8000b96e:	f7 db c0 02 	bfextu	r11,r11,0x0,0x2
8000b972:	ec 09 01 08 	sub	r8,r6,r9
8000b976:	58 0b       	cp.w	r11,0
8000b978:	c2 e0       	breq	8000b9d4 <_strtoll_r+0x150>
8000b97a:	0a 38       	cp.w	r8,r5
8000b97c:	c2 c4       	brge	8000b9d4 <_strtoll_r+0x150>
8000b97e:	04 30       	cp.w	r0,r2
8000b980:	e6 01 13 00 	cpc	r1,r3
8000b984:	5f b9       	srhi	r9
8000b986:	f3 ea 13 fa 	or	r10,r9,r10>>0x1f
8000b98a:	fc 0a 18 00 	cp.b	r10,lr
8000b98e:	c2 01       	brne	8000b9ce <_strtoll_r+0x14a>
8000b990:	04 30       	cp.w	r0,r2
8000b992:	e6 01 13 00 	cpc	r1,r3
8000b996:	5f 09       	sreq	r9
8000b998:	40 56       	lddsp	r6,sp[0x14]
8000b99a:	0c 38       	cp.w	r8,r6
8000b99c:	5f 9a       	srgt	r10
8000b99e:	f5 e9 00 09 	and	r9,r10,r9
8000b9a2:	fc 09 18 00 	cp.b	r9,lr
8000b9a6:	c1 41       	brne	8000b9ce <_strtoll_r+0x14a>
8000b9a8:	e0 05 06 4a 	mulu.d	r10,r0,r5
8000b9ac:	ea 01 02 49 	mul	r9,r5,r1
8000b9b0:	50 48       	stdsp	sp[0x10],r8
8000b9b2:	40 06       	lddsp	r6,sp[0x0]
8000b9b4:	bf 58       	asr	r8,0x1f
8000b9b6:	ec 00 03 49 	mac	r9,r6,r0
8000b9ba:	50 38       	stdsp	sp[0xc],r8
8000b9bc:	f2 0b 00 0b 	add	r11,r9,r11
8000b9c0:	fa e0 00 0c 	ld.d	r0,sp[12]
8000b9c4:	14 00       	add	r0,r10
8000b9c6:	e2 0b 00 41 	adc	r1,r1,r11
8000b9ca:	30 1a       	mov	r10,1
8000b9cc:	c0 28       	rjmp	8000b9d0 <_strtoll_r+0x14c>
8000b9ce:	3f fa       	mov	r10,-1
8000b9d0:	0f 36       	ld.ub	r6,r7++
8000b9d2:	cb eb       	rjmp	8000b94e <_strtoll_r+0xca>
8000b9d4:	18 93       	mov	r3,r12
8000b9d6:	5b fa       	cp.w	r10,-1
8000b9d8:	c1 01       	brne	8000b9f8 <_strtoll_r+0x174>
8000b9da:	58 04       	cp.w	r4,0
8000b9dc:	c0 71       	brne	8000b9ea <_strtoll_r+0x166>
8000b9de:	3f f0       	mov	r0,-1
8000b9e0:	e0 61 ff ff 	mov	r1,65535
8000b9e4:	ea 11 7f ff 	orh	r1,0x7fff
8000b9e8:	c0 48       	rjmp	8000b9f0 <_strtoll_r+0x16c>
8000b9ea:	30 00       	mov	r0,0
8000b9ec:	fc 11 80 00 	movh	r1,0x8000
8000b9f0:	32 28       	mov	r8,34
8000b9f2:	40 76       	lddsp	r6,sp[0x1c]
8000b9f4:	8d 38       	st.w	r6[0xc],r8
8000b9f6:	c0 98       	rjmp	8000ba08 <_strtoll_r+0x184>
8000b9f8:	58 04       	cp.w	r4,0
8000b9fa:	c0 70       	breq	8000ba08 <_strtoll_r+0x184>
8000b9fc:	30 08       	mov	r8,0
8000b9fe:	30 09       	mov	r9,0
8000ba00:	f0 00 01 00 	sub	r0,r8,r0
8000ba04:	f2 01 01 41 	sbc	r1,r9,r1
8000ba08:	40 29       	lddsp	r9,sp[0x8]
8000ba0a:	58 09       	cp.w	r9,0
8000ba0c:	c0 60       	breq	8000ba18 <_strtoll_r+0x194>
8000ba0e:	20 17       	sub	r7,1
8000ba10:	58 0a       	cp.w	r10,0
8000ba12:	ee 03 17 10 	movne	r3,r7
8000ba16:	93 03       	st.w	r9[0x0],r3
8000ba18:	00 9a       	mov	r10,r0
8000ba1a:	02 9b       	mov	r11,r1
8000ba1c:	2f 8d       	sub	sp,-32
8000ba1e:	d8 32       	popm	r0-r7,pc

8000ba20 <_strtoul_r>:
8000ba20:	d4 31       	pushm	r0-r7,lr
8000ba22:	20 3d       	sub	sp,12
8000ba24:	e0 68 01 98 	mov	r8,408
8000ba28:	50 2c       	stdsp	sp[0x8],r12
8000ba2a:	70 01       	ld.w	r1,r8[0x0]
8000ba2c:	16 98       	mov	r8,r11
8000ba2e:	11 3e       	ld.ub	lr,r8++
8000ba30:	e2 0e 07 05 	ld.ub	r5,r1[lr]
8000ba34:	e2 15 00 08 	andl	r5,0x8,COH
8000ba38:	cf b1       	brne	8000ba2e <_strtoul_r+0xe>
8000ba3a:	e0 4e 00 2d 	cp.w	lr,45
8000ba3e:	c0 41       	brne	8000ba46 <_strtoul_r+0x26>
8000ba40:	11 3e       	ld.ub	lr,r8++
8000ba42:	30 15       	mov	r5,1
8000ba44:	c0 58       	rjmp	8000ba4e <_strtoul_r+0x2e>
8000ba46:	e0 4e 00 2b 	cp.w	lr,43
8000ba4a:	c0 21       	brne	8000ba4e <_strtoul_r+0x2e>
8000ba4c:	11 3e       	ld.ub	lr,r8++
8000ba4e:	58 09       	cp.w	r9,0
8000ba50:	5f 0c       	sreq	r12
8000ba52:	59 09       	cp.w	r9,16
8000ba54:	5f 06       	sreq	r6
8000ba56:	30 07       	mov	r7,0
8000ba58:	f9 e6 10 06 	or	r6,r12,r6
8000ba5c:	ee 06 18 00 	cp.b	r6,r7
8000ba60:	c1 e0       	breq	8000ba9c <_strtoul_r+0x7c>
8000ba62:	e0 4e 00 30 	cp.w	lr,48
8000ba66:	c1 31       	brne	8000ba8c <_strtoul_r+0x6c>
8000ba68:	11 86       	ld.ub	r6,r8[0x0]
8000ba6a:	35 84       	mov	r4,88
8000ba6c:	37 83       	mov	r3,120
8000ba6e:	e8 06 18 00 	cp.b	r6,r4
8000ba72:	5f 04       	sreq	r4
8000ba74:	e6 06 18 00 	cp.b	r6,r3
8000ba78:	5f 06       	sreq	r6
8000ba7a:	e9 e6 10 06 	or	r6,r4,r6
8000ba7e:	ee 06 18 00 	cp.b	r6,r7
8000ba82:	c0 50       	breq	8000ba8c <_strtoul_r+0x6c>
8000ba84:	11 9e       	ld.ub	lr,r8[0x1]
8000ba86:	31 09       	mov	r9,16
8000ba88:	2f e8       	sub	r8,-2
8000ba8a:	c0 98       	rjmp	8000ba9c <_strtoul_r+0x7c>
8000ba8c:	58 0c       	cp.w	r12,0
8000ba8e:	c0 70       	breq	8000ba9c <_strtoul_r+0x7c>
8000ba90:	e0 4e 00 30 	cp.w	lr,48
8000ba94:	f9 b9 00 08 	moveq	r9,8
8000ba98:	f9 b9 01 0a 	movne	r9,10
8000ba9c:	3f f3       	mov	r3,-1
8000ba9e:	e6 09 0d 02 	divu	r2,r3,r9
8000baa2:	30 07       	mov	r7,0
8000baa4:	50 03       	stdsp	sp[0x0],r3
8000baa6:	0e 9c       	mov	r12,r7
8000baa8:	0e 93       	mov	r3,r7
8000baaa:	e2 0e 07 04 	ld.ub	r4,r1[lr]
8000baae:	e1 d4 c0 01 	bfextu	r0,r4,0x0,0x1
8000bab2:	f9 b0 01 37 	movne	r0,55
8000bab6:	f9 b0 00 57 	moveq	r0,87
8000baba:	50 10       	stdsp	sp[0x4],r0
8000babc:	fc c6 00 30 	sub	r6,lr,48
8000bac0:	08 90       	mov	r0,r4
8000bac2:	e2 10 00 04 	andl	r0,0x4,COH
8000bac6:	c0 81       	brne	8000bad6 <_strtoul_r+0xb6>
8000bac8:	40 10       	lddsp	r0,sp[0x4]
8000baca:	e9 d4 c0 02 	bfextu	r4,r4,0x0,0x2
8000bace:	fc 00 01 06 	sub	r6,lr,r0
8000bad2:	58 04       	cp.w	r4,0
8000bad4:	c1 c0       	breq	8000bb0c <_strtoul_r+0xec>
8000bad6:	12 36       	cp.w	r6,r9
8000bad8:	c1 a4       	brge	8000bb0c <_strtoul_r+0xec>
8000bada:	04 3c       	cp.w	r12,r2
8000badc:	5f be       	srhi	lr
8000bade:	fd e7 13 fe 	or	lr,lr,r7>>0x1f
8000bae2:	e6 0e 18 00 	cp.b	lr,r3
8000bae6:	c1 01       	brne	8000bb06 <_strtoul_r+0xe6>
8000bae8:	04 3c       	cp.w	r12,r2
8000baea:	5f 0e       	sreq	lr
8000baec:	40 07       	lddsp	r7,sp[0x0]
8000baee:	0e 36       	cp.w	r6,r7
8000baf0:	5f 97       	srgt	r7
8000baf2:	ef ee 00 0e 	and	lr,r7,lr
8000baf6:	e6 0e 18 00 	cp.b	lr,r3
8000bafa:	c0 61       	brne	8000bb06 <_strtoul_r+0xe6>
8000bafc:	b3 3c       	mul	r12,r9
8000bafe:	30 17       	mov	r7,1
8000bb00:	ec 0c 00 0c 	add	r12,r6,r12
8000bb04:	c0 28       	rjmp	8000bb08 <_strtoul_r+0xe8>
8000bb06:	3f f7       	mov	r7,-1
8000bb08:	11 3e       	ld.ub	lr,r8++
8000bb0a:	cd 0b       	rjmp	8000baaa <_strtoul_r+0x8a>
8000bb0c:	5b f7       	cp.w	r7,-1
8000bb0e:	c0 61       	brne	8000bb1a <_strtoul_r+0xfa>
8000bb10:	32 29       	mov	r9,34
8000bb12:	40 20       	lddsp	r0,sp[0x8]
8000bb14:	0e 9c       	mov	r12,r7
8000bb16:	81 39       	st.w	r0[0xc],r9
8000bb18:	c0 48       	rjmp	8000bb20 <_strtoul_r+0x100>
8000bb1a:	58 05       	cp.w	r5,0
8000bb1c:	fb bc 01 00 	rsubne	r12,0
8000bb20:	58 0a       	cp.w	r10,0
8000bb22:	c0 60       	breq	8000bb2e <_strtoul_r+0x10e>
8000bb24:	20 18       	sub	r8,1
8000bb26:	58 07       	cp.w	r7,0
8000bb28:	f0 0b 17 10 	movne	r11,r8
8000bb2c:	95 0b       	st.w	r10[0x0],r11
8000bb2e:	2f dd       	sub	sp,-12
8000bb30:	d8 32       	popm	r0-r7,pc
8000bb32:	d7 03       	nop

8000bb34 <_strtoull_r>:
8000bb34:	d4 31       	pushm	r0-r7,lr
8000bb36:	20 9d       	sub	sp,36
8000bb38:	e0 68 01 98 	mov	r8,408
8000bb3c:	16 97       	mov	r7,r11
8000bb3e:	70 08       	ld.w	r8,r8[0x0]
8000bb40:	50 8c       	stdsp	sp[0x20],r12
8000bb42:	50 5a       	stdsp	sp[0x14],r10
8000bb44:	12 94       	mov	r4,r9
8000bb46:	50 48       	stdsp	sp[0x10],r8
8000bb48:	16 96       	mov	r6,r11
8000bb4a:	0d 35       	ld.ub	r5,r6++
8000bb4c:	40 4e       	lddsp	lr,sp[0x10]
8000bb4e:	fc 05 07 02 	ld.ub	r2,lr[r5]
8000bb52:	e2 12 00 08 	andl	r2,0x8,COH
8000bb56:	cf a1       	brne	8000bb4a <_strtoull_r+0x16>
8000bb58:	e0 45 00 2d 	cp.w	r5,45
8000bb5c:	c0 41       	brne	8000bb64 <_strtoull_r+0x30>
8000bb5e:	0d 35       	ld.ub	r5,r6++
8000bb60:	30 12       	mov	r2,1
8000bb62:	c0 58       	rjmp	8000bb6c <_strtoull_r+0x38>
8000bb64:	e0 45 00 2b 	cp.w	r5,43
8000bb68:	c0 21       	brne	8000bb6c <_strtoull_r+0x38>
8000bb6a:	0d 35       	ld.ub	r5,r6++
8000bb6c:	58 04       	cp.w	r4,0
8000bb6e:	5f 08       	sreq	r8
8000bb70:	59 04       	cp.w	r4,16
8000bb72:	5f 0a       	sreq	r10
8000bb74:	30 09       	mov	r9,0
8000bb76:	f1 ea 10 0a 	or	r10,r8,r10
8000bb7a:	f2 0a 18 00 	cp.b	r10,r9
8000bb7e:	c1 d0       	breq	8000bbb8 <_strtoull_r+0x84>
8000bb80:	e0 45 00 30 	cp.w	r5,48
8000bb84:	c1 21       	brne	8000bba8 <_strtoull_r+0x74>
8000bb86:	0d 8a       	ld.ub	r10,r6[0x0]
8000bb88:	35 8b       	mov	r11,88
8000bb8a:	37 8c       	mov	r12,120
8000bb8c:	f6 0a 18 00 	cp.b	r10,r11
8000bb90:	5f 0b       	sreq	r11
8000bb92:	f8 0a 18 00 	cp.b	r10,r12
8000bb96:	5f 0a       	sreq	r10
8000bb98:	14 4b       	or	r11,r10
8000bb9a:	f2 0b 18 00 	cp.b	r11,r9
8000bb9e:	c0 50       	breq	8000bba8 <_strtoull_r+0x74>
8000bba0:	0d 95       	ld.ub	r5,r6[0x1]
8000bba2:	31 04       	mov	r4,16
8000bba4:	2f e6       	sub	r6,-2
8000bba6:	c0 98       	rjmp	8000bbb8 <_strtoull_r+0x84>
8000bba8:	58 08       	cp.w	r8,0
8000bbaa:	c0 70       	breq	8000bbb8 <_strtoull_r+0x84>
8000bbac:	e0 45 00 30 	cp.w	r5,48
8000bbb0:	f9 b4 00 08 	moveq	r4,8
8000bbb4:	f9 b4 01 0a 	movne	r4,10
8000bbb8:	e8 03 14 1f 	asr	r3,r4,0x1f
8000bbbc:	08 98       	mov	r8,r4
8000bbbe:	06 99       	mov	r9,r3
8000bbc0:	3f fa       	mov	r10,-1
8000bbc2:	3f fb       	mov	r11,-1
8000bbc4:	e0 a0 0a bf 	rcall	8000d142 <__avr32_udiv64>
8000bbc8:	06 99       	mov	r9,r3
8000bbca:	50 2b       	stdsp	sp[0x8],r11
8000bbcc:	50 3a       	stdsp	sp[0xc],r10
8000bbce:	08 98       	mov	r8,r4
8000bbd0:	3f fa       	mov	r10,-1
8000bbd2:	3f fb       	mov	r11,-1
8000bbd4:	e0 a0 0b e9 	rcall	8000d3a6 <__avr32_umod64>
8000bbd8:	30 0b       	mov	r11,0
8000bbda:	30 08       	mov	r8,0
8000bbdc:	30 09       	mov	r9,0
8000bbde:	40 41       	lddsp	r1,sp[0x10]
8000bbe0:	e2 05 07 0e 	ld.ub	lr,r1[r5]
8000bbe4:	e1 de c0 01 	bfextu	r0,lr,0x0,0x1
8000bbe8:	ea cc 00 30 	sub	r12,r5,48
8000bbec:	58 00       	cp.w	r0,0
8000bbee:	f9 b1 01 37 	movne	r1,55
8000bbf2:	f9 b1 00 57 	moveq	r1,87
8000bbf6:	1c 90       	mov	r0,lr
8000bbf8:	e2 10 00 04 	andl	r0,0x4,COH
8000bbfc:	c0 61       	brne	8000bc08 <_strtoull_r+0xd4>
8000bbfe:	ea 01 01 0c 	sub	r12,r5,r1
8000bc02:	fd de c0 02 	bfextu	lr,lr,0x0,0x2
8000bc06:	c3 70       	breq	8000bc74 <_strtoull_r+0x140>
8000bc08:	08 3c       	cp.w	r12,r4
8000bc0a:	c3 54       	brge	8000bc74 <_strtoull_r+0x140>
8000bc0c:	fa e0 00 08 	ld.d	r0,sp[8]
8000bc10:	00 38       	cp.w	r8,r0
8000bc12:	e2 09 13 00 	cpc	r9,r1
8000bc16:	5f be       	srhi	lr
8000bc18:	30 00       	mov	r0,0
8000bc1a:	fd eb 13 fb 	or	r11,lr,r11>>0x1f
8000bc1e:	e0 0b 18 00 	cp.b	r11,r0
8000bc22:	c2 61       	brne	8000bc6e <_strtoull_r+0x13a>
8000bc24:	fa e0 00 08 	ld.d	r0,sp[8]
8000bc28:	14 3c       	cp.w	r12,r10
8000bc2a:	5f 9e       	srgt	lr
8000bc2c:	00 38       	cp.w	r8,r0
8000bc2e:	e2 09 13 00 	cpc	r9,r1
8000bc32:	5f 0b       	sreq	r11
8000bc34:	30 00       	mov	r0,0
8000bc36:	fd eb 00 0b 	and	r11,lr,r11
8000bc3a:	e0 0b 18 00 	cp.b	r11,r0
8000bc3e:	c1 81       	brne	8000bc6e <_strtoull_r+0x13a>
8000bc40:	f0 04 06 40 	mulu.d	r0,r8,r4
8000bc44:	e8 09 02 4b 	mul	r11,r4,r9
8000bc48:	fa e1 00 00 	st.d	sp[0],r0
8000bc4c:	e6 08 03 4b 	mac	r11,r3,r8
8000bc50:	f6 01 00 01 	add	r1,r11,r1
8000bc54:	50 7c       	stdsp	sp[0x1c],r12
8000bc56:	50 01       	stdsp	sp[0x0],r1
8000bc58:	bf 5c       	asr	r12,0x1f
8000bc5a:	fa e0 00 00 	ld.d	r0,sp[0]
8000bc5e:	50 6c       	stdsp	sp[0x18],r12
8000bc60:	30 1b       	mov	r11,1
8000bc62:	fa e8 00 18 	ld.d	r8,sp[24]
8000bc66:	00 08       	add	r8,r0
8000bc68:	f2 01 00 49 	adc	r9,r9,r1
8000bc6c:	c0 28       	rjmp	8000bc70 <_strtoull_r+0x13c>
8000bc6e:	3f fb       	mov	r11,-1
8000bc70:	0d 35       	ld.ub	r5,r6++
8000bc72:	cb 6b       	rjmp	8000bbde <_strtoull_r+0xaa>
8000bc74:	5b fb       	cp.w	r11,-1
8000bc76:	c0 71       	brne	8000bc84 <_strtoull_r+0x150>
8000bc78:	32 28       	mov	r8,34
8000bc7a:	40 80       	lddsp	r0,sp[0x20]
8000bc7c:	3f f9       	mov	r9,-1
8000bc7e:	81 38       	st.w	r0[0xc],r8
8000bc80:	3f f8       	mov	r8,-1
8000bc82:	c0 98       	rjmp	8000bc94 <_strtoull_r+0x160>
8000bc84:	58 02       	cp.w	r2,0
8000bc86:	c0 70       	breq	8000bc94 <_strtoull_r+0x160>
8000bc88:	30 04       	mov	r4,0
8000bc8a:	30 05       	mov	r5,0
8000bc8c:	e8 08 01 08 	sub	r8,r4,r8
8000bc90:	ea 09 01 49 	sbc	r9,r5,r9
8000bc94:	40 5e       	lddsp	lr,sp[0x14]
8000bc96:	58 0e       	cp.w	lr,0
8000bc98:	c0 60       	breq	8000bca4 <_strtoull_r+0x170>
8000bc9a:	20 16       	sub	r6,1
8000bc9c:	58 0b       	cp.w	r11,0
8000bc9e:	ec 07 17 10 	movne	r7,r6
8000bca2:	9d 07       	st.w	lr[0x0],r7
8000bca4:	10 9a       	mov	r10,r8
8000bca6:	12 9b       	mov	r11,r9
8000bca8:	2f 7d       	sub	sp,-36
8000bcaa:	d8 32       	popm	r0-r7,pc

8000bcac <_close>:
8000bcac:	30 28       	mov	r8,2
8000bcae:	d6 73       	breakpoint
8000bcb0:	3f fc       	mov	r12,-1
8000bcb2:	35 8b       	mov	r11,88
8000bcb4:	58 0c       	cp.w	r12,0
8000bcb6:	5e 4c       	retge	r12
8000bcb8:	e0 6a 0c 38 	mov	r10,3128
8000bcbc:	95 0b       	st.w	r10[0x0],r11
8000bcbe:	5e fc       	retal	r12

8000bcc0 <_lseek>:
8000bcc0:	30 58       	mov	r8,5
8000bcc2:	d6 73       	breakpoint
8000bcc4:	3f fc       	mov	r12,-1
8000bcc6:	35 8b       	mov	r11,88
8000bcc8:	58 0c       	cp.w	r12,0
8000bcca:	5e 4c       	retge	r12
8000bccc:	e0 6a 0c 38 	mov	r10,3128
8000bcd0:	95 0b       	st.w	r10[0x0],r11
8000bcd2:	5e fc       	retal	r12

8000bcd4 <isatty>:
8000bcd4:	30 b8       	mov	r8,11
8000bcd6:	d6 73       	breakpoint
8000bcd8:	3f fc       	mov	r12,-1
8000bcda:	35 8b       	mov	r11,88
8000bcdc:	58 0c       	cp.w	r12,0
8000bcde:	5e 4c       	retge	r12
8000bce0:	e0 6a 0c 38 	mov	r10,3128
8000bce4:	95 0b       	st.w	r10[0x0],r11
8000bce6:	5e fc       	retal	r12

8000bce8 <_fstat_host>:
8000bce8:	30 98       	mov	r8,9
8000bcea:	d6 73       	breakpoint
8000bcec:	3f fc       	mov	r12,-1
8000bcee:	35 8b       	mov	r11,88
8000bcf0:	58 0c       	cp.w	r12,0
8000bcf2:	5e 4c       	retge	r12
8000bcf4:	e0 6a 0c 38 	mov	r10,3128
8000bcf8:	95 0b       	st.w	r10[0x0],r11
8000bcfa:	5e fc       	retal	r12

8000bcfc <_fstat>:
8000bcfc:	d4 21       	pushm	r4-r7,lr
8000bcfe:	21 0d       	sub	sp,64
8000bd00:	16 97       	mov	r7,r11
8000bd02:	1a 9b       	mov	r11,sp
8000bd04:	cf 2f       	rcall	8000bce8 <_fstat_host>
8000bd06:	c0 34       	brge	8000bd0c <_fstat+0x10>
8000bd08:	3f fc       	mov	r12,-1
8000bd0a:	c1 c8       	rjmp	8000bd42 <_fstat+0x46>
8000bd0c:	40 08       	lddsp	r8,sp[0x0]
8000bd0e:	ae 08       	st.h	r7[0x0],r8
8000bd10:	40 18       	lddsp	r8,sp[0x4]
8000bd12:	ae 18       	st.h	r7[0x2],r8
8000bd14:	40 28       	lddsp	r8,sp[0x8]
8000bd16:	8f 18       	st.w	r7[0x4],r8
8000bd18:	40 38       	lddsp	r8,sp[0xc]
8000bd1a:	ae 48       	st.h	r7[0x8],r8
8000bd1c:	40 48       	lddsp	r8,sp[0x10]
8000bd1e:	ae 58       	st.h	r7[0xa],r8
8000bd20:	40 58       	lddsp	r8,sp[0x14]
8000bd22:	ae 68       	st.h	r7[0xc],r8
8000bd24:	40 68       	lddsp	r8,sp[0x18]
8000bd26:	ae 78       	st.h	r7[0xe],r8
8000bd28:	40 88       	lddsp	r8,sp[0x20]
8000bd2a:	8f 48       	st.w	r7[0x10],r8
8000bd2c:	40 a8       	lddsp	r8,sp[0x28]
8000bd2e:	8f b8       	st.w	r7[0x2c],r8
8000bd30:	40 c8       	lddsp	r8,sp[0x30]
8000bd32:	8f c8       	st.w	r7[0x30],r8
8000bd34:	40 d8       	lddsp	r8,sp[0x34]
8000bd36:	8f 58       	st.w	r7[0x14],r8
8000bd38:	40 e8       	lddsp	r8,sp[0x38]
8000bd3a:	30 0c       	mov	r12,0
8000bd3c:	8f 78       	st.w	r7[0x1c],r8
8000bd3e:	40 f8       	lddsp	r8,sp[0x3c]
8000bd40:	8f 98       	st.w	r7[0x24],r8
8000bd42:	2f 0d       	sub	sp,-64
8000bd44:	d8 22       	popm	r4-r7,pc
8000bd46:	d7 03       	nop

8000bd48 <_sbrk>:
8000bd48:	d4 01       	pushm	lr
8000bd4a:	e0 68 0a 08 	mov	r8,2568
8000bd4e:	70 09       	ld.w	r9,r8[0x0]
8000bd50:	58 09       	cp.w	r9,0
8000bd52:	c0 41       	brne	8000bd5a <_sbrk+0x12>
8000bd54:	e0 69 0c 40 	mov	r9,3136
8000bd58:	91 09       	st.w	r8[0x0],r9
8000bd5a:	e0 69 0a 08 	mov	r9,2568
8000bd5e:	e0 6a 70 00 	mov	r10,28672
8000bd62:	72 08       	ld.w	r8,r9[0x0]
8000bd64:	f0 0c 00 0c 	add	r12,r8,r12
8000bd68:	14 3c       	cp.w	r12,r10
8000bd6a:	e0 8b 00 04 	brhi	8000bd72 <_sbrk+0x2a>
8000bd6e:	93 0c       	st.w	r9[0x0],r12
8000bd70:	c0 58       	rjmp	8000bd7a <_sbrk+0x32>
8000bd72:	cf 7c       	rcall	8000bf60 <__errno>
8000bd74:	30 c8       	mov	r8,12
8000bd76:	99 08       	st.w	r12[0x0],r8
8000bd78:	3f f8       	mov	r8,-1
8000bd7a:	10 9c       	mov	r12,r8
8000bd7c:	d8 02       	popm	pc
8000bd7e:	d7 03       	nop

8000bd80 <__submore>:
8000bd80:	d4 21       	pushm	r4-r7,lr
8000bd82:	16 97       	mov	r7,r11
8000bd84:	76 db       	ld.w	r11,r11[0x34]
8000bd86:	ee c8 ff bc 	sub	r8,r7,-68
8000bd8a:	10 3b       	cp.w	r11,r8
8000bd8c:	c1 71       	brne	8000bdba <__submore+0x3a>
8000bd8e:	e0 6b 04 00 	mov	r11,1024
8000bd92:	fe b0 ed 6d 	rcall	8000986c <_malloc_r>
8000bd96:	c2 50       	breq	8000bde0 <__submore+0x60>
8000bd98:	e0 68 04 00 	mov	r8,1024
8000bd9c:	8f dc       	st.w	r7[0x34],r12
8000bd9e:	8f e8       	st.w	r7[0x38],r8
8000bda0:	ef 38 00 46 	ld.ub	r8,r7[70]
8000bda4:	f8 cc fc 03 	sub	r12,r12,-1021
8000bda8:	b8 a8       	st.b	r12[0x2],r8
8000bdaa:	ef 38 00 45 	ld.ub	r8,r7[69]
8000bdae:	b8 98       	st.b	r12[0x1],r8
8000bdb0:	ef 38 00 44 	ld.ub	r8,r7[68]
8000bdb4:	b8 88       	st.b	r12[0x0],r8
8000bdb6:	8f 0c       	st.w	r7[0x0],r12
8000bdb8:	c1 38       	rjmp	8000bdde <__submore+0x5e>
8000bdba:	6e e5       	ld.w	r5,r7[0x38]
8000bdbc:	ea 04 15 01 	lsl	r4,r5,0x1
8000bdc0:	08 9a       	mov	r10,r4
8000bdc2:	fe b0 f3 c5 	rcall	8000a54c <_realloc_r>
8000bdc6:	18 96       	mov	r6,r12
8000bdc8:	c0 c0       	breq	8000bde0 <__submore+0x60>
8000bdca:	0a 9a       	mov	r10,r5
8000bdcc:	18 9b       	mov	r11,r12
8000bdce:	f8 05 00 05 	add	r5,r12,r5
8000bdd2:	0a 9c       	mov	r12,r5
8000bdd4:	fe b0 c4 8c 	rcall	800046ec <memcpy>
8000bdd8:	8f e4       	st.w	r7[0x38],r4
8000bdda:	8f 05       	st.w	r7[0x0],r5
8000bddc:	8f d6       	st.w	r7[0x34],r6
8000bdde:	d8 2a       	popm	r4-r7,pc,r12=0
8000bde0:	dc 2a       	popm	r4-r7,pc,r12=-1
8000bde2:	d7 03       	nop

8000bde4 <_ungetc_r>:
8000bde4:	d4 21       	pushm	r4-r7,lr
8000bde6:	16 97       	mov	r7,r11
8000bde8:	14 96       	mov	r6,r10
8000bdea:	18 95       	mov	r5,r12
8000bdec:	5b fb       	cp.w	r11,-1
8000bdee:	c6 70       	breq	8000bebc <_ungetc_r+0xd8>
8000bdf0:	58 0c       	cp.w	r12,0
8000bdf2:	c0 60       	breq	8000bdfe <_ungetc_r+0x1a>
8000bdf4:	78 68       	ld.w	r8,r12[0x18]
8000bdf6:	58 08       	cp.w	r8,0
8000bdf8:	c0 31       	brne	8000bdfe <_ungetc_r+0x1a>
8000bdfa:	fe b0 e9 69 	rcall	800090cc <__sinit>
8000bdfe:	fe c8 df 3a 	sub	r8,pc,-8390
8000be02:	10 36       	cp.w	r6,r8
8000be04:	c0 31       	brne	8000be0a <_ungetc_r+0x26>
8000be06:	6a 06       	ld.w	r6,r5[0x0]
8000be08:	c0 c8       	rjmp	8000be20 <_ungetc_r+0x3c>
8000be0a:	fe c8 df 26 	sub	r8,pc,-8410
8000be0e:	10 36       	cp.w	r6,r8
8000be10:	c0 31       	brne	8000be16 <_ungetc_r+0x32>
8000be12:	6a 16       	ld.w	r6,r5[0x4]
8000be14:	c0 68       	rjmp	8000be20 <_ungetc_r+0x3c>
8000be16:	fe c8 df 12 	sub	r8,pc,-8430
8000be1a:	10 36       	cp.w	r6,r8
8000be1c:	eb f6 00 02 	ld.weq	r6,r5[0x8]
8000be20:	8c 68       	ld.sh	r8,r6[0xc]
8000be22:	a5 d8       	cbr	r8,0x5
8000be24:	ac 68       	st.h	r6[0xc],r8
8000be26:	ed b8 00 02 	bld	r8,0x2
8000be2a:	c1 40       	breq	8000be52 <_ungetc_r+0x6e>
8000be2c:	ed b8 00 04 	bld	r8,0x4
8000be30:	c4 51       	brne	8000beba <_ungetc_r+0xd6>
8000be32:	ed b8 00 03 	bld	r8,0x3
8000be36:	c0 b1       	brne	8000be4c <_ungetc_r+0x68>
8000be38:	0c 9b       	mov	r11,r6
8000be3a:	0a 9c       	mov	r12,r5
8000be3c:	fe b0 e8 5e 	rcall	80008ef8 <_fflush_r>
8000be40:	c3 d1       	brne	8000beba <_ungetc_r+0xd6>
8000be42:	8c 68       	ld.sh	r8,r6[0xc]
8000be44:	8d 6c       	st.w	r6[0x18],r12
8000be46:	a3 d8       	cbr	r8,0x3
8000be48:	8d 2c       	st.w	r6[0x8],r12
8000be4a:	ac 68       	st.h	r6[0xc],r8
8000be4c:	8c 68       	ld.sh	r8,r6[0xc]
8000be4e:	a3 a8       	sbr	r8,0x2
8000be50:	ac 68       	st.h	r6[0xc],r8
8000be52:	0e 94       	mov	r4,r7
8000be54:	6c d8       	ld.w	r8,r6[0x34]
8000be56:	5c 54       	castu.b	r4
8000be58:	58 08       	cp.w	r8,0
8000be5a:	c0 f0       	breq	8000be78 <_ungetc_r+0x94>
8000be5c:	6c 19       	ld.w	r9,r6[0x4]
8000be5e:	6c e8       	ld.w	r8,r6[0x38]
8000be60:	10 39       	cp.w	r9,r8
8000be62:	c0 55       	brlt	8000be6c <_ungetc_r+0x88>
8000be64:	0a 9c       	mov	r12,r5
8000be66:	0c 9b       	mov	r11,r6
8000be68:	c8 cf       	rcall	8000bd80 <__submore>
8000be6a:	c2 81       	brne	8000beba <_ungetc_r+0xd6>
8000be6c:	6c 08       	ld.w	r8,r6[0x0]
8000be6e:	20 18       	sub	r8,1
8000be70:	8d 08       	st.w	r6[0x0],r8
8000be72:	b0 84       	st.b	r8[0x0],r4
8000be74:	08 97       	mov	r7,r4
8000be76:	c0 c8       	rjmp	8000be8e <_ungetc_r+0xaa>
8000be78:	6c 49       	ld.w	r9,r6[0x10]
8000be7a:	58 09       	cp.w	r9,0
8000be7c:	c0 c0       	breq	8000be94 <_ungetc_r+0xb0>
8000be7e:	6c 08       	ld.w	r8,r6[0x0]
8000be80:	12 38       	cp.w	r8,r9
8000be82:	e0 88 00 09 	brls	8000be94 <_ungetc_r+0xb0>
8000be86:	11 77       	ld.ub	r7,--r8
8000be88:	08 37       	cp.w	r7,r4
8000be8a:	c0 51       	brne	8000be94 <_ungetc_r+0xb0>
8000be8c:	8d 08       	st.w	r6[0x0],r8
8000be8e:	6c 18       	ld.w	r8,r6[0x4]
8000be90:	2f f8       	sub	r8,-1
8000be92:	c1 28       	rjmp	8000beb6 <_ungetc_r+0xd2>
8000be94:	6c 18       	ld.w	r8,r6[0x4]
8000be96:	ed 48 00 40 	st.w	r6[64],r8
8000be9a:	6c 08       	ld.w	r8,r6[0x0]
8000be9c:	8d f8       	st.w	r6[0x3c],r8
8000be9e:	ec c8 ff bc 	sub	r8,r6,-68
8000bea2:	8d d8       	st.w	r6[0x34],r8
8000bea4:	30 38       	mov	r8,3
8000bea6:	8d e8       	st.w	r6[0x38],r8
8000bea8:	ec c8 ff ba 	sub	r8,r6,-70
8000beac:	ed 64 00 46 	st.b	r6[70],r4
8000beb0:	8d 08       	st.w	r6[0x0],r8
8000beb2:	08 97       	mov	r7,r4
8000beb4:	30 18       	mov	r8,1
8000beb6:	8d 18       	st.w	r6[0x4],r8
8000beb8:	c0 28       	rjmp	8000bebc <_ungetc_r+0xd8>
8000beba:	3f f7       	mov	r7,-1
8000bebc:	0e 9c       	mov	r12,r7
8000bebe:	d8 22       	popm	r4-r7,pc

8000bec0 <_write_r>:
8000bec0:	d4 21       	pushm	r4-r7,lr
8000bec2:	16 98       	mov	r8,r11
8000bec4:	18 97       	mov	r7,r12
8000bec6:	10 9c       	mov	r12,r8
8000bec8:	30 08       	mov	r8,0
8000beca:	14 9b       	mov	r11,r10
8000becc:	e0 66 0c 38 	mov	r6,3128
8000bed0:	12 9a       	mov	r10,r9
8000bed2:	8d 08       	st.w	r6[0x0],r8
8000bed4:	fe b0 c2 f6 	rcall	800044c0 <_write>
8000bed8:	5b fc       	cp.w	r12,-1
8000beda:	c0 51       	brne	8000bee4 <_write_r+0x24>
8000bedc:	6c 08       	ld.w	r8,r6[0x0]
8000bede:	58 08       	cp.w	r8,0
8000bee0:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000bee4:	d8 22       	popm	r4-r7,pc
8000bee6:	d7 03       	nop

8000bee8 <_calloc_r>:
8000bee8:	d4 21       	pushm	r4-r7,lr
8000beea:	f4 0b 02 4b 	mul	r11,r10,r11
8000beee:	fe b0 ec bf 	rcall	8000986c <_malloc_r>
8000bef2:	18 97       	mov	r7,r12
8000bef4:	c2 30       	breq	8000bf3a <_calloc_r+0x52>
8000bef6:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000befa:	e0 1a ff fc 	andl	r10,0xfffc
8000befe:	20 4a       	sub	r10,4
8000bf00:	e0 4a 00 24 	cp.w	r10,36
8000bf04:	e0 8b 00 18 	brhi	8000bf34 <_calloc_r+0x4c>
8000bf08:	18 98       	mov	r8,r12
8000bf0a:	59 3a       	cp.w	r10,19
8000bf0c:	e0 88 00 0f 	brls	8000bf2a <_calloc_r+0x42>
8000bf10:	30 09       	mov	r9,0
8000bf12:	10 a9       	st.w	r8++,r9
8000bf14:	10 a9       	st.w	r8++,r9
8000bf16:	59 ba       	cp.w	r10,27
8000bf18:	e0 88 00 09 	brls	8000bf2a <_calloc_r+0x42>
8000bf1c:	10 a9       	st.w	r8++,r9
8000bf1e:	10 a9       	st.w	r8++,r9
8000bf20:	e0 4a 00 24 	cp.w	r10,36
8000bf24:	c0 31       	brne	8000bf2a <_calloc_r+0x42>
8000bf26:	10 a9       	st.w	r8++,r9
8000bf28:	10 a9       	st.w	r8++,r9
8000bf2a:	30 09       	mov	r9,0
8000bf2c:	10 a9       	st.w	r8++,r9
8000bf2e:	91 19       	st.w	r8[0x4],r9
8000bf30:	91 09       	st.w	r8[0x0],r9
8000bf32:	c0 48       	rjmp	8000bf3a <_calloc_r+0x52>
8000bf34:	30 0b       	mov	r11,0
8000bf36:	fe b0 c4 7f 	rcall	80004834 <memset>
8000bf3a:	0e 9c       	mov	r12,r7
8000bf3c:	d8 22       	popm	r4-r7,pc
8000bf3e:	d7 03       	nop

8000bf40 <_close_r>:
8000bf40:	d4 21       	pushm	r4-r7,lr
8000bf42:	30 08       	mov	r8,0
8000bf44:	18 97       	mov	r7,r12
8000bf46:	e0 66 0c 38 	mov	r6,3128
8000bf4a:	16 9c       	mov	r12,r11
8000bf4c:	8d 08       	st.w	r6[0x0],r8
8000bf4e:	ca fe       	rcall	8000bcac <_close>
8000bf50:	5b fc       	cp.w	r12,-1
8000bf52:	c0 51       	brne	8000bf5c <_close_r+0x1c>
8000bf54:	6c 08       	ld.w	r8,r6[0x0]
8000bf56:	58 08       	cp.w	r8,0
8000bf58:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000bf5c:	d8 22       	popm	r4-r7,pc
8000bf5e:	d7 03       	nop

8000bf60 <__errno>:
8000bf60:	e0 68 01 94 	mov	r8,404
8000bf64:	70 0c       	ld.w	r12,r8[0x0]
8000bf66:	2f 4c       	sub	r12,-12
8000bf68:	5e fc       	retal	r12
8000bf6a:	d7 03       	nop

8000bf6c <_fclose_r>:
8000bf6c:	d4 21       	pushm	r4-r7,lr
8000bf6e:	18 96       	mov	r6,r12
8000bf70:	16 97       	mov	r7,r11
8000bf72:	58 0b       	cp.w	r11,0
8000bf74:	c0 31       	brne	8000bf7a <_fclose_r+0xe>
8000bf76:	16 95       	mov	r5,r11
8000bf78:	c5 38       	rjmp	8000c01e <_fclose_r+0xb2>
8000bf7a:	fe b0 e8 57 	rcall	80009028 <__sfp_lock_acquire>
8000bf7e:	58 06       	cp.w	r6,0
8000bf80:	c0 70       	breq	8000bf8e <_fclose_r+0x22>
8000bf82:	6c 68       	ld.w	r8,r6[0x18]
8000bf84:	58 08       	cp.w	r8,0
8000bf86:	c0 41       	brne	8000bf8e <_fclose_r+0x22>
8000bf88:	0c 9c       	mov	r12,r6
8000bf8a:	fe b0 e8 a1 	rcall	800090cc <__sinit>
8000bf8e:	fe c8 e0 ca 	sub	r8,pc,-7990
8000bf92:	10 37       	cp.w	r7,r8
8000bf94:	c0 31       	brne	8000bf9a <_fclose_r+0x2e>
8000bf96:	6c 07       	ld.w	r7,r6[0x0]
8000bf98:	c0 c8       	rjmp	8000bfb0 <_fclose_r+0x44>
8000bf9a:	fe c8 e0 b6 	sub	r8,pc,-8010
8000bf9e:	10 37       	cp.w	r7,r8
8000bfa0:	c0 31       	brne	8000bfa6 <_fclose_r+0x3a>
8000bfa2:	6c 17       	ld.w	r7,r6[0x4]
8000bfa4:	c0 68       	rjmp	8000bfb0 <_fclose_r+0x44>
8000bfa6:	fe c8 e0 a2 	sub	r8,pc,-8030
8000bfaa:	10 37       	cp.w	r7,r8
8000bfac:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000bfb0:	8e 69       	ld.sh	r9,r7[0xc]
8000bfb2:	30 08       	mov	r8,0
8000bfb4:	f0 09 19 00 	cp.h	r9,r8
8000bfb8:	c0 51       	brne	8000bfc2 <_fclose_r+0x56>
8000bfba:	fe b0 e8 38 	rcall	8000902a <__sfp_lock_release>
8000bfbe:	30 05       	mov	r5,0
8000bfc0:	c2 f8       	rjmp	8000c01e <_fclose_r+0xb2>
8000bfc2:	0e 9b       	mov	r11,r7
8000bfc4:	0c 9c       	mov	r12,r6
8000bfc6:	fe b0 e7 99 	rcall	80008ef8 <_fflush_r>
8000bfca:	6e c8       	ld.w	r8,r7[0x30]
8000bfcc:	18 95       	mov	r5,r12
8000bfce:	58 08       	cp.w	r8,0
8000bfd0:	c0 60       	breq	8000bfdc <_fclose_r+0x70>
8000bfd2:	6e 8b       	ld.w	r11,r7[0x20]
8000bfd4:	0c 9c       	mov	r12,r6
8000bfd6:	5d 18       	icall	r8
8000bfd8:	f9 b5 05 ff 	movlt	r5,-1
8000bfdc:	8e 68       	ld.sh	r8,r7[0xc]
8000bfde:	ed b8 00 07 	bld	r8,0x7
8000bfe2:	c0 51       	brne	8000bfec <_fclose_r+0x80>
8000bfe4:	6e 4b       	ld.w	r11,r7[0x10]
8000bfe6:	0c 9c       	mov	r12,r6
8000bfe8:	fe b0 e9 66 	rcall	800092b4 <_free_r>
8000bfec:	6e db       	ld.w	r11,r7[0x34]
8000bfee:	58 0b       	cp.w	r11,0
8000bff0:	c0 a0       	breq	8000c004 <_fclose_r+0x98>
8000bff2:	ee c8 ff bc 	sub	r8,r7,-68
8000bff6:	10 3b       	cp.w	r11,r8
8000bff8:	c0 40       	breq	8000c000 <_fclose_r+0x94>
8000bffa:	0c 9c       	mov	r12,r6
8000bffc:	fe b0 e9 5c 	rcall	800092b4 <_free_r>
8000c000:	30 08       	mov	r8,0
8000c002:	8f d8       	st.w	r7[0x34],r8
8000c004:	6f 2b       	ld.w	r11,r7[0x48]
8000c006:	58 0b       	cp.w	r11,0
8000c008:	c0 70       	breq	8000c016 <_fclose_r+0xaa>
8000c00a:	0c 9c       	mov	r12,r6
8000c00c:	fe b0 e9 54 	rcall	800092b4 <_free_r>
8000c010:	30 08       	mov	r8,0
8000c012:	ef 48 00 48 	st.w	r7[72],r8
8000c016:	30 08       	mov	r8,0
8000c018:	ae 68       	st.h	r7[0xc],r8
8000c01a:	fe b0 e8 08 	rcall	8000902a <__sfp_lock_release>
8000c01e:	0a 9c       	mov	r12,r5
8000c020:	d8 22       	popm	r4-r7,pc
8000c022:	d7 03       	nop

8000c024 <fclose>:
8000c024:	d4 01       	pushm	lr
8000c026:	e0 68 01 94 	mov	r8,404
8000c02a:	18 9b       	mov	r11,r12
8000c02c:	70 0c       	ld.w	r12,r8[0x0]
8000c02e:	c9 ff       	rcall	8000bf6c <_fclose_r>
8000c030:	d8 02       	popm	pc
8000c032:	d7 03       	nop

8000c034 <_fstat_r>:
8000c034:	d4 21       	pushm	r4-r7,lr
8000c036:	16 98       	mov	r8,r11
8000c038:	18 97       	mov	r7,r12
8000c03a:	10 9c       	mov	r12,r8
8000c03c:	30 08       	mov	r8,0
8000c03e:	e0 66 0c 38 	mov	r6,3128
8000c042:	14 9b       	mov	r11,r10
8000c044:	8d 08       	st.w	r6[0x0],r8
8000c046:	c5 be       	rcall	8000bcfc <_fstat>
8000c048:	5b fc       	cp.w	r12,-1
8000c04a:	c0 51       	brne	8000c054 <_fstat_r+0x20>
8000c04c:	6c 08       	ld.w	r8,r6[0x0]
8000c04e:	58 08       	cp.w	r8,0
8000c050:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c054:	d8 22       	popm	r4-r7,pc
8000c056:	d7 03       	nop

8000c058 <__hexdig_init>:
8000c058:	fe c9 df 94 	sub	r9,pc,-8300
8000c05c:	31 08       	mov	r8,16
8000c05e:	e0 6b 0b 38 	mov	r11,2872
8000c062:	c0 58       	rjmp	8000c06c <__hexdig_init+0x14>
8000c064:	f6 0a 0b 08 	st.b	r11[r10],r8
8000c068:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8
8000c06c:	f0 cc ff ff 	sub	r12,r8,-1
8000c070:	13 3a       	ld.ub	r10,r9++
8000c072:	58 0a       	cp.w	r10,0
8000c074:	cf 81       	brne	8000c064 <__hexdig_init+0xc>
8000c076:	fe c9 df ba 	sub	r9,pc,-8262
8000c07a:	31 a8       	mov	r8,26
8000c07c:	e0 6b 0b 38 	mov	r11,2872
8000c080:	c0 58       	rjmp	8000c08a <__hexdig_init+0x32>
8000c082:	f6 0a 0b 08 	st.b	r11[r10],r8
8000c086:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8
8000c08a:	f0 cc ff ff 	sub	r12,r8,-1
8000c08e:	13 3a       	ld.ub	r10,r9++
8000c090:	58 0a       	cp.w	r10,0
8000c092:	cf 81       	brne	8000c082 <__hexdig_init+0x2a>
8000c094:	fe c9 df e0 	sub	r9,pc,-8224
8000c098:	31 a8       	mov	r8,26
8000c09a:	e0 6b 0b 38 	mov	r11,2872
8000c09e:	c0 58       	rjmp	8000c0a8 <__hexdig_init+0x50>
8000c0a0:	f6 0a 0b 08 	st.b	r11[r10],r8
8000c0a4:	f1 dc c0 08 	bfextu	r8,r12,0x0,0x8
8000c0a8:	f0 cc ff ff 	sub	r12,r8,-1
8000c0ac:	13 3a       	ld.ub	r10,r9++
8000c0ae:	58 0a       	cp.w	r10,0
8000c0b0:	cf 81       	brne	8000c0a0 <__hexdig_init+0x48>
8000c0b2:	5e fc       	retal	r12

8000c0b4 <rshift>:
8000c0b4:	d4 21       	pushm	r4-r7,lr
8000c0b6:	f8 c8 ff ec 	sub	r8,r12,-20
8000c0ba:	f6 09 14 05 	asr	r9,r11,0x5
8000c0be:	78 4e       	ld.w	lr,r12[0x10]
8000c0c0:	1c 39       	cp.w	r9,lr
8000c0c2:	c2 64       	brge	8000c10e <rshift+0x5a>
8000c0c4:	2f be       	sub	lr,-5
8000c0c6:	2f b9       	sub	r9,-5
8000c0c8:	f8 0e 00 2e 	add	lr,r12,lr<<0x2
8000c0cc:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
8000c0d0:	f8 09 00 2a 	add	r10,r12,r9<<0x2
8000c0d4:	58 0b       	cp.w	r11,0
8000c0d6:	c1 a0       	breq	8000c10a <rshift+0x56>
8000c0d8:	f8 09 03 29 	ld.w	r9,r12[r9<<0x2]
8000c0dc:	2f ca       	sub	r10,-4
8000c0de:	f2 0b 0a 49 	lsr	r9,r9,r11
8000c0e2:	f6 07 11 20 	rsub	r7,r11,32
8000c0e6:	c0 98       	rjmp	8000c0f8 <rshift+0x44>
8000c0e8:	74 06       	ld.w	r6,r10[0x0]
8000c0ea:	ec 07 09 46 	lsl	r6,r6,r7
8000c0ee:	0c 49       	or	r9,r6
8000c0f0:	10 a9       	st.w	r8++,r9
8000c0f2:	15 09       	ld.w	r9,r10++
8000c0f4:	f2 0b 0a 49 	lsr	r9,r9,r11
8000c0f8:	1c 3a       	cp.w	r10,lr
8000c0fa:	cf 73       	brcs	8000c0e8 <rshift+0x34>
8000c0fc:	91 09       	st.w	r8[0x0],r9
8000c0fe:	58 09       	cp.w	r9,0
8000c100:	c0 70       	breq	8000c10e <rshift+0x5a>
8000c102:	2f c8       	sub	r8,-4
8000c104:	c0 58       	rjmp	8000c10e <rshift+0x5a>
8000c106:	15 09       	ld.w	r9,r10++
8000c108:	10 a9       	st.w	r8++,r9
8000c10a:	1c 3a       	cp.w	r10,lr
8000c10c:	cf d3       	brcs	8000c106 <rshift+0x52>
8000c10e:	f8 c9 ff ec 	sub	r9,r12,-20
8000c112:	12 18       	sub	r8,r9
8000c114:	a3 48       	asr	r8,0x2
8000c116:	99 48       	st.w	r12[0x10],r8
8000c118:	f9 f8 0a 05 	st.weq	r12[0x14],r8
8000c11c:	d8 22       	popm	r4-r7,pc
8000c11e:	d7 03       	nop

8000c120 <__gethex>:
8000c120:	d4 31       	pushm	r0-r7,lr
8000c122:	20 3d       	sub	sp,12
8000c124:	50 29       	stdsp	sp[0x8],r9
8000c126:	50 08       	stdsp	sp[0x0],r8
8000c128:	40 c9       	lddsp	r9,sp[0x30]
8000c12a:	e0 68 0b 38 	mov	r8,2872
8000c12e:	50 19       	stdsp	sp[0x4],r9
8000c130:	18 91       	mov	r1,r12
8000c132:	f1 39 00 30 	ld.ub	r9,r8[48]
8000c136:	16 96       	mov	r6,r11
8000c138:	14 97       	mov	r7,r10
8000c13a:	30 08       	mov	r8,0
8000c13c:	f0 09 18 00 	cp.b	r9,r8
8000c140:	c0 21       	brne	8000c144 <__gethex+0x24>
8000c142:	c8 bf       	rcall	8000c058 <__hexdig_init>
8000c144:	6c 05       	ld.w	r5,r6[0x0]
8000c146:	30 03       	mov	r3,0
8000c148:	2f e5       	sub	r5,-2
8000c14a:	33 09       	mov	r9,48
8000c14c:	c0 28       	rjmp	8000c150 <__gethex+0x30>
8000c14e:	2f f3       	sub	r3,-1
8000c150:	0a 94       	mov	r4,r5
8000c152:	0b 88       	ld.ub	r8,r5[0x0]
8000c154:	2f f5       	sub	r5,-1
8000c156:	f2 08 18 00 	cp.b	r8,r9
8000c15a:	cf a0       	breq	8000c14e <__gethex+0x2e>
8000c15c:	e0 6a 0b 38 	mov	r10,2872
8000c160:	30 0b       	mov	r11,0
8000c162:	f4 08 07 09 	ld.ub	r9,r10[r8]
8000c166:	f6 09 18 00 	cp.b	r9,r11
8000c16a:	c0 50       	breq	8000c174 <__gethex+0x54>
8000c16c:	30 0b       	mov	r11,0
8000c16e:	08 92       	mov	r2,r4
8000c170:	16 95       	mov	r5,r11
8000c172:	c2 c8       	rjmp	8000c1ca <__gethex+0xaa>
8000c174:	32 eb       	mov	r11,46
8000c176:	f6 08 18 00 	cp.b	r8,r11
8000c17a:	c0 30       	breq	8000c180 <__gethex+0x60>
8000c17c:	08 92       	mov	r2,r4
8000c17e:	c0 88       	rjmp	8000c18e <__gethex+0x6e>
8000c180:	0b 88       	ld.ub	r8,r5[0x0]
8000c182:	0a 92       	mov	r2,r5
8000c184:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000c188:	f2 08 18 00 	cp.b	r8,r9
8000c18c:	c0 41       	brne	8000c194 <__gethex+0x74>
8000c18e:	30 05       	mov	r5,0
8000c190:	30 1b       	mov	r11,1
8000c192:	c4 38       	rjmp	8000c218 <__gethex+0xf8>
8000c194:	0a 92       	mov	r2,r5
8000c196:	33 09       	mov	r9,48
8000c198:	c0 28       	rjmp	8000c19c <__gethex+0x7c>
8000c19a:	2f f2       	sub	r2,-1
8000c19c:	05 88       	ld.ub	r8,r2[0x0]
8000c19e:	f2 08 18 00 	cp.b	r8,r9
8000c1a2:	cf c0       	breq	8000c19a <__gethex+0x7a>
8000c1a4:	e0 69 0b 38 	mov	r9,2872
8000c1a8:	f2 08 07 09 	ld.ub	r9,r9[r8]
8000c1ac:	30 08       	mov	r8,0
8000c1ae:	f0 09 18 00 	cp.b	r9,r8
8000c1b2:	e4 04 17 10 	movne	r4,r2
8000c1b6:	f9 bb 01 00 	movne	r11,0
8000c1ba:	f9 b3 01 01 	movne	r3,1
8000c1be:	f9 bb 00 01 	moveq	r11,1
8000c1c2:	e4 04 17 00 	moveq	r4,r2
8000c1c6:	f6 03 17 00 	moveq	r3,r11
8000c1ca:	e0 6a 0b 38 	mov	r10,2872
8000c1ce:	30 08       	mov	r8,0
8000c1d0:	c0 28       	rjmp	8000c1d4 <__gethex+0xb4>
8000c1d2:	2f f2       	sub	r2,-1
8000c1d4:	05 89       	ld.ub	r9,r2[0x0]
8000c1d6:	f4 09 07 0c 	ld.ub	r12,r10[r9]
8000c1da:	f0 0c 18 00 	cp.b	r12,r8
8000c1de:	cf a1       	brne	8000c1d2 <__gethex+0xb2>
8000c1e0:	58 05       	cp.w	r5,0
8000c1e2:	5f 0a       	sreq	r10
8000c1e4:	32 ec       	mov	r12,46
8000c1e6:	f8 09 18 00 	cp.b	r9,r12
8000c1ea:	5f 09       	sreq	r9
8000c1ec:	f3 ea 00 0a 	and	r10,r9,r10
8000c1f0:	f0 0a 18 00 	cp.b	r10,r8
8000c1f4:	c0 e0       	breq	8000c210 <__gethex+0xf0>
8000c1f6:	2f f2       	sub	r2,-1
8000c1f8:	e0 69 0b 38 	mov	r9,2872
8000c1fc:	04 95       	mov	r5,r2
8000c1fe:	30 08       	mov	r8,0
8000c200:	c0 28       	rjmp	8000c204 <__gethex+0xe4>
8000c202:	2f f2       	sub	r2,-1
8000c204:	05 8a       	ld.ub	r10,r2[0x0]
8000c206:	f2 0a 07 0a 	ld.ub	r10,r9[r10]
8000c20a:	f0 0a 18 00 	cp.b	r10,r8
8000c20e:	cf a1       	brne	8000c202 <__gethex+0xe2>
8000c210:	58 05       	cp.w	r5,0
8000c212:	c0 30       	breq	8000c218 <__gethex+0xf8>
8000c214:	04 15       	sub	r5,r2
8000c216:	a3 65       	lsl	r5,0x2
8000c218:	05 88       	ld.ub	r8,r2[0x0]
8000c21a:	35 09       	mov	r9,80
8000c21c:	f2 08 18 00 	cp.b	r8,r9
8000c220:	c0 50       	breq	8000c22a <__gethex+0x10a>
8000c222:	37 09       	mov	r9,112
8000c224:	f2 08 18 00 	cp.b	r8,r9
8000c228:	c3 21       	brne	8000c28c <__gethex+0x16c>
8000c22a:	e4 c8 ff ff 	sub	r8,r2,-1
8000c22e:	32 ba       	mov	r10,43
8000c230:	11 89       	ld.ub	r9,r8[0x0]
8000c232:	f4 09 18 00 	cp.b	r9,r10
8000c236:	c0 90       	breq	8000c248 <__gethex+0x128>
8000c238:	32 da       	mov	r10,45
8000c23a:	f4 09 18 00 	cp.b	r9,r10
8000c23e:	c0 30       	breq	8000c244 <__gethex+0x124>
8000c240:	30 0a       	mov	r10,0
8000c242:	c0 58       	rjmp	8000c24c <__gethex+0x12c>
8000c244:	30 1a       	mov	r10,1
8000c246:	c0 28       	rjmp	8000c24a <__gethex+0x12a>
8000c248:	30 0a       	mov	r10,0
8000c24a:	2f f8       	sub	r8,-1
8000c24c:	e0 6e 0b 38 	mov	lr,2872
8000c250:	11 89       	ld.ub	r9,r8[0x0]
8000c252:	fc 09 07 09 	ld.ub	r9,lr[r9]
8000c256:	58 09       	cp.w	r9,0
8000c258:	c1 a0       	breq	8000c28c <__gethex+0x16c>
8000c25a:	59 99       	cp.w	r9,25
8000c25c:	e0 89 00 18 	brgt	8000c28c <__gethex+0x16c>
8000c260:	21 09       	sub	r9,16
8000c262:	c0 48       	rjmp	8000c26a <__gethex+0x14a>
8000c264:	21 0c       	sub	r12,16
8000c266:	f8 00 00 19 	add	r9,r12,r0<<0x1
8000c26a:	2f f8       	sub	r8,-1
8000c26c:	f2 09 00 20 	add	r0,r9,r9<<0x2
8000c270:	11 8c       	ld.ub	r12,r8[0x0]
8000c272:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000c276:	58 0c       	cp.w	r12,0
8000c278:	c0 40       	breq	8000c280 <__gethex+0x160>
8000c27a:	59 9c       	cp.w	r12,25
8000c27c:	fe 9a ff f4 	brle	8000c264 <__gethex+0x144>
8000c280:	58 0a       	cp.w	r10,0
8000c282:	fb b9 01 00 	rsubne	r9,0
8000c286:	12 05       	add	r5,r9
8000c288:	c0 38       	rjmp	8000c28e <__gethex+0x16e>
8000c28a:	d7 03       	nop
8000c28c:	04 98       	mov	r8,r2
8000c28e:	8d 08       	st.w	r6[0x0],r8
8000c290:	58 0b       	cp.w	r11,0
8000c292:	c0 70       	breq	8000c2a0 <__gethex+0x180>
8000c294:	58 03       	cp.w	r3,0
8000c296:	f9 b3 01 00 	movne	r3,0
8000c29a:	f9 b3 00 06 	moveq	r3,6
8000c29e:	c5 19       	rjmp	8000c540 <__gethex+0x420>
8000c2a0:	e4 c8 00 01 	sub	r8,r2,1
8000c2a4:	08 18       	sub	r8,r4
8000c2a6:	c0 38       	rjmp	8000c2ac <__gethex+0x18c>
8000c2a8:	2f fb       	sub	r11,-1
8000c2aa:	a1 58       	asr	r8,0x1
8000c2ac:	58 78       	cp.w	r8,7
8000c2ae:	fe 99 ff fd 	brgt	8000c2a8 <__gethex+0x188>
8000c2b2:	02 9c       	mov	r12,r1
8000c2b4:	fe b0 ee ce 	rcall	8000a050 <_Balloc>
8000c2b8:	30 08       	mov	r8,0
8000c2ba:	f8 c0 ff ec 	sub	r0,r12,-20
8000c2be:	18 96       	mov	r6,r12
8000c2c0:	00 9a       	mov	r10,r0
8000c2c2:	10 99       	mov	r9,r8
8000c2c4:	32 eb       	mov	r11,46
8000c2c6:	e0 6e 0b 38 	mov	lr,2872
8000c2ca:	c1 48       	rjmp	8000c2f2 <__gethex+0x1d2>
8000c2cc:	05 7c       	ld.ub	r12,--r2
8000c2ce:	f6 0c 18 00 	cp.b	r12,r11
8000c2d2:	c1 00       	breq	8000c2f2 <__gethex+0x1d2>
8000c2d4:	e0 49 00 20 	cp.w	r9,32
8000c2d8:	c0 41       	brne	8000c2e0 <__gethex+0x1c0>
8000c2da:	14 a8       	st.w	r10++,r8
8000c2dc:	30 08       	mov	r8,0
8000c2de:	10 99       	mov	r9,r8
8000c2e0:	05 8c       	ld.ub	r12,r2[0x0]
8000c2e2:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000c2e6:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
8000c2ea:	f8 09 09 4c 	lsl	r12,r12,r9
8000c2ee:	2f c9       	sub	r9,-4
8000c2f0:	18 48       	or	r8,r12
8000c2f2:	08 32       	cp.w	r2,r4
8000c2f4:	fe 9b ff ec 	brhi	8000c2cc <__gethex+0x1ac>
8000c2f8:	14 a8       	st.w	r10++,r8
8000c2fa:	10 9c       	mov	r12,r8
8000c2fc:	ec c8 ff ec 	sub	r8,r6,-20
8000c300:	10 1a       	sub	r10,r8
8000c302:	a3 4a       	asr	r10,0x2
8000c304:	f4 03 15 05 	lsl	r3,r10,0x5
8000c308:	8d 4a       	st.w	r6[0x10],r10
8000c30a:	fe b0 ed 23 	rcall	80009d50 <__hi0bits>
8000c30e:	6e 04       	ld.w	r4,r7[0x0]
8000c310:	18 13       	sub	r3,r12
8000c312:	08 33       	cp.w	r3,r4
8000c314:	e0 8a 00 27 	brle	8000c362 <__gethex+0x242>
8000c318:	08 13       	sub	r3,r4
8000c31a:	0c 9c       	mov	r12,r6
8000c31c:	06 9b       	mov	r11,r3
8000c31e:	fe b0 ee 58 	rcall	80009fce <__any_on>
8000c322:	c0 31       	brne	8000c328 <__gethex+0x208>
8000c324:	18 92       	mov	r2,r12
8000c326:	c1 98       	rjmp	8000c358 <__gethex+0x238>
8000c328:	e6 cb 00 01 	sub	r11,r3,1
8000c32c:	30 12       	mov	r2,1
8000c32e:	f6 08 14 05 	asr	r8,r11,0x5
8000c332:	e4 0b 09 49 	lsl	r9,r2,r11
8000c336:	2f b8       	sub	r8,-5
8000c338:	ec 08 03 28 	ld.w	r8,r6[r8<<0x2]
8000c33c:	f3 e8 00 08 	and	r8,r9,r8
8000c340:	c0 c0       	breq	8000c358 <__gethex+0x238>
8000c342:	04 3b       	cp.w	r11,r2
8000c344:	e0 8a 00 09 	brle	8000c356 <__gethex+0x236>
8000c348:	20 1b       	sub	r11,1
8000c34a:	0c 9c       	mov	r12,r6
8000c34c:	fe b0 ee 41 	rcall	80009fce <__any_on>
8000c350:	c0 30       	breq	8000c356 <__gethex+0x236>
8000c352:	30 32       	mov	r2,3
8000c354:	c0 28       	rjmp	8000c358 <__gethex+0x238>
8000c356:	30 22       	mov	r2,2
8000c358:	06 05       	add	r5,r3
8000c35a:	06 9b       	mov	r11,r3
8000c35c:	0c 9c       	mov	r12,r6
8000c35e:	ca be       	rcall	8000c0b4 <rshift>
8000c360:	c1 08       	rjmp	8000c380 <__gethex+0x260>
8000c362:	08 33       	cp.w	r3,r4
8000c364:	c0 35       	brlt	8000c36a <__gethex+0x24a>
8000c366:	30 02       	mov	r2,0
8000c368:	c0 c8       	rjmp	8000c380 <__gethex+0x260>
8000c36a:	e8 03 01 0a 	sub	r10,r4,r3
8000c36e:	0c 9b       	mov	r11,r6
8000c370:	14 15       	sub	r5,r10
8000c372:	02 9c       	mov	r12,r1
8000c374:	30 02       	mov	r2,0
8000c376:	fe b0 ef 5f 	rcall	8000a234 <__lshift>
8000c37a:	18 96       	mov	r6,r12
8000c37c:	f8 c0 ff ec 	sub	r0,r12,-20
8000c380:	6e 28       	ld.w	r8,r7[0x8]
8000c382:	10 35       	cp.w	r5,r8
8000c384:	e0 8a 00 09 	brle	8000c396 <__gethex+0x276>
8000c388:	0c 9b       	mov	r11,r6
8000c38a:	02 9c       	mov	r12,r1
8000c38c:	e0 63 00 a3 	mov	r3,163
8000c390:	fe b0 ee 46 	rcall	8000a01c <_Bfree>
8000c394:	c3 38       	rjmp	8000c3fa <__gethex+0x2da>
8000c396:	6e 18       	ld.w	r8,r7[0x4]
8000c398:	10 35       	cp.w	r5,r8
8000c39a:	c0 35       	brlt	8000c3a0 <__gethex+0x280>
8000c39c:	30 13       	mov	r3,1
8000c39e:	c5 38       	rjmp	8000c444 <__gethex+0x324>
8000c3a0:	f0 05 01 05 	sub	r5,r8,r5
8000c3a4:	08 35       	cp.w	r5,r4
8000c3a6:	c2 e5       	brlt	8000c402 <__gethex+0x2e2>
8000c3a8:	6e 38       	ld.w	r8,r7[0xc]
8000c3aa:	58 28       	cp.w	r8,2
8000c3ac:	c1 10       	breq	8000c3ce <__gethex+0x2ae>
8000c3ae:	58 38       	cp.w	r8,3
8000c3b0:	c1 30       	breq	8000c3d6 <__gethex+0x2b6>
8000c3b2:	58 18       	cp.w	r8,1
8000c3b4:	c1 e1       	brne	8000c3f0 <__gethex+0x2d0>
8000c3b6:	08 35       	cp.w	r5,r4
8000c3b8:	c1 c1       	brne	8000c3f0 <__gethex+0x2d0>
8000c3ba:	58 14       	cp.w	r4,1
8000c3bc:	e0 8a 00 10 	brle	8000c3dc <__gethex+0x2bc>
8000c3c0:	e8 cb 00 01 	sub	r11,r4,1
8000c3c4:	0c 9c       	mov	r12,r6
8000c3c6:	fe b0 ee 04 	rcall	80009fce <__any_on>
8000c3ca:	c0 91       	brne	8000c3dc <__gethex+0x2bc>
8000c3cc:	c1 28       	rjmp	8000c3f0 <__gethex+0x2d0>
8000c3ce:	40 18       	lddsp	r8,sp[0x4]
8000c3d0:	58 08       	cp.w	r8,0
8000c3d2:	c0 50       	breq	8000c3dc <__gethex+0x2bc>
8000c3d4:	c0 e8       	rjmp	8000c3f0 <__gethex+0x2d0>
8000c3d6:	40 19       	lddsp	r9,sp[0x4]
8000c3d8:	58 09       	cp.w	r9,0
8000c3da:	c0 b0       	breq	8000c3f0 <__gethex+0x2d0>
8000c3dc:	6e 18       	ld.w	r8,r7[0x4]
8000c3de:	40 29       	lddsp	r9,sp[0x8]
8000c3e0:	93 08       	st.w	r9[0x0],r8
8000c3e2:	40 08       	lddsp	r8,sp[0x0]
8000c3e4:	36 23       	mov	r3,98
8000c3e6:	91 06       	st.w	r8[0x0],r6
8000c3e8:	30 18       	mov	r8,1
8000c3ea:	81 08       	st.w	r0[0x0],r8
8000c3ec:	8d 48       	st.w	r6[0x10],r8
8000c3ee:	ca 98       	rjmp	8000c540 <__gethex+0x420>
8000c3f0:	0c 9b       	mov	r11,r6
8000c3f2:	02 9c       	mov	r12,r1
8000c3f4:	35 03       	mov	r3,80
8000c3f6:	fe b0 ee 13 	rcall	8000a01c <_Bfree>
8000c3fa:	30 08       	mov	r8,0
8000c3fc:	40 09       	lddsp	r9,sp[0x0]
8000c3fe:	93 08       	st.w	r9[0x0],r8
8000c400:	ca 08       	rjmp	8000c540 <__gethex+0x420>
8000c402:	ea c3 00 01 	sub	r3,r5,1
8000c406:	58 02       	cp.w	r2,0
8000c408:	c0 30       	breq	8000c40e <__gethex+0x2ee>
8000c40a:	30 12       	mov	r2,1
8000c40c:	c0 98       	rjmp	8000c41e <__gethex+0x2fe>
8000c40e:	58 03       	cp.w	r3,0
8000c410:	e0 8a 00 07 	brle	8000c41e <__gethex+0x2fe>
8000c414:	06 9b       	mov	r11,r3
8000c416:	0c 9c       	mov	r12,r6
8000c418:	fe b0 ed db 	rcall	80009fce <__any_on>
8000c41c:	18 92       	mov	r2,r12
8000c41e:	e6 08 14 05 	asr	r8,r3,0x5
8000c422:	e0 08 03 28 	ld.w	r8,r0[r8<<0x2]
8000c426:	30 19       	mov	r9,1
8000c428:	f2 03 09 43 	lsl	r3,r9,r3
8000c42c:	10 63       	and	r3,r8
8000c42e:	04 98       	mov	r8,r2
8000c430:	a1 b8       	sbr	r8,0x1
8000c432:	0a 9b       	mov	r11,r5
8000c434:	58 03       	cp.w	r3,0
8000c436:	f0 02 17 10 	movne	r2,r8
8000c43a:	0a 14       	sub	r4,r5
8000c43c:	0c 9c       	mov	r12,r6
8000c43e:	30 23       	mov	r3,2
8000c440:	c3 ae       	rcall	8000c0b4 <rshift>
8000c442:	6e 15       	ld.w	r5,r7[0x4]
8000c444:	58 02       	cp.w	r2,0
8000c446:	c7 90       	breq	8000c538 <__gethex+0x418>
8000c448:	6e 38       	ld.w	r8,r7[0xc]
8000c44a:	58 28       	cp.w	r8,2
8000c44c:	c1 10       	breq	8000c46e <__gethex+0x34e>
8000c44e:	58 38       	cp.w	r8,3
8000c450:	c0 40       	breq	8000c458 <__gethex+0x338>
8000c452:	58 18       	cp.w	r8,1
8000c454:	c7 11       	brne	8000c536 <__gethex+0x416>
8000c456:	c0 38       	rjmp	8000c45c <__gethex+0x33c>
8000c458:	40 18       	lddsp	r8,sp[0x4]
8000c45a:	c0 d8       	rjmp	8000c474 <__gethex+0x354>
8000c45c:	ed b2 00 01 	bld	r2,0x1
8000c460:	c6 b1       	brne	8000c536 <__gethex+0x416>
8000c462:	60 08       	ld.w	r8,r0[0x0]
8000c464:	10 42       	or	r2,r8
8000c466:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000c46a:	c0 71       	brne	8000c478 <__gethex+0x358>
8000c46c:	c6 58       	rjmp	8000c536 <__gethex+0x416>
8000c46e:	40 19       	lddsp	r9,sp[0x4]
8000c470:	f2 08 11 01 	rsub	r8,r9,1
8000c474:	58 08       	cp.w	r8,0
8000c476:	c6 00       	breq	8000c536 <__gethex+0x416>
8000c478:	6c 40       	ld.w	r0,r6[0x10]
8000c47a:	ec c8 ff ec 	sub	r8,r6,-20
8000c47e:	e0 cb ff fb 	sub	r11,r0,-5
8000c482:	30 0a       	mov	r10,0
8000c484:	ec 0b 00 2b 	add	r11,r6,r11<<0x2
8000c488:	70 09       	ld.w	r9,r8[0x0]
8000c48a:	5b f9       	cp.w	r9,-1
8000c48c:	c0 40       	breq	8000c494 <__gethex+0x374>
8000c48e:	2f f9       	sub	r9,-1
8000c490:	91 09       	st.w	r8[0x0],r9
8000c492:	c2 58       	rjmp	8000c4dc <__gethex+0x3bc>
8000c494:	10 aa       	st.w	r8++,r10
8000c496:	16 38       	cp.w	r8,r11
8000c498:	cf 83       	brcs	8000c488 <__gethex+0x368>
8000c49a:	6c 49       	ld.w	r9,r6[0x10]
8000c49c:	6c 28       	ld.w	r8,r6[0x8]
8000c49e:	10 39       	cp.w	r9,r8
8000c4a0:	c0 34       	brge	8000c4a6 <__gethex+0x386>
8000c4a2:	0c 92       	mov	r2,r6
8000c4a4:	c1 38       	rjmp	8000c4ca <__gethex+0x3aa>
8000c4a6:	6c 1b       	ld.w	r11,r6[0x4]
8000c4a8:	02 9c       	mov	r12,r1
8000c4aa:	2f fb       	sub	r11,-1
8000c4ac:	fe b0 ed d2 	rcall	8000a050 <_Balloc>
8000c4b0:	6c 4a       	ld.w	r10,r6[0x10]
8000c4b2:	ec cb ff f4 	sub	r11,r6,-12
8000c4b6:	18 92       	mov	r2,r12
8000c4b8:	2f ea       	sub	r10,-2
8000c4ba:	2f 4c       	sub	r12,-12
8000c4bc:	a3 6a       	lsl	r10,0x2
8000c4be:	fe b0 c1 17 	rcall	800046ec <memcpy>
8000c4c2:	0c 9b       	mov	r11,r6
8000c4c4:	02 9c       	mov	r12,r1
8000c4c6:	fe b0 ed ab 	rcall	8000a01c <_Bfree>
8000c4ca:	64 48       	ld.w	r8,r2[0x10]
8000c4cc:	f0 c9 ff ff 	sub	r9,r8,-1
8000c4d0:	04 96       	mov	r6,r2
8000c4d2:	85 49       	st.w	r2[0x10],r9
8000c4d4:	2f b8       	sub	r8,-5
8000c4d6:	30 19       	mov	r9,1
8000c4d8:	e4 08 09 29 	st.w	r2[r8<<0x2],r9
8000c4dc:	58 23       	cp.w	r3,2
8000c4de:	c1 01       	brne	8000c4fe <__gethex+0x3de>
8000c4e0:	6e 08       	ld.w	r8,r7[0x0]
8000c4e2:	20 18       	sub	r8,1
8000c4e4:	10 34       	cp.w	r4,r8
8000c4e6:	c2 61       	brne	8000c532 <__gethex+0x412>
8000c4e8:	e8 08 14 05 	asr	r8,r4,0x5
8000c4ec:	30 19       	mov	r9,1
8000c4ee:	2f b8       	sub	r8,-5
8000c4f0:	f2 04 09 44 	lsl	r4,r9,r4
8000c4f4:	ec 08 03 28 	ld.w	r8,r6[r8<<0x2]
8000c4f8:	10 64       	and	r4,r8
8000c4fa:	c1 b1       	brne	8000c530 <__gethex+0x410>
8000c4fc:	c1 b8       	rjmp	8000c532 <__gethex+0x412>
8000c4fe:	6c 48       	ld.w	r8,r6[0x10]
8000c500:	00 38       	cp.w	r8,r0
8000c502:	e0 89 00 0e 	brgt	8000c51e <__gethex+0x3fe>
8000c506:	e9 d4 c0 05 	bfextu	r4,r4,0x0,0x5
8000c50a:	c1 30       	breq	8000c530 <__gethex+0x410>
8000c50c:	2f c0       	sub	r0,-4
8000c50e:	e8 04 11 20 	rsub	r4,r4,32
8000c512:	ec 00 03 2c 	ld.w	r12,r6[r0<<0x2]
8000c516:	fe b0 ec 1d 	rcall	80009d50 <__hi0bits>
8000c51a:	08 3c       	cp.w	r12,r4
8000c51c:	c0 a4       	brge	8000c530 <__gethex+0x410>
8000c51e:	30 1b       	mov	r11,1
8000c520:	0c 9c       	mov	r12,r6
8000c522:	fe b0 fd c9 	rcall	8000c0b4 <rshift>
8000c526:	2f f5       	sub	r5,-1
8000c528:	6e 28       	ld.w	r8,r7[0x8]
8000c52a:	10 35       	cp.w	r5,r8
8000c52c:	fe 99 ff 2e 	brgt	8000c388 <__gethex+0x268>
8000c530:	30 13       	mov	r3,1
8000c532:	a5 b3       	sbr	r3,0x5
8000c534:	c0 28       	rjmp	8000c538 <__gethex+0x418>
8000c536:	a5 a3       	sbr	r3,0x4
8000c538:	40 08       	lddsp	r8,sp[0x0]
8000c53a:	40 29       	lddsp	r9,sp[0x8]
8000c53c:	91 06       	st.w	r8[0x0],r6
8000c53e:	93 05       	st.w	r9[0x0],r5
8000c540:	06 9c       	mov	r12,r3
8000c542:	2f dd       	sub	sp,-12
8000c544:	d8 32       	popm	r0-r7,pc
8000c546:	d7 03       	nop

8000c548 <__hexnan>:
8000c548:	d4 31       	pushm	r0-r7,lr
8000c54a:	20 2d       	sub	sp,8
8000c54c:	e0 68 0b 38 	mov	r8,2872
8000c550:	18 97       	mov	r7,r12
8000c552:	f1 39 00 30 	ld.ub	r9,r8[48]
8000c556:	16 95       	mov	r5,r11
8000c558:	14 96       	mov	r6,r10
8000c55a:	30 08       	mov	r8,0
8000c55c:	f0 09 18 00 	cp.b	r9,r8
8000c560:	c0 31       	brne	8000c566 <__hexnan+0x1e>
8000c562:	fe b0 fd 7b 	rcall	8000c058 <__hexdig_init>
8000c566:	30 08       	mov	r8,0
8000c568:	6a 09       	ld.w	r9,r5[0x0]
8000c56a:	10 9b       	mov	r11,r8
8000c56c:	e9 d9 c0 05 	bfextu	r4,r9,0x0,0x5
8000c570:	6e 05       	ld.w	r5,r7[0x0]
8000c572:	a5 59       	asr	r9,0x5
8000c574:	16 9a       	mov	r10,r11
8000c576:	ec 09 00 29 	add	r9,r6,r9<<0x2
8000c57a:	16 92       	mov	r2,r11
8000c57c:	58 04       	cp.w	r4,0
8000c57e:	f7 b9 01 fc 	subne	r9,-4
8000c582:	16 93       	mov	r3,r11
8000c584:	12 d8       	st.w	--r9,r8
8000c586:	12 9e       	mov	lr,r9
8000c588:	12 98       	mov	r8,r9
8000c58a:	c5 48       	rjmp	8000c632 <__hexnan+0xea>
8000c58c:	e0 60 0b 38 	mov	r0,2872
8000c590:	e0 0c 07 01 	ld.ub	r1,r0[r12]
8000c594:	58 01       	cp.w	r1,0
8000c596:	c3 e1       	brne	8000c612 <__hexnan+0xca>
8000c598:	e0 4c 00 20 	cp.w	r12,32
8000c59c:	e0 8b 00 2e 	brhi	8000c5f8 <__hexnan+0xb0>
8000c5a0:	14 3b       	cp.w	r11,r10
8000c5a2:	c4 84       	brge	8000c632 <__hexnan+0xea>
8000c5a4:	58 72       	cp.w	r2,7
8000c5a6:	5f a1       	srle	r1
8000c5a8:	1c 38       	cp.w	r8,lr
8000c5aa:	5f 3c       	srlo	r12
8000c5ac:	e3 ec 00 0c 	and	r12,r1,r12
8000c5b0:	30 01       	mov	r1,0
8000c5b2:	e2 0c 18 00 	cp.b	r12,r1
8000c5b6:	c1 70       	breq	8000c5e4 <__hexnan+0x9c>
8000c5b8:	e4 02 11 08 	rsub	r2,r2,8
8000c5bc:	10 9c       	mov	r12,r8
8000c5be:	a3 62       	lsl	r2,0x2
8000c5c0:	e4 00 11 20 	rsub	r0,r2,32
8000c5c4:	50 10       	stdsp	sp[0x4],r0
8000c5c6:	19 01       	ld.w	r1,r12++
8000c5c8:	50 01       	stdsp	sp[0x0],r1
8000c5ca:	78 01       	ld.w	r1,r12[0x0]
8000c5cc:	e2 02 0a 40 	lsr	r0,r1,r2
8000c5d0:	99 00       	st.w	r12[0x0],r0
8000c5d2:	40 10       	lddsp	r0,sp[0x4]
8000c5d4:	e2 00 09 41 	lsl	r1,r1,r0
8000c5d8:	40 00       	lddsp	r0,sp[0x0]
8000c5da:	00 41       	or	r1,r0
8000c5dc:	f9 41 ff fc 	st.w	r12[-4],r1
8000c5e0:	1c 3c       	cp.w	r12,lr
8000c5e2:	cf 23       	brcs	8000c5c6 <__hexnan+0x7e>
8000c5e4:	0c 38       	cp.w	r8,r6
8000c5e6:	e0 8b 00 04 	brhi	8000c5ee <__hexnan+0xa6>
8000c5ea:	30 82       	mov	r2,8
8000c5ec:	c2 38       	rjmp	8000c632 <__hexnan+0xea>
8000c5ee:	10 d3       	st.w	--r8,r3
8000c5f0:	14 9b       	mov	r11,r10
8000c5f2:	10 9e       	mov	lr,r8
8000c5f4:	06 92       	mov	r2,r3
8000c5f6:	c1 e8       	rjmp	8000c632 <__hexnan+0xea>
8000c5f8:	58 0a       	cp.w	r10,0
8000c5fa:	5f 1b       	srne	r11
8000c5fc:	e0 4c 00 29 	cp.w	r12,41
8000c600:	5f 0a       	sreq	r10
8000c602:	f7 ea 00 0a 	and	r10,r11,r10
8000c606:	e2 0a 18 00 	cp.b	r10,r1
8000c60a:	c5 90       	breq	8000c6bc <__hexnan+0x174>
8000c60c:	2f f5       	sub	r5,-1
8000c60e:	8f 05       	st.w	r7[0x0],r5
8000c610:	c1 78       	rjmp	8000c63e <__hexnan+0xf6>
8000c612:	2f fa       	sub	r10,-1
8000c614:	2f f2       	sub	r2,-1
8000c616:	58 82       	cp.w	r2,8
8000c618:	e0 8a 00 07 	brle	8000c626 <__hexnan+0xde>
8000c61c:	0c 38       	cp.w	r8,r6
8000c61e:	e0 88 00 0a 	brls	8000c632 <__hexnan+0xea>
8000c622:	10 d3       	st.w	--r8,r3
8000c624:	30 12       	mov	r2,1
8000c626:	70 0c       	ld.w	r12,r8[0x0]
8000c628:	e3 d1 c0 04 	bfextu	r1,r1,0x0,0x4
8000c62c:	e3 ec 10 41 	or	r1,r1,r12<<0x4
8000c630:	91 01       	st.w	r8[0x0],r1
8000c632:	2f f5       	sub	r5,-1
8000c634:	0b 8c       	ld.ub	r12,r5[0x0]
8000c636:	58 0c       	cp.w	r12,0
8000c638:	ca a1       	brne	8000c58c <__hexnan+0x44>
8000c63a:	58 0a       	cp.w	r10,0
8000c63c:	c4 00       	breq	8000c6bc <__hexnan+0x174>
8000c63e:	58 72       	cp.w	r2,7
8000c640:	5f ab       	srle	r11
8000c642:	1c 38       	cp.w	r8,lr
8000c644:	5f 3a       	srlo	r10
8000c646:	f7 ea 00 0a 	and	r10,r11,r10
8000c64a:	c1 30       	breq	8000c670 <__hexnan+0x128>
8000c64c:	e4 02 11 08 	rsub	r2,r2,8
8000c650:	10 9a       	mov	r10,r8
8000c652:	a3 62       	lsl	r2,0x2
8000c654:	e4 0c 11 20 	rsub	r12,r2,32
8000c658:	15 07       	ld.w	r7,r10++
8000c65a:	74 0b       	ld.w	r11,r10[0x0]
8000c65c:	f6 02 0a 45 	lsr	r5,r11,r2
8000c660:	f6 0c 09 4b 	lsl	r11,r11,r12
8000c664:	95 05       	st.w	r10[0x0],r5
8000c666:	0e 4b       	or	r11,r7
8000c668:	f5 4b ff fc 	st.w	r10[-4],r11
8000c66c:	1c 3a       	cp.w	r10,lr
8000c66e:	cf 53       	brcs	8000c658 <__hexnan+0x110>
8000c670:	0c 38       	cp.w	r8,r6
8000c672:	e0 88 00 0f 	brls	8000c690 <__hexnan+0x148>
8000c676:	0c 9a       	mov	r10,r6
8000c678:	11 0b       	ld.w	r11,r8++
8000c67a:	14 ab       	st.w	r10++,r11
8000c67c:	12 38       	cp.w	r8,r9
8000c67e:	fe 98 ff fd 	brls	8000c678 <__hexnan+0x130>
8000c682:	30 08       	mov	r8,0
8000c684:	14 a8       	st.w	r10++,r8
8000c686:	12 3a       	cp.w	r10,r9
8000c688:	fe 98 ff fe 	brls	8000c684 <__hexnan+0x13c>
8000c68c:	c0 d8       	rjmp	8000c6a6 <__hexnan+0x15e>
8000c68e:	d7 03       	nop
8000c690:	58 04       	cp.w	r4,0
8000c692:	c0 a0       	breq	8000c6a6 <__hexnan+0x15e>
8000c694:	72 08       	ld.w	r8,r9[0x0]
8000c696:	e8 04 11 20 	rsub	r4,r4,32
8000c69a:	3f fa       	mov	r10,-1
8000c69c:	f4 04 0a 44 	lsr	r4,r10,r4
8000c6a0:	f1 e4 00 04 	and	r4,r8,r4
8000c6a4:	93 04       	st.w	r9[0x0],r4
8000c6a6:	72 08       	ld.w	r8,r9[0x0]
8000c6a8:	58 08       	cp.w	r8,0
8000c6aa:	c0 51       	brne	8000c6b4 <__hexnan+0x16c>
8000c6ac:	0c 39       	cp.w	r9,r6
8000c6ae:	c0 51       	brne	8000c6b8 <__hexnan+0x170>
8000c6b0:	30 18       	mov	r8,1
8000c6b2:	93 08       	st.w	r9[0x0],r8
8000c6b4:	30 5c       	mov	r12,5
8000c6b6:	c0 48       	rjmp	8000c6be <__hexnan+0x176>
8000c6b8:	20 49       	sub	r9,4
8000c6ba:	cf 6b       	rjmp	8000c6a6 <__hexnan+0x15e>
8000c6bc:	30 4c       	mov	r12,4
8000c6be:	2f ed       	sub	sp,-8
8000c6c0:	d8 32       	popm	r0-r7,pc
8000c6c2:	d7 03       	nop

8000c6c4 <_lseek_r>:
8000c6c4:	d4 21       	pushm	r4-r7,lr
8000c6c6:	16 98       	mov	r8,r11
8000c6c8:	18 97       	mov	r7,r12
8000c6ca:	10 9c       	mov	r12,r8
8000c6cc:	30 08       	mov	r8,0
8000c6ce:	14 9b       	mov	r11,r10
8000c6d0:	e0 66 0c 38 	mov	r6,3128
8000c6d4:	12 9a       	mov	r10,r9
8000c6d6:	8d 08       	st.w	r6[0x0],r8
8000c6d8:	fe b0 fa f4 	rcall	8000bcc0 <_lseek>
8000c6dc:	5b fc       	cp.w	r12,-1
8000c6de:	c0 51       	brne	8000c6e8 <_lseek_r+0x24>
8000c6e0:	6c 08       	ld.w	r8,r6[0x0]
8000c6e2:	58 08       	cp.w	r8,0
8000c6e4:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c6e8:	d8 22       	popm	r4-r7,pc
8000c6ea:	d7 03       	nop

8000c6ec <_read_r>:
8000c6ec:	d4 21       	pushm	r4-r7,lr
8000c6ee:	16 98       	mov	r8,r11
8000c6f0:	18 97       	mov	r7,r12
8000c6f2:	10 9c       	mov	r12,r8
8000c6f4:	30 08       	mov	r8,0
8000c6f6:	14 9b       	mov	r11,r10
8000c6f8:	e0 66 0c 38 	mov	r6,3128
8000c6fc:	12 9a       	mov	r10,r9
8000c6fe:	8d 08       	st.w	r6[0x0],r8
8000c700:	fe b0 be 66 	rcall	800043cc <_read>
8000c704:	5b fc       	cp.w	r12,-1
8000c706:	c0 51       	brne	8000c710 <_read_r+0x24>
8000c708:	6c 08       	ld.w	r8,r6[0x0]
8000c70a:	58 08       	cp.w	r8,0
8000c70c:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000c710:	d8 22       	popm	r4-r7,pc
8000c712:	d7 03       	nop

8000c714 <__avr32_f64_mul>:
8000c714:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000c718:	e0 80 00 dc 	breq	8000c8d0 <__avr32_f64_mul_op1_zero>
8000c71c:	d4 21       	pushm	r4-r7,lr
8000c71e:	f7 e9 20 0e 	eor	lr,r11,r9
8000c722:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000c726:	30 15       	mov	r5,1
8000c728:	c4 30       	breq	8000c7ae <__avr32_f64_mul_op1_subnormal>
8000c72a:	ab 6b       	lsl	r11,0xa
8000c72c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000c730:	ab 6a       	lsl	r10,0xa
8000c732:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000c736:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000c73a:	c5 c0       	breq	8000c7f2 <__avr32_f64_mul_op2_subnormal>
8000c73c:	a1 78       	lsl	r8,0x1
8000c73e:	5c f9       	rol	r9
8000c740:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000c744:	e0 47 07 ff 	cp.w	r7,2047
8000c748:	c7 70       	breq	8000c836 <__avr32_f64_mul_op_nan_or_inf>
8000c74a:	e0 46 07 ff 	cp.w	r6,2047
8000c74e:	c7 40       	breq	8000c836 <__avr32_f64_mul_op_nan_or_inf>
8000c750:	ee 06 00 0c 	add	r12,r7,r6
8000c754:	e0 2c 03 fe 	sub	r12,1022
8000c758:	f6 08 06 44 	mulu.d	r4,r11,r8
8000c75c:	f4 09 07 44 	macu.d	r4,r10,r9
8000c760:	f4 08 06 46 	mulu.d	r6,r10,r8
8000c764:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000c768:	08 07       	add	r7,r4
8000c76a:	f4 05 00 4a 	adc	r10,r10,r5
8000c76e:	5c 0b       	acr	r11
8000c770:	ed bb 00 14 	bld	r11,0x14
8000c774:	c0 50       	breq	8000c77e <__avr32_f64_mul+0x6a>
8000c776:	a1 77       	lsl	r7,0x1
8000c778:	5c fa       	rol	r10
8000c77a:	5c fb       	rol	r11
8000c77c:	20 1c       	sub	r12,1
8000c77e:	58 0c       	cp.w	r12,0
8000c780:	e0 8a 00 6f 	brle	8000c85e <__avr32_f64_mul_res_subnormal>
8000c784:	e0 4c 07 ff 	cp.w	r12,2047
8000c788:	e0 84 00 9c 	brge	8000c8c0 <__avr32_f64_mul_res_inf>
8000c78c:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000c790:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000c794:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000c798:	ee 17 80 00 	eorh	r7,0x8000
8000c79c:	f1 b7 04 20 	satu	r7,0x1
8000c7a0:	0e 0a       	add	r10,r7
8000c7a2:	5c 0b       	acr	r11
8000c7a4:	ed be 00 1f 	bld	lr,0x1f
8000c7a8:	ef bb 00 1f 	bst	r11,0x1f
8000c7ac:	d8 22       	popm	r4-r7,pc

8000c7ae <__avr32_f64_mul_op1_subnormal>:
8000c7ae:	e4 1b 00 0f 	andh	r11,0xf
8000c7b2:	f4 0c 12 00 	clz	r12,r10
8000c7b6:	f6 06 12 00 	clz	r6,r11
8000c7ba:	f7 bc 03 e1 	sublo	r12,-31
8000c7be:	f8 06 17 30 	movlo	r6,r12
8000c7c2:	f7 b6 02 01 	subhs	r6,1
8000c7c6:	e0 46 00 20 	cp.w	r6,32
8000c7ca:	c0 d4       	brge	8000c7e4 <__avr32_f64_mul_op1_subnormal+0x36>
8000c7cc:	ec 0c 11 20 	rsub	r12,r6,32
8000c7d0:	f6 06 09 4b 	lsl	r11,r11,r6
8000c7d4:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000c7d8:	18 4b       	or	r11,r12
8000c7da:	f4 06 09 4a 	lsl	r10,r10,r6
8000c7de:	20 b6       	sub	r6,11
8000c7e0:	0c 17       	sub	r7,r6
8000c7e2:	ca ab       	rjmp	8000c736 <__avr32_f64_mul+0x22>
8000c7e4:	f4 06 09 4b 	lsl	r11,r10,r6
8000c7e8:	c6 40       	breq	8000c8b0 <__avr32_f64_mul_res_zero>
8000c7ea:	30 0a       	mov	r10,0
8000c7ec:	20 b6       	sub	r6,11
8000c7ee:	0c 17       	sub	r7,r6
8000c7f0:	ca 3b       	rjmp	8000c736 <__avr32_f64_mul+0x22>

8000c7f2 <__avr32_f64_mul_op2_subnormal>:
8000c7f2:	e4 19 00 0f 	andh	r9,0xf
8000c7f6:	f0 0c 12 00 	clz	r12,r8
8000c7fa:	f2 05 12 00 	clz	r5,r9
8000c7fe:	f7 bc 03 ea 	sublo	r12,-22
8000c802:	f8 05 17 30 	movlo	r5,r12
8000c806:	f7 b5 02 0a 	subhs	r5,10
8000c80a:	e0 45 00 20 	cp.w	r5,32
8000c80e:	c0 d4       	brge	8000c828 <__avr32_f64_mul_op2_subnormal+0x36>
8000c810:	ea 0c 11 20 	rsub	r12,r5,32
8000c814:	f2 05 09 49 	lsl	r9,r9,r5
8000c818:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000c81c:	18 49       	or	r9,r12
8000c81e:	f0 05 09 48 	lsl	r8,r8,r5
8000c822:	20 25       	sub	r5,2
8000c824:	0a 16       	sub	r6,r5
8000c826:	c8 fb       	rjmp	8000c744 <__avr32_f64_mul+0x30>
8000c828:	f0 05 09 49 	lsl	r9,r8,r5
8000c82c:	c4 20       	breq	8000c8b0 <__avr32_f64_mul_res_zero>
8000c82e:	30 08       	mov	r8,0
8000c830:	20 25       	sub	r5,2
8000c832:	0a 16       	sub	r6,r5
8000c834:	c8 8b       	rjmp	8000c744 <__avr32_f64_mul+0x30>

8000c836 <__avr32_f64_mul_op_nan_or_inf>:
8000c836:	e4 19 00 0f 	andh	r9,0xf
8000c83a:	e4 1b 00 0f 	andh	r11,0xf
8000c83e:	14 4b       	or	r11,r10
8000c840:	10 49       	or	r9,r8
8000c842:	e0 47 07 ff 	cp.w	r7,2047
8000c846:	c0 91       	brne	8000c858 <__avr32_f64_mul_op1_not_naninf>
8000c848:	58 0b       	cp.w	r11,0
8000c84a:	c3 81       	brne	8000c8ba <__avr32_f64_mul_res_nan>
8000c84c:	e0 46 07 ff 	cp.w	r6,2047
8000c850:	c3 81       	brne	8000c8c0 <__avr32_f64_mul_res_inf>
8000c852:	58 09       	cp.w	r9,0
8000c854:	c3 60       	breq	8000c8c0 <__avr32_f64_mul_res_inf>
8000c856:	c3 28       	rjmp	8000c8ba <__avr32_f64_mul_res_nan>

8000c858 <__avr32_f64_mul_op1_not_naninf>:
8000c858:	58 09       	cp.w	r9,0
8000c85a:	c3 30       	breq	8000c8c0 <__avr32_f64_mul_res_inf>
8000c85c:	c2 f8       	rjmp	8000c8ba <__avr32_f64_mul_res_nan>

8000c85e <__avr32_f64_mul_res_subnormal>:
8000c85e:	5c 3c       	neg	r12
8000c860:	2f fc       	sub	r12,-1
8000c862:	f1 bc 04 c0 	satu	r12,0x6
8000c866:	e0 4c 00 20 	cp.w	r12,32
8000c86a:	c1 14       	brge	8000c88c <__avr32_f64_mul_res_subnormal+0x2e>
8000c86c:	f8 08 11 20 	rsub	r8,r12,32
8000c870:	0e 46       	or	r6,r7
8000c872:	ee 0c 0a 47 	lsr	r7,r7,r12
8000c876:	f4 08 09 49 	lsl	r9,r10,r8
8000c87a:	12 47       	or	r7,r9
8000c87c:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000c880:	f6 08 09 49 	lsl	r9,r11,r8
8000c884:	12 4a       	or	r10,r9
8000c886:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000c88a:	c8 3b       	rjmp	8000c790 <__avr32_f64_mul+0x7c>
8000c88c:	f8 08 11 20 	rsub	r8,r12,32
8000c890:	f9 b9 00 00 	moveq	r9,0
8000c894:	c0 30       	breq	8000c89a <__avr32_f64_mul_res_subnormal+0x3c>
8000c896:	f6 08 09 49 	lsl	r9,r11,r8
8000c89a:	0e 46       	or	r6,r7
8000c89c:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000c8a0:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000c8a4:	f3 ea 10 07 	or	r7,r9,r10
8000c8a8:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000c8ac:	30 0b       	mov	r11,0
8000c8ae:	c7 1b       	rjmp	8000c790 <__avr32_f64_mul+0x7c>

8000c8b0 <__avr32_f64_mul_res_zero>:
8000c8b0:	1c 9b       	mov	r11,lr
8000c8b2:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c8b6:	30 0a       	mov	r10,0
8000c8b8:	d8 22       	popm	r4-r7,pc

8000c8ba <__avr32_f64_mul_res_nan>:
8000c8ba:	3f fb       	mov	r11,-1
8000c8bc:	3f fa       	mov	r10,-1
8000c8be:	d8 22       	popm	r4-r7,pc

8000c8c0 <__avr32_f64_mul_res_inf>:
8000c8c0:	f0 6b 00 00 	mov	r11,-1048576
8000c8c4:	ed be 00 1f 	bld	lr,0x1f
8000c8c8:	ef bb 00 1f 	bst	r11,0x1f
8000c8cc:	30 0a       	mov	r10,0
8000c8ce:	d8 22       	popm	r4-r7,pc

8000c8d0 <__avr32_f64_mul_op1_zero>:
8000c8d0:	f7 e9 20 0b 	eor	r11,r11,r9
8000c8d4:	e6 1b 80 00 	andh	r11,0x8000,COH
8000c8d8:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000c8dc:	e0 4c 07 ff 	cp.w	r12,2047
8000c8e0:	5e 1c       	retne	r12
8000c8e2:	3f fa       	mov	r10,-1
8000c8e4:	3f fb       	mov	r11,-1
8000c8e6:	5e fc       	retal	r12

8000c8e8 <__avr32_f64_sub_from_add>:
8000c8e8:	ee 19 80 00 	eorh	r9,0x8000

8000c8ec <__avr32_f64_sub>:
8000c8ec:	f7 e9 20 0c 	eor	r12,r11,r9
8000c8f0:	e0 86 00 ca 	brmi	8000ca84 <__avr32_f64_add_from_sub>
8000c8f4:	eb cd 40 e0 	pushm	r5-r7,lr
8000c8f8:	16 9c       	mov	r12,r11
8000c8fa:	e6 1c 80 00 	andh	r12,0x8000,COH
8000c8fe:	bf db       	cbr	r11,0x1f
8000c900:	bf d9       	cbr	r9,0x1f
8000c902:	10 3a       	cp.w	r10,r8
8000c904:	f2 0b 13 00 	cpc	r11,r9
8000c908:	c0 92       	brcc	8000c91a <__avr32_f64_sub+0x2e>
8000c90a:	16 97       	mov	r7,r11
8000c90c:	12 9b       	mov	r11,r9
8000c90e:	0e 99       	mov	r9,r7
8000c910:	14 97       	mov	r7,r10
8000c912:	10 9a       	mov	r10,r8
8000c914:	0e 98       	mov	r8,r7
8000c916:	ee 1c 80 00 	eorh	r12,0x8000
8000c91a:	f6 07 16 14 	lsr	r7,r11,0x14
8000c91e:	ab 7b       	lsl	r11,0xb
8000c920:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000c924:	ab 7a       	lsl	r10,0xb
8000c926:	bf bb       	sbr	r11,0x1f
8000c928:	f2 06 16 14 	lsr	r6,r9,0x14
8000c92c:	c4 40       	breq	8000c9b4 <__avr32_f64_sub_opL_subnormal>
8000c92e:	ab 79       	lsl	r9,0xb
8000c930:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000c934:	ab 78       	lsl	r8,0xb
8000c936:	bf b9       	sbr	r9,0x1f

8000c938 <__avr32_f64_sub_opL_subnormal_done>:
8000c938:	e0 47 07 ff 	cp.w	r7,2047
8000c93c:	c4 f0       	breq	8000c9da <__avr32_f64_sub_opH_nan_or_inf>
8000c93e:	0e 26       	rsub	r6,r7
8000c940:	c1 20       	breq	8000c964 <__avr32_f64_sub_shift_done>
8000c942:	ec 05 11 20 	rsub	r5,r6,32
8000c946:	e0 46 00 20 	cp.w	r6,32
8000c94a:	c7 c2       	brcc	8000ca42 <__avr32_f64_sub_longshift>
8000c94c:	f0 05 09 4e 	lsl	lr,r8,r5
8000c950:	f2 05 09 45 	lsl	r5,r9,r5
8000c954:	f0 06 0a 48 	lsr	r8,r8,r6
8000c958:	f2 06 0a 49 	lsr	r9,r9,r6
8000c95c:	0a 48       	or	r8,r5
8000c95e:	58 0e       	cp.w	lr,0
8000c960:	5f 1e       	srne	lr
8000c962:	1c 48       	or	r8,lr

8000c964 <__avr32_f64_sub_shift_done>:
8000c964:	10 1a       	sub	r10,r8
8000c966:	f6 09 01 4b 	sbc	r11,r11,r9
8000c96a:	f6 06 12 00 	clz	r6,r11
8000c96e:	c0 e0       	breq	8000c98a <__avr32_f64_sub_longnormalize_done>
8000c970:	c7 83       	brcs	8000ca60 <__avr32_f64_sub_longnormalize>
8000c972:	ec 0e 11 20 	rsub	lr,r6,32
8000c976:	f6 06 09 4b 	lsl	r11,r11,r6
8000c97a:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000c97e:	1c 4b       	or	r11,lr
8000c980:	f4 06 09 4a 	lsl	r10,r10,r6
8000c984:	0c 17       	sub	r7,r6
8000c986:	e0 8a 00 39 	brle	8000c9f8 <__avr32_f64_sub_subnormal_result>

8000c98a <__avr32_f64_sub_longnormalize_done>:
8000c98a:	f4 09 15 15 	lsl	r9,r10,0x15
8000c98e:	ab 9a       	lsr	r10,0xb
8000c990:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000c994:	ab 9b       	lsr	r11,0xb
8000c996:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000c99a:	18 4b       	or	r11,r12

8000c99c <__avr32_f64_sub_round>:
8000c99c:	fc 17 80 00 	movh	r7,0x8000
8000c9a0:	ed ba 00 00 	bld	r10,0x0
8000c9a4:	f7 b7 01 ff 	subne	r7,-1
8000c9a8:	0e 39       	cp.w	r9,r7
8000c9aa:	5f 29       	srhs	r9
8000c9ac:	12 0a       	add	r10,r9
8000c9ae:	5c 0b       	acr	r11
8000c9b0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c9b4 <__avr32_f64_sub_opL_subnormal>:
8000c9b4:	ab 79       	lsl	r9,0xb
8000c9b6:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8000c9ba:	ab 78       	lsl	r8,0xb
8000c9bc:	f3 e8 10 0e 	or	lr,r9,r8
8000c9c0:	f9 b6 01 01 	movne	r6,1
8000c9c4:	ee 0e 11 00 	rsub	lr,r7,0
8000c9c8:	f9 b7 00 01 	moveq	r7,1
8000c9cc:	ef bb 00 1f 	bst	r11,0x1f
8000c9d0:	f7 ea 10 0e 	or	lr,r11,r10
8000c9d4:	f9 b7 00 00 	moveq	r7,0
8000c9d8:	cb 0b       	rjmp	8000c938 <__avr32_f64_sub_opL_subnormal_done>

8000c9da <__avr32_f64_sub_opH_nan_or_inf>:
8000c9da:	bf db       	cbr	r11,0x1f
8000c9dc:	f7 ea 10 0e 	or	lr,r11,r10
8000c9e0:	c0 81       	brne	8000c9f0 <__avr32_f64_sub_return_nan>
8000c9e2:	e0 46 07 ff 	cp.w	r6,2047
8000c9e6:	c0 50       	breq	8000c9f0 <__avr32_f64_sub_return_nan>
8000c9e8:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
8000c9ec:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c9f0 <__avr32_f64_sub_return_nan>:
8000c9f0:	3f fa       	mov	r10,-1
8000c9f2:	3f fb       	mov	r11,-1
8000c9f4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000c9f8 <__avr32_f64_sub_subnormal_result>:
8000c9f8:	5c 37       	neg	r7
8000c9fa:	2f f7       	sub	r7,-1
8000c9fc:	f1 b7 04 c0 	satu	r7,0x6
8000ca00:	e0 47 00 20 	cp.w	r7,32
8000ca04:	c1 14       	brge	8000ca26 <__avr32_f64_sub_subnormal_result+0x2e>
8000ca06:	ee 08 11 20 	rsub	r8,r7,32
8000ca0a:	f4 08 09 49 	lsl	r9,r10,r8
8000ca0e:	5f 16       	srne	r6
8000ca10:	f4 07 0a 4a 	lsr	r10,r10,r7
8000ca14:	0c 4a       	or	r10,r6
8000ca16:	f6 08 09 49 	lsl	r9,r11,r8
8000ca1a:	f5 e9 10 0a 	or	r10,r10,r9
8000ca1e:	f4 07 0a 4b 	lsr	r11,r10,r7
8000ca22:	30 07       	mov	r7,0
8000ca24:	cb 3b       	rjmp	8000c98a <__avr32_f64_sub_longnormalize_done>
8000ca26:	ee 08 11 40 	rsub	r8,r7,64
8000ca2a:	f6 08 09 49 	lsl	r9,r11,r8
8000ca2e:	14 49       	or	r9,r10
8000ca30:	5f 16       	srne	r6
8000ca32:	f6 07 0a 4a 	lsr	r10,r11,r7
8000ca36:	0c 4a       	or	r10,r6
8000ca38:	30 0b       	mov	r11,0
8000ca3a:	30 07       	mov	r7,0
8000ca3c:	ca 7b       	rjmp	8000c98a <__avr32_f64_sub_longnormalize_done>
8000ca3e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000ca42 <__avr32_f64_sub_longshift>:
8000ca42:	f1 b6 04 c0 	satu	r6,0x6
8000ca46:	f0 0e 17 00 	moveq	lr,r8
8000ca4a:	c0 40       	breq	8000ca52 <__avr32_f64_sub_longshift+0x10>
8000ca4c:	f2 05 09 4e 	lsl	lr,r9,r5
8000ca50:	10 4e       	or	lr,r8
8000ca52:	f2 06 0a 48 	lsr	r8,r9,r6
8000ca56:	30 09       	mov	r9,0
8000ca58:	58 0e       	cp.w	lr,0
8000ca5a:	5f 1e       	srne	lr
8000ca5c:	1c 48       	or	r8,lr
8000ca5e:	c8 3b       	rjmp	8000c964 <__avr32_f64_sub_shift_done>

8000ca60 <__avr32_f64_sub_longnormalize>:
8000ca60:	f4 06 12 00 	clz	r6,r10
8000ca64:	f9 b7 03 00 	movlo	r7,0
8000ca68:	f9 b6 03 00 	movlo	r6,0
8000ca6c:	f9 bc 03 00 	movlo	r12,0
8000ca70:	f7 b6 02 e0 	subhs	r6,-32
8000ca74:	f4 06 09 4b 	lsl	r11,r10,r6
8000ca78:	30 0a       	mov	r10,0
8000ca7a:	0c 17       	sub	r7,r6
8000ca7c:	fe 9a ff be 	brle	8000c9f8 <__avr32_f64_sub_subnormal_result>
8000ca80:	c8 5b       	rjmp	8000c98a <__avr32_f64_sub_longnormalize_done>
8000ca82:	d7 03       	nop

8000ca84 <__avr32_f64_add_from_sub>:
8000ca84:	ee 19 80 00 	eorh	r9,0x8000

8000ca88 <__avr32_f64_add>:
8000ca88:	f7 e9 20 0c 	eor	r12,r11,r9
8000ca8c:	fe 96 ff 2e 	brmi	8000c8e8 <__avr32_f64_sub_from_add>
8000ca90:	eb cd 40 e0 	pushm	r5-r7,lr
8000ca94:	16 9c       	mov	r12,r11
8000ca96:	e6 1c 80 00 	andh	r12,0x8000,COH
8000ca9a:	bf db       	cbr	r11,0x1f
8000ca9c:	bf d9       	cbr	r9,0x1f
8000ca9e:	12 3b       	cp.w	r11,r9
8000caa0:	c0 72       	brcc	8000caae <__avr32_f64_add+0x26>
8000caa2:	16 97       	mov	r7,r11
8000caa4:	12 9b       	mov	r11,r9
8000caa6:	0e 99       	mov	r9,r7
8000caa8:	14 97       	mov	r7,r10
8000caaa:	10 9a       	mov	r10,r8
8000caac:	0e 98       	mov	r8,r7
8000caae:	30 0e       	mov	lr,0
8000cab0:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000cab4:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
8000cab8:	b5 ab       	sbr	r11,0x14
8000caba:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000cabe:	c6 20       	breq	8000cb82 <__avr32_f64_add_op2_subnormal>
8000cac0:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8000cac4:	b5 a9       	sbr	r9,0x14
8000cac6:	e0 47 07 ff 	cp.w	r7,2047
8000caca:	c2 80       	breq	8000cb1a <__avr32_f64_add_opH_nan_or_inf>
8000cacc:	0e 26       	rsub	r6,r7
8000cace:	c1 20       	breq	8000caf2 <__avr32_f64_add_shift_done>
8000cad0:	e0 46 00 36 	cp.w	r6,54
8000cad4:	c1 52       	brcc	8000cafe <__avr32_f64_add_res_of_done>
8000cad6:	ec 05 11 20 	rsub	r5,r6,32
8000cada:	e0 46 00 20 	cp.w	r6,32
8000cade:	c3 52       	brcc	8000cb48 <__avr32_f64_add_longshift>
8000cae0:	f0 05 09 4e 	lsl	lr,r8,r5
8000cae4:	f2 05 09 45 	lsl	r5,r9,r5
8000cae8:	f0 06 0a 48 	lsr	r8,r8,r6
8000caec:	f2 06 0a 49 	lsr	r9,r9,r6
8000caf0:	0a 48       	or	r8,r5

8000caf2 <__avr32_f64_add_shift_done>:
8000caf2:	10 0a       	add	r10,r8
8000caf4:	f6 09 00 4b 	adc	r11,r11,r9
8000caf8:	ed bb 00 15 	bld	r11,0x15
8000cafc:	c3 40       	breq	8000cb64 <__avr32_f64_add_res_of>

8000cafe <__avr32_f64_add_res_of_done>:
8000cafe:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000cb02:	18 4b       	or	r11,r12

8000cb04 <__avr32_f64_add_round>:
8000cb04:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8000cb08:	18 4e       	or	lr,r12
8000cb0a:	ee 1e 80 00 	eorh	lr,0x8000
8000cb0e:	f1 be 04 20 	satu	lr,0x1
8000cb12:	1c 0a       	add	r10,lr
8000cb14:	5c 0b       	acr	r11
8000cb16:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000cb1a <__avr32_f64_add_opH_nan_or_inf>:
8000cb1a:	b5 cb       	cbr	r11,0x14
8000cb1c:	f7 ea 10 0e 	or	lr,r11,r10
8000cb20:	c1 01       	brne	8000cb40 <__avr32_f64_add_return_nan>
8000cb22:	e0 46 07 ff 	cp.w	r6,2047
8000cb26:	c0 30       	breq	8000cb2c <__avr32_f64_add_opL_nan_or_inf>
8000cb28:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000cb2c <__avr32_f64_add_opL_nan_or_inf>:
8000cb2c:	b5 c9       	cbr	r9,0x14
8000cb2e:	f3 e8 10 0e 	or	lr,r9,r8
8000cb32:	c0 71       	brne	8000cb40 <__avr32_f64_add_return_nan>
8000cb34:	30 0a       	mov	r10,0
8000cb36:	fc 1b 7f f0 	movh	r11,0x7ff0
8000cb3a:	18 4b       	or	r11,r12
8000cb3c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000cb40 <__avr32_f64_add_return_nan>:
8000cb40:	3f fa       	mov	r10,-1
8000cb42:	3f fb       	mov	r11,-1
8000cb44:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000cb48 <__avr32_f64_add_longshift>:
8000cb48:	f1 b6 04 c0 	satu	r6,0x6
8000cb4c:	f0 0e 17 00 	moveq	lr,r8
8000cb50:	c0 60       	breq	8000cb5c <__avr32_f64_add_longshift+0x14>
8000cb52:	f2 05 09 4e 	lsl	lr,r9,r5
8000cb56:	58 08       	cp.w	r8,0
8000cb58:	5f 18       	srne	r8
8000cb5a:	10 4e       	or	lr,r8
8000cb5c:	f2 06 0a 48 	lsr	r8,r9,r6
8000cb60:	30 09       	mov	r9,0
8000cb62:	cc 8b       	rjmp	8000caf2 <__avr32_f64_add_shift_done>

8000cb64 <__avr32_f64_add_res_of>:
8000cb64:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8000cb68:	a1 9b       	lsr	r11,0x1
8000cb6a:	5d 0a       	ror	r10
8000cb6c:	5d 0e       	ror	lr
8000cb6e:	2f f7       	sub	r7,-1
8000cb70:	e0 47 07 ff 	cp.w	r7,2047
8000cb74:	f9 ba 00 00 	moveq	r10,0
8000cb78:	f9 bb 00 00 	moveq	r11,0
8000cb7c:	f9 be 00 00 	moveq	lr,0
8000cb80:	cb fb       	rjmp	8000cafe <__avr32_f64_add_res_of_done>

8000cb82 <__avr32_f64_add_op2_subnormal>:
8000cb82:	30 16       	mov	r6,1
8000cb84:	58 07       	cp.w	r7,0
8000cb86:	ca 01       	brne	8000cac6 <__avr32_f64_add+0x3e>
8000cb88:	b5 cb       	cbr	r11,0x14
8000cb8a:	10 0a       	add	r10,r8
8000cb8c:	f6 09 00 4b 	adc	r11,r11,r9
8000cb90:	18 4b       	or	r11,r12
8000cb92:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000cb96:	d7 03       	nop

8000cb98 <__avr32_f64_to_u32>:
8000cb98:	58 0b       	cp.w	r11,0
8000cb9a:	5e 6d       	retmi	0

8000cb9c <__avr32_f64_to_s32>:
8000cb9c:	f6 0c 15 01 	lsl	r12,r11,0x1
8000cba0:	b5 9c       	lsr	r12,0x15
8000cba2:	e0 2c 03 ff 	sub	r12,1023
8000cba6:	5e 3d       	retlo	0
8000cba8:	f8 0c 11 1f 	rsub	r12,r12,31
8000cbac:	16 99       	mov	r9,r11
8000cbae:	ab 7b       	lsl	r11,0xb
8000cbb0:	bf bb       	sbr	r11,0x1f
8000cbb2:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8000cbb6:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000cbba:	a1 79       	lsl	r9,0x1
8000cbbc:	5e 2b       	reths	r11
8000cbbe:	5c 3b       	neg	r11
8000cbc0:	5e fb       	retal	r11

8000cbc2 <__avr32_u32_to_f64>:
8000cbc2:	f8 cb 00 00 	sub	r11,r12,0
8000cbc6:	30 0c       	mov	r12,0
8000cbc8:	c0 38       	rjmp	8000cbce <__avr32_s32_to_f64+0x4>

8000cbca <__avr32_s32_to_f64>:
8000cbca:	18 9b       	mov	r11,r12
8000cbcc:	5c 4b       	abs	r11
8000cbce:	30 0a       	mov	r10,0
8000cbd0:	5e 0b       	reteq	r11
8000cbd2:	d4 01       	pushm	lr
8000cbd4:	e0 69 04 1e 	mov	r9,1054
8000cbd8:	f6 08 12 00 	clz	r8,r11
8000cbdc:	c1 70       	breq	8000cc0a <__avr32_s32_to_f64+0x40>
8000cbde:	c0 c3       	brcs	8000cbf6 <__avr32_s32_to_f64+0x2c>
8000cbe0:	f0 0e 11 20 	rsub	lr,r8,32
8000cbe4:	f6 08 09 4b 	lsl	r11,r11,r8
8000cbe8:	f4 0e 0a 4e 	lsr	lr,r10,lr
8000cbec:	1c 4b       	or	r11,lr
8000cbee:	f4 08 09 4a 	lsl	r10,r10,r8
8000cbf2:	10 19       	sub	r9,r8
8000cbf4:	c0 b8       	rjmp	8000cc0a <__avr32_s32_to_f64+0x40>
8000cbf6:	f4 08 12 00 	clz	r8,r10
8000cbfa:	f9 b8 03 00 	movlo	r8,0
8000cbfe:	f7 b8 02 e0 	subhs	r8,-32
8000cc02:	f4 08 09 4b 	lsl	r11,r10,r8
8000cc06:	30 0a       	mov	r10,0
8000cc08:	10 19       	sub	r9,r8
8000cc0a:	58 09       	cp.w	r9,0
8000cc0c:	e0 89 00 30 	brgt	8000cc6c <__avr32_s32_to_f64+0xa2>
8000cc10:	5c 39       	neg	r9
8000cc12:	2f f9       	sub	r9,-1
8000cc14:	e0 49 00 36 	cp.w	r9,54
8000cc18:	c0 43       	brcs	8000cc20 <__avr32_s32_to_f64+0x56>
8000cc1a:	30 0b       	mov	r11,0
8000cc1c:	30 0a       	mov	r10,0
8000cc1e:	c2 68       	rjmp	8000cc6a <__avr32_s32_to_f64+0xa0>
8000cc20:	2f 69       	sub	r9,-10
8000cc22:	f2 08 11 20 	rsub	r8,r9,32
8000cc26:	e0 49 00 20 	cp.w	r9,32
8000cc2a:	c0 b2       	brcc	8000cc40 <__avr32_s32_to_f64+0x76>
8000cc2c:	f4 08 09 4e 	lsl	lr,r10,r8
8000cc30:	f6 08 09 48 	lsl	r8,r11,r8
8000cc34:	f4 09 0a 4a 	lsr	r10,r10,r9
8000cc38:	f6 09 0a 4b 	lsr	r11,r11,r9
8000cc3c:	10 4b       	or	r11,r8
8000cc3e:	c0 88       	rjmp	8000cc4e <__avr32_s32_to_f64+0x84>
8000cc40:	f6 08 09 4e 	lsl	lr,r11,r8
8000cc44:	14 4e       	or	lr,r10
8000cc46:	16 9a       	mov	r10,r11
8000cc48:	30 0b       	mov	r11,0
8000cc4a:	f4 09 0a 4a 	lsr	r10,r10,r9
8000cc4e:	ed ba 00 00 	bld	r10,0x0
8000cc52:	c0 92       	brcc	8000cc64 <__avr32_s32_to_f64+0x9a>
8000cc54:	1c 7e       	tst	lr,lr
8000cc56:	c0 41       	brne	8000cc5e <__avr32_s32_to_f64+0x94>
8000cc58:	ed ba 00 01 	bld	r10,0x1
8000cc5c:	c0 42       	brcc	8000cc64 <__avr32_s32_to_f64+0x9a>
8000cc5e:	2f fa       	sub	r10,-1
8000cc60:	f7 bb 02 ff 	subhs	r11,-1
8000cc64:	5c fc       	rol	r12
8000cc66:	5d 0b       	ror	r11
8000cc68:	5d 0a       	ror	r10
8000cc6a:	d8 02       	popm	pc
8000cc6c:	e0 68 03 ff 	mov	r8,1023
8000cc70:	ed ba 00 0b 	bld	r10,0xb
8000cc74:	f7 b8 00 ff 	subeq	r8,-1
8000cc78:	10 0a       	add	r10,r8
8000cc7a:	5c 0b       	acr	r11
8000cc7c:	f7 b9 03 fe 	sublo	r9,-2
8000cc80:	e0 49 07 ff 	cp.w	r9,2047
8000cc84:	c0 55       	brlt	8000cc8e <__avr32_s32_to_f64+0xc4>
8000cc86:	30 0a       	mov	r10,0
8000cc88:	fc 1b ff e0 	movh	r11,0xffe0
8000cc8c:	c0 c8       	rjmp	8000cca4 <__floatsidf_return_op1>
8000cc8e:	ed bb 00 1f 	bld	r11,0x1f
8000cc92:	f7 b9 01 01 	subne	r9,1
8000cc96:	ab 9a       	lsr	r10,0xb
8000cc98:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8000cc9c:	a1 7b       	lsl	r11,0x1
8000cc9e:	ab 9b       	lsr	r11,0xb
8000cca0:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

8000cca4 <__floatsidf_return_op1>:
8000cca4:	a1 7c       	lsl	r12,0x1
8000cca6:	5d 0b       	ror	r11
8000cca8:	d8 02       	popm	pc

8000ccaa <__avr32_f64_cmp_eq>:
8000ccaa:	10 3a       	cp.w	r10,r8
8000ccac:	f2 0b 13 00 	cpc	r11,r9
8000ccb0:	c0 80       	breq	8000ccc0 <__avr32_f64_cmp_eq+0x16>
8000ccb2:	a1 7b       	lsl	r11,0x1
8000ccb4:	a1 79       	lsl	r9,0x1
8000ccb6:	14 4b       	or	r11,r10
8000ccb8:	12 4b       	or	r11,r9
8000ccba:	10 4b       	or	r11,r8
8000ccbc:	5e 0f       	reteq	1
8000ccbe:	5e fd       	retal	0
8000ccc0:	a1 7b       	lsl	r11,0x1
8000ccc2:	fc 1c ff e0 	movh	r12,0xffe0
8000ccc6:	58 0a       	cp.w	r10,0
8000ccc8:	f8 0b 13 00 	cpc	r11,r12
8000cccc:	5e 8f       	retls	1
8000ccce:	5e fd       	retal	0

8000ccd0 <__avr32_f64_cmp_ge>:
8000ccd0:	1a de       	st.w	--sp,lr
8000ccd2:	1a d7       	st.w	--sp,r7
8000ccd4:	a1 7b       	lsl	r11,0x1
8000ccd6:	5f 3c       	srlo	r12
8000ccd8:	a1 79       	lsl	r9,0x1
8000ccda:	5f 37       	srlo	r7
8000ccdc:	5c fc       	rol	r12
8000ccde:	fc 1e ff e0 	movh	lr,0xffe0
8000cce2:	58 0a       	cp.w	r10,0
8000cce4:	fc 0b 13 00 	cpc	r11,lr
8000cce8:	e0 8b 00 1d 	brhi	8000cd22 <__avr32_f64_cmp_ge+0x52>
8000ccec:	58 08       	cp.w	r8,0
8000ccee:	fc 09 13 00 	cpc	r9,lr
8000ccf2:	e0 8b 00 18 	brhi	8000cd22 <__avr32_f64_cmp_ge+0x52>
8000ccf6:	58 0b       	cp.w	r11,0
8000ccf8:	f5 ba 00 00 	subfeq	r10,0
8000ccfc:	c1 50       	breq	8000cd26 <__avr32_f64_cmp_ge+0x56>
8000ccfe:	1b 07       	ld.w	r7,sp++
8000cd00:	1b 0e       	ld.w	lr,sp++
8000cd02:	58 3c       	cp.w	r12,3
8000cd04:	c0 a0       	breq	8000cd18 <__avr32_f64_cmp_ge+0x48>
8000cd06:	58 1c       	cp.w	r12,1
8000cd08:	c0 33       	brcs	8000cd0e <__avr32_f64_cmp_ge+0x3e>
8000cd0a:	5e 0f       	reteq	1
8000cd0c:	5e 1d       	retne	0
8000cd0e:	10 3a       	cp.w	r10,r8
8000cd10:	f2 0b 13 00 	cpc	r11,r9
8000cd14:	5e 2f       	reths	1
8000cd16:	5e 3d       	retlo	0
8000cd18:	14 38       	cp.w	r8,r10
8000cd1a:	f6 09 13 00 	cpc	r9,r11
8000cd1e:	5e 2f       	reths	1
8000cd20:	5e 3d       	retlo	0
8000cd22:	1b 07       	ld.w	r7,sp++
8000cd24:	d8 0a       	popm	pc,r12=0
8000cd26:	58 17       	cp.w	r7,1
8000cd28:	5f 0c       	sreq	r12
8000cd2a:	58 09       	cp.w	r9,0
8000cd2c:	f5 b8 00 00 	subfeq	r8,0
8000cd30:	1b 07       	ld.w	r7,sp++
8000cd32:	1b 0e       	ld.w	lr,sp++
8000cd34:	5e 0f       	reteq	1
8000cd36:	5e fc       	retal	r12

8000cd38 <__avr32_f64_cmp_lt>:
8000cd38:	1a de       	st.w	--sp,lr
8000cd3a:	1a d7       	st.w	--sp,r7
8000cd3c:	a1 7b       	lsl	r11,0x1
8000cd3e:	5f 3c       	srlo	r12
8000cd40:	a1 79       	lsl	r9,0x1
8000cd42:	5f 37       	srlo	r7
8000cd44:	5c fc       	rol	r12
8000cd46:	fc 1e ff e0 	movh	lr,0xffe0
8000cd4a:	58 0a       	cp.w	r10,0
8000cd4c:	fc 0b 13 00 	cpc	r11,lr
8000cd50:	e0 8b 00 1d 	brhi	8000cd8a <__avr32_f64_cmp_lt+0x52>
8000cd54:	58 08       	cp.w	r8,0
8000cd56:	fc 09 13 00 	cpc	r9,lr
8000cd5a:	e0 8b 00 18 	brhi	8000cd8a <__avr32_f64_cmp_lt+0x52>
8000cd5e:	58 0b       	cp.w	r11,0
8000cd60:	f5 ba 00 00 	subfeq	r10,0
8000cd64:	c1 50       	breq	8000cd8e <__avr32_f64_cmp_lt+0x56>
8000cd66:	1b 07       	ld.w	r7,sp++
8000cd68:	1b 0e       	ld.w	lr,sp++
8000cd6a:	58 3c       	cp.w	r12,3
8000cd6c:	c0 a0       	breq	8000cd80 <__avr32_f64_cmp_lt+0x48>
8000cd6e:	58 1c       	cp.w	r12,1
8000cd70:	c0 33       	brcs	8000cd76 <__avr32_f64_cmp_lt+0x3e>
8000cd72:	5e 0d       	reteq	0
8000cd74:	5e 1f       	retne	1
8000cd76:	10 3a       	cp.w	r10,r8
8000cd78:	f2 0b 13 00 	cpc	r11,r9
8000cd7c:	5e 2d       	reths	0
8000cd7e:	5e 3f       	retlo	1
8000cd80:	14 38       	cp.w	r8,r10
8000cd82:	f6 09 13 00 	cpc	r9,r11
8000cd86:	5e 2d       	reths	0
8000cd88:	5e 3f       	retlo	1
8000cd8a:	1b 07       	ld.w	r7,sp++
8000cd8c:	d8 0a       	popm	pc,r12=0
8000cd8e:	58 17       	cp.w	r7,1
8000cd90:	5f 1c       	srne	r12
8000cd92:	58 09       	cp.w	r9,0
8000cd94:	f5 b8 00 00 	subfeq	r8,0
8000cd98:	1b 07       	ld.w	r7,sp++
8000cd9a:	1b 0e       	ld.w	lr,sp++
8000cd9c:	5e 0d       	reteq	0
8000cd9e:	5e fc       	retal	r12

8000cda0 <__avr32_f64_div>:
8000cda0:	eb cd 40 ff 	pushm	r0-r7,lr
8000cda4:	f7 e9 20 0e 	eor	lr,r11,r9
8000cda8:	f6 07 16 14 	lsr	r7,r11,0x14
8000cdac:	a9 7b       	lsl	r11,0x9
8000cdae:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
8000cdb2:	a9 7a       	lsl	r10,0x9
8000cdb4:	bd bb       	sbr	r11,0x1d
8000cdb6:	e4 1b 3f ff 	andh	r11,0x3fff
8000cdba:	ab d7       	cbr	r7,0xb
8000cdbc:	e0 80 00 cc 	breq	8000cf54 <__avr32_f64_div_round_subnormal+0x54>
8000cdc0:	e0 47 07 ff 	cp.w	r7,2047
8000cdc4:	e0 84 00 b5 	brge	8000cf2e <__avr32_f64_div_round_subnormal+0x2e>
8000cdc8:	f2 06 16 14 	lsr	r6,r9,0x14
8000cdcc:	a9 79       	lsl	r9,0x9
8000cdce:	f3 e8 13 79 	or	r9,r9,r8>>0x17
8000cdd2:	a9 78       	lsl	r8,0x9
8000cdd4:	bd b9       	sbr	r9,0x1d
8000cdd6:	e4 19 3f ff 	andh	r9,0x3fff
8000cdda:	ab d6       	cbr	r6,0xb
8000cddc:	e0 80 00 e2 	breq	8000cfa0 <__avr32_f64_div_round_subnormal+0xa0>
8000cde0:	e0 46 07 ff 	cp.w	r6,2047
8000cde4:	e0 84 00 b2 	brge	8000cf48 <__avr32_f64_div_round_subnormal+0x48>
8000cde8:	0c 17       	sub	r7,r6
8000cdea:	fe 37 fc 01 	sub	r7,-1023
8000cdee:	fc 1c 80 00 	movh	r12,0x8000
8000cdf2:	f8 03 16 01 	lsr	r3,r12,0x1
8000cdf6:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
8000cdfa:	5c d4       	com	r4
8000cdfc:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000ce00:	e6 09 06 44 	mulu.d	r4,r3,r9
8000ce04:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000ce08:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ce0c:	ea 03 15 02 	lsl	r3,r5,0x2
8000ce10:	e6 09 06 44 	mulu.d	r4,r3,r9
8000ce14:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000ce18:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ce1c:	ea 03 15 02 	lsl	r3,r5,0x2
8000ce20:	e6 09 06 44 	mulu.d	r4,r3,r9
8000ce24:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8000ce28:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ce2c:	ea 03 15 02 	lsl	r3,r5,0x2
8000ce30:	e6 08 06 40 	mulu.d	r0,r3,r8
8000ce34:	e4 09 07 40 	macu.d	r0,r2,r9
8000ce38:	e6 09 06 44 	mulu.d	r4,r3,r9
8000ce3c:	02 04       	add	r4,r1
8000ce3e:	5c 05       	acr	r5
8000ce40:	a3 65       	lsl	r5,0x2
8000ce42:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000ce46:	a3 64       	lsl	r4,0x2
8000ce48:	5c 34       	neg	r4
8000ce4a:	f8 05 01 45 	sbc	r5,r12,r5
8000ce4e:	e6 04 06 40 	mulu.d	r0,r3,r4
8000ce52:	e4 05 07 40 	macu.d	r0,r2,r5
8000ce56:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ce5a:	02 04       	add	r4,r1
8000ce5c:	5c 05       	acr	r5
8000ce5e:	ea 03 15 02 	lsl	r3,r5,0x2
8000ce62:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000ce66:	e8 02 15 02 	lsl	r2,r4,0x2
8000ce6a:	e6 08 06 40 	mulu.d	r0,r3,r8
8000ce6e:	e4 09 07 40 	macu.d	r0,r2,r9
8000ce72:	e6 09 06 44 	mulu.d	r4,r3,r9
8000ce76:	02 04       	add	r4,r1
8000ce78:	5c 05       	acr	r5
8000ce7a:	a3 65       	lsl	r5,0x2
8000ce7c:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8000ce80:	a3 64       	lsl	r4,0x2
8000ce82:	5c 34       	neg	r4
8000ce84:	f8 05 01 45 	sbc	r5,r12,r5
8000ce88:	e6 04 06 40 	mulu.d	r0,r3,r4
8000ce8c:	e4 05 07 40 	macu.d	r0,r2,r5
8000ce90:	e6 05 06 44 	mulu.d	r4,r3,r5
8000ce94:	02 04       	add	r4,r1
8000ce96:	5c 05       	acr	r5
8000ce98:	ea 03 15 02 	lsl	r3,r5,0x2
8000ce9c:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8000cea0:	e8 02 15 02 	lsl	r2,r4,0x2
8000cea4:	e6 0a 06 40 	mulu.d	r0,r3,r10
8000cea8:	e4 0b 07 40 	macu.d	r0,r2,r11
8000ceac:	e6 0b 06 42 	mulu.d	r2,r3,r11
8000ceb0:	02 02       	add	r2,r1
8000ceb2:	5c 03       	acr	r3
8000ceb4:	ed b3 00 1c 	bld	r3,0x1c
8000ceb8:	c0 90       	breq	8000ceca <__avr32_f64_div+0x12a>
8000ceba:	a1 72       	lsl	r2,0x1
8000cebc:	5c f3       	rol	r3
8000cebe:	20 17       	sub	r7,1
8000cec0:	a3 9a       	lsr	r10,0x3
8000cec2:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
8000cec6:	a3 9b       	lsr	r11,0x3
8000cec8:	c0 58       	rjmp	8000ced2 <__avr32_f64_div+0x132>
8000ceca:	a5 8a       	lsr	r10,0x4
8000cecc:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000ced0:	a5 8b       	lsr	r11,0x4
8000ced2:	58 07       	cp.w	r7,0
8000ced4:	e0 8a 00 8b 	brle	8000cfea <__avr32_f64_div_res_subnormal>
8000ced8:	e0 12 ff 00 	andl	r2,0xff00
8000cedc:	e8 12 00 80 	orl	r2,0x80
8000cee0:	e6 08 06 40 	mulu.d	r0,r3,r8
8000cee4:	e4 09 07 40 	macu.d	r0,r2,r9
8000cee8:	e4 08 06 44 	mulu.d	r4,r2,r8
8000ceec:	e6 09 06 48 	mulu.d	r8,r3,r9
8000cef0:	00 05       	add	r5,r0
8000cef2:	f0 01 00 48 	adc	r8,r8,r1
8000cef6:	5c 09       	acr	r9
8000cef8:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000cefc:	58 04       	cp.w	r4,0
8000cefe:	5c 25       	cpc	r5

8000cf00 <__avr32_f64_div_round_subnormal>:
8000cf00:	f4 08 13 00 	cpc	r8,r10
8000cf04:	f6 09 13 00 	cpc	r9,r11
8000cf08:	5f 36       	srlo	r6
8000cf0a:	f8 06 17 00 	moveq	r6,r12
8000cf0e:	e4 0a 16 08 	lsr	r10,r2,0x8
8000cf12:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8000cf16:	e6 0b 16 08 	lsr	r11,r3,0x8
8000cf1a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000cf1e:	ed be 00 1f 	bld	lr,0x1f
8000cf22:	ef bb 00 1f 	bst	r11,0x1f
8000cf26:	0c 0a       	add	r10,r6
8000cf28:	5c 0b       	acr	r11
8000cf2a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000cf2e:	e4 1b 00 0f 	andh	r11,0xf
8000cf32:	14 4b       	or	r11,r10
8000cf34:	e0 81 00 a7 	brne	8000d082 <__avr32_f64_div_res_subnormal+0x98>
8000cf38:	f2 06 16 14 	lsr	r6,r9,0x14
8000cf3c:	ab d6       	cbr	r6,0xb
8000cf3e:	e0 46 07 ff 	cp.w	r6,2047
8000cf42:	e0 81 00 a4 	brne	8000d08a <__avr32_f64_div_res_subnormal+0xa0>
8000cf46:	c9 e8       	rjmp	8000d082 <__avr32_f64_div_res_subnormal+0x98>
8000cf48:	e4 19 00 0f 	andh	r9,0xf
8000cf4c:	10 49       	or	r9,r8
8000cf4e:	e0 81 00 9a 	brne	8000d082 <__avr32_f64_div_res_subnormal+0x98>
8000cf52:	c9 28       	rjmp	8000d076 <__avr32_f64_div_res_subnormal+0x8c>
8000cf54:	a3 7b       	lsl	r11,0x3
8000cf56:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8000cf5a:	a3 7a       	lsl	r10,0x3
8000cf5c:	f5 eb 10 04 	or	r4,r10,r11
8000cf60:	e0 80 00 a0 	breq	8000d0a0 <__avr32_f64_div_op1_zero>
8000cf64:	f6 04 12 00 	clz	r4,r11
8000cf68:	c1 70       	breq	8000cf96 <__avr32_f64_div_round_subnormal+0x96>
8000cf6a:	c0 c3       	brcs	8000cf82 <__avr32_f64_div_round_subnormal+0x82>
8000cf6c:	e8 05 11 20 	rsub	r5,r4,32
8000cf70:	f6 04 09 4b 	lsl	r11,r11,r4
8000cf74:	f4 05 0a 45 	lsr	r5,r10,r5
8000cf78:	0a 4b       	or	r11,r5
8000cf7a:	f4 04 09 4a 	lsl	r10,r10,r4
8000cf7e:	08 17       	sub	r7,r4
8000cf80:	c0 b8       	rjmp	8000cf96 <__avr32_f64_div_round_subnormal+0x96>
8000cf82:	f4 04 12 00 	clz	r4,r10
8000cf86:	f9 b4 03 00 	movlo	r4,0
8000cf8a:	f7 b4 02 e0 	subhs	r4,-32
8000cf8e:	f4 04 09 4b 	lsl	r11,r10,r4
8000cf92:	30 0a       	mov	r10,0
8000cf94:	08 17       	sub	r7,r4
8000cf96:	a3 8a       	lsr	r10,0x2
8000cf98:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
8000cf9c:	a3 8b       	lsr	r11,0x2
8000cf9e:	c1 1b       	rjmp	8000cdc0 <__avr32_f64_div+0x20>
8000cfa0:	a3 79       	lsl	r9,0x3
8000cfa2:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
8000cfa6:	a3 78       	lsl	r8,0x3
8000cfa8:	f3 e8 10 04 	or	r4,r9,r8
8000cfac:	c6 f0       	breq	8000d08a <__avr32_f64_div_res_subnormal+0xa0>
8000cfae:	f2 04 12 00 	clz	r4,r9
8000cfb2:	c1 70       	breq	8000cfe0 <__avr32_f64_div_round_subnormal+0xe0>
8000cfb4:	c0 c3       	brcs	8000cfcc <__avr32_f64_div_round_subnormal+0xcc>
8000cfb6:	e8 05 11 20 	rsub	r5,r4,32
8000cfba:	f2 04 09 49 	lsl	r9,r9,r4
8000cfbe:	f0 05 0a 45 	lsr	r5,r8,r5
8000cfc2:	0a 49       	or	r9,r5
8000cfc4:	f0 04 09 48 	lsl	r8,r8,r4
8000cfc8:	08 16       	sub	r6,r4
8000cfca:	c0 b8       	rjmp	8000cfe0 <__avr32_f64_div_round_subnormal+0xe0>
8000cfcc:	f0 04 12 00 	clz	r4,r8
8000cfd0:	f9 b4 03 00 	movlo	r4,0
8000cfd4:	f7 b4 02 e0 	subhs	r4,-32
8000cfd8:	f0 04 09 49 	lsl	r9,r8,r4
8000cfdc:	30 08       	mov	r8,0
8000cfde:	08 16       	sub	r6,r4
8000cfe0:	a3 88       	lsr	r8,0x2
8000cfe2:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
8000cfe6:	a3 89       	lsr	r9,0x2
8000cfe8:	cf ca       	rjmp	8000cde0 <__avr32_f64_div+0x40>

8000cfea <__avr32_f64_div_res_subnormal>:
8000cfea:	5c 37       	neg	r7
8000cfec:	2f f7       	sub	r7,-1
8000cfee:	f1 b7 04 c0 	satu	r7,0x6
8000cff2:	e0 47 00 20 	cp.w	r7,32
8000cff6:	c1 54       	brge	8000d020 <__avr32_f64_div_res_subnormal+0x36>
8000cff8:	ee 06 11 20 	rsub	r6,r7,32
8000cffc:	e4 07 0a 42 	lsr	r2,r2,r7
8000d000:	e6 06 09 4c 	lsl	r12,r3,r6
8000d004:	18 42       	or	r2,r12
8000d006:	e6 07 0a 43 	lsr	r3,r3,r7
8000d00a:	f4 06 09 41 	lsl	r1,r10,r6
8000d00e:	f4 07 0a 4a 	lsr	r10,r10,r7
8000d012:	f6 06 09 4c 	lsl	r12,r11,r6
8000d016:	18 4a       	or	r10,r12
8000d018:	f6 07 0a 4b 	lsr	r11,r11,r7
8000d01c:	30 00       	mov	r0,0
8000d01e:	c1 58       	rjmp	8000d048 <__avr32_f64_div_res_subnormal+0x5e>
8000d020:	ee 06 11 20 	rsub	r6,r7,32
8000d024:	f9 b0 00 00 	moveq	r0,0
8000d028:	f9 bc 00 00 	moveq	r12,0
8000d02c:	c0 50       	breq	8000d036 <__avr32_f64_div_res_subnormal+0x4c>
8000d02e:	f4 06 09 40 	lsl	r0,r10,r6
8000d032:	f6 06 09 4c 	lsl	r12,r11,r6
8000d036:	e6 07 0a 42 	lsr	r2,r3,r7
8000d03a:	30 03       	mov	r3,0
8000d03c:	f4 07 0a 41 	lsr	r1,r10,r7
8000d040:	18 41       	or	r1,r12
8000d042:	f6 07 0a 4a 	lsr	r10,r11,r7
8000d046:	30 0b       	mov	r11,0
8000d048:	e0 12 ff 00 	andl	r2,0xff00
8000d04c:	e8 12 00 80 	orl	r2,0x80
8000d050:	e6 08 06 46 	mulu.d	r6,r3,r8
8000d054:	e4 09 07 46 	macu.d	r6,r2,r9
8000d058:	e4 08 06 44 	mulu.d	r4,r2,r8
8000d05c:	e6 09 06 48 	mulu.d	r8,r3,r9
8000d060:	0c 05       	add	r5,r6
8000d062:	f0 07 00 48 	adc	r8,r8,r7
8000d066:	5c 09       	acr	r9
8000d068:	30 07       	mov	r7,0
8000d06a:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000d06e:	00 34       	cp.w	r4,r0
8000d070:	e2 05 13 00 	cpc	r5,r1
8000d074:	c4 6b       	rjmp	8000cf00 <__avr32_f64_div_round_subnormal>
8000d076:	1c 9b       	mov	r11,lr
8000d078:	e6 1b 80 00 	andh	r11,0x8000,COH
8000d07c:	30 0a       	mov	r10,0
8000d07e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000d082:	3f fb       	mov	r11,-1
8000d084:	30 0a       	mov	r10,0
8000d086:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000d08a:	f5 eb 10 04 	or	r4,r10,r11
8000d08e:	c0 90       	breq	8000d0a0 <__avr32_f64_div_op1_zero>
8000d090:	1c 9b       	mov	r11,lr
8000d092:	e6 1b 80 00 	andh	r11,0x8000,COH
8000d096:	ea 1b 7f f0 	orh	r11,0x7ff0
8000d09a:	30 0a       	mov	r10,0
8000d09c:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

8000d0a0 <__avr32_f64_div_op1_zero>:
8000d0a0:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8000d0a4:	ce f0       	breq	8000d082 <__avr32_f64_div_res_subnormal+0x98>
8000d0a6:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
8000d0aa:	e0 44 07 ff 	cp.w	r4,2047
8000d0ae:	ce 41       	brne	8000d076 <__avr32_f64_div_res_subnormal+0x8c>
8000d0b0:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8000d0b4:	ce 10       	breq	8000d076 <__avr32_f64_div_res_subnormal+0x8c>
8000d0b6:	ce 6b       	rjmp	8000d082 <__avr32_f64_div_res_subnormal+0x98>

8000d0b8 <__avr32_f64_to_f32>:
8000d0b8:	f6 09 15 01 	lsl	r9,r11,0x1
8000d0bc:	b5 99       	lsr	r9,0x15
8000d0be:	5e 0d       	reteq	0
8000d0c0:	f6 08 15 0a 	lsl	r8,r11,0xa
8000d0c4:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
8000d0c8:	ab 6a       	lsl	r10,0xa
8000d0ca:	5c 3a       	neg	r10
8000d0cc:	5c fc       	rol	r12
8000d0ce:	e0 49 07 ff 	cp.w	r9,2047
8000d0d2:	c1 a0       	breq	8000d106 <__truncdfsf_return_op1+0x6>
8000d0d4:	e0 29 03 80 	sub	r9,896
8000d0d8:	bf bc       	sbr	r12,0x1f
8000d0da:	58 09       	cp.w	r9,0
8000d0dc:	e0 8a 00 1a 	brle	8000d110 <__truncdfsf_return_op1+0x10>
8000d0e0:	37 fa       	mov	r10,127
8000d0e2:	ed bc 00 08 	bld	r12,0x8
8000d0e6:	f7 ba 00 ff 	subeq	r10,-1
8000d0ea:	14 0c       	add	r12,r10
8000d0ec:	f7 b9 03 fe 	sublo	r9,-2
8000d0f0:	ed bc 00 1f 	bld	r12,0x1f
8000d0f4:	f7 b9 01 01 	subne	r9,1
8000d0f8:	f8 0c 16 07 	lsr	r12,r12,0x7
8000d0fc:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

8000d100 <__truncdfsf_return_op1>:
8000d100:	a1 7b       	lsl	r11,0x1
8000d102:	5d 0c       	ror	r12
8000d104:	5e fc       	retal	r12
8000d106:	bf dc       	cbr	r12,0x1f
8000d108:	5e 1e       	retne	-1
8000d10a:	fc 1c 7f 80 	movh	r12,0x7f80
8000d10e:	5e fc       	retal	r12
8000d110:	f2 09 11 01 	rsub	r9,r9,1
8000d114:	59 99       	cp.w	r9,25
8000d116:	f9 bc 02 00 	movhs	r12,0
8000d11a:	c1 32       	brcc	8000d140 <__truncdfsf_return_op1+0x40>
8000d11c:	f2 0a 11 20 	rsub	r10,r9,32
8000d120:	f8 0a 09 4a 	lsl	r10,r12,r10
8000d124:	5f 1a       	srne	r10
8000d126:	f8 09 0a 4c 	lsr	r12,r12,r9
8000d12a:	14 4c       	or	r12,r10
8000d12c:	37 fa       	mov	r10,127
8000d12e:	ed bc 00 08 	bld	r12,0x8
8000d132:	f7 ba 00 ff 	subeq	r10,-1
8000d136:	14 0c       	add	r12,r10
8000d138:	f8 0c 16 07 	lsr	r12,r12,0x7
8000d13c:	a1 7b       	lsl	r11,0x1
8000d13e:	5d 0c       	ror	r12
8000d140:	5e fc       	retal	r12

8000d142 <__avr32_udiv64>:
8000d142:	d4 31       	pushm	r0-r7,lr
8000d144:	1a 97       	mov	r7,sp
8000d146:	20 3d       	sub	sp,12
8000d148:	10 9c       	mov	r12,r8
8000d14a:	12 9e       	mov	lr,r9
8000d14c:	14 93       	mov	r3,r10
8000d14e:	58 09       	cp.w	r9,0
8000d150:	e0 81 00 bd 	brne	8000d2ca <__avr32_udiv64+0x188>
8000d154:	16 38       	cp.w	r8,r11
8000d156:	e0 88 00 40 	brls	8000d1d6 <__avr32_udiv64+0x94>
8000d15a:	f0 08 12 00 	clz	r8,r8
8000d15e:	c0 d0       	breq	8000d178 <__avr32_udiv64+0x36>
8000d160:	f6 08 09 4b 	lsl	r11,r11,r8
8000d164:	f0 09 11 20 	rsub	r9,r8,32
8000d168:	f8 08 09 4c 	lsl	r12,r12,r8
8000d16c:	f4 09 0a 49 	lsr	r9,r10,r9
8000d170:	f4 08 09 43 	lsl	r3,r10,r8
8000d174:	f3 eb 10 0b 	or	r11,r9,r11
8000d178:	f8 0e 16 10 	lsr	lr,r12,0x10
8000d17c:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000d180:	f6 0e 0d 00 	divu	r0,r11,lr
8000d184:	e6 0b 16 10 	lsr	r11,r3,0x10
8000d188:	00 99       	mov	r9,r0
8000d18a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d18e:	e0 0a 02 48 	mul	r8,r0,r10
8000d192:	10 3b       	cp.w	r11,r8
8000d194:	c0 a2       	brcc	8000d1a8 <__avr32_udiv64+0x66>
8000d196:	20 19       	sub	r9,1
8000d198:	18 0b       	add	r11,r12
8000d19a:	18 3b       	cp.w	r11,r12
8000d19c:	c0 63       	brcs	8000d1a8 <__avr32_udiv64+0x66>
8000d19e:	10 3b       	cp.w	r11,r8
8000d1a0:	f7 b9 03 01 	sublo	r9,1
8000d1a4:	f7 dc e3 0b 	addcs	r11,r11,r12
8000d1a8:	f6 08 01 01 	sub	r1,r11,r8
8000d1ac:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000d1b0:	e2 0e 0d 00 	divu	r0,r1,lr
8000d1b4:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000d1b8:	00 98       	mov	r8,r0
8000d1ba:	e0 0a 02 4a 	mul	r10,r0,r10
8000d1be:	14 33       	cp.w	r3,r10
8000d1c0:	c0 82       	brcc	8000d1d0 <__avr32_udiv64+0x8e>
8000d1c2:	20 18       	sub	r8,1
8000d1c4:	18 03       	add	r3,r12
8000d1c6:	18 33       	cp.w	r3,r12
8000d1c8:	c0 43       	brcs	8000d1d0 <__avr32_udiv64+0x8e>
8000d1ca:	14 33       	cp.w	r3,r10
8000d1cc:	f7 b8 03 01 	sublo	r8,1
8000d1d0:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000d1d4:	cd f8       	rjmp	8000d392 <__avr32_udiv64+0x250>
8000d1d6:	58 08       	cp.w	r8,0
8000d1d8:	c0 51       	brne	8000d1e2 <__avr32_udiv64+0xa0>
8000d1da:	30 19       	mov	r9,1
8000d1dc:	f2 08 0d 08 	divu	r8,r9,r8
8000d1e0:	10 9c       	mov	r12,r8
8000d1e2:	f8 06 12 00 	clz	r6,r12
8000d1e6:	c0 41       	brne	8000d1ee <__avr32_udiv64+0xac>
8000d1e8:	18 1b       	sub	r11,r12
8000d1ea:	30 19       	mov	r9,1
8000d1ec:	c4 08       	rjmp	8000d26c <__avr32_udiv64+0x12a>
8000d1ee:	ec 01 11 20 	rsub	r1,r6,32
8000d1f2:	f4 01 0a 49 	lsr	r9,r10,r1
8000d1f6:	f8 06 09 4c 	lsl	r12,r12,r6
8000d1fa:	f6 06 09 48 	lsl	r8,r11,r6
8000d1fe:	f6 01 0a 41 	lsr	r1,r11,r1
8000d202:	f3 e8 10 08 	or	r8,r9,r8
8000d206:	f8 03 16 10 	lsr	r3,r12,0x10
8000d20a:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000d20e:	e2 03 0d 00 	divu	r0,r1,r3
8000d212:	f0 0b 16 10 	lsr	r11,r8,0x10
8000d216:	00 9e       	mov	lr,r0
8000d218:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d21c:	e0 05 02 49 	mul	r9,r0,r5
8000d220:	12 3b       	cp.w	r11,r9
8000d222:	c0 a2       	brcc	8000d236 <__avr32_udiv64+0xf4>
8000d224:	20 1e       	sub	lr,1
8000d226:	18 0b       	add	r11,r12
8000d228:	18 3b       	cp.w	r11,r12
8000d22a:	c0 63       	brcs	8000d236 <__avr32_udiv64+0xf4>
8000d22c:	12 3b       	cp.w	r11,r9
8000d22e:	f7 be 03 01 	sublo	lr,1
8000d232:	f7 dc e3 0b 	addcs	r11,r11,r12
8000d236:	12 1b       	sub	r11,r9
8000d238:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000d23c:	f6 03 0d 02 	divu	r2,r11,r3
8000d240:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000d244:	04 99       	mov	r9,r2
8000d246:	e4 05 02 4b 	mul	r11,r2,r5
8000d24a:	16 38       	cp.w	r8,r11
8000d24c:	c0 a2       	brcc	8000d260 <__avr32_udiv64+0x11e>
8000d24e:	20 19       	sub	r9,1
8000d250:	18 08       	add	r8,r12
8000d252:	18 38       	cp.w	r8,r12
8000d254:	c0 63       	brcs	8000d260 <__avr32_udiv64+0x11e>
8000d256:	16 38       	cp.w	r8,r11
8000d258:	f7 b9 03 01 	sublo	r9,1
8000d25c:	f1 dc e3 08 	addcs	r8,r8,r12
8000d260:	f4 06 09 43 	lsl	r3,r10,r6
8000d264:	f0 0b 01 0b 	sub	r11,r8,r11
8000d268:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000d26c:	f8 06 16 10 	lsr	r6,r12,0x10
8000d270:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000d274:	f6 06 0d 00 	divu	r0,r11,r6
8000d278:	e6 0b 16 10 	lsr	r11,r3,0x10
8000d27c:	00 9a       	mov	r10,r0
8000d27e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d282:	e0 0e 02 48 	mul	r8,r0,lr
8000d286:	10 3b       	cp.w	r11,r8
8000d288:	c0 a2       	brcc	8000d29c <__avr32_udiv64+0x15a>
8000d28a:	20 1a       	sub	r10,1
8000d28c:	18 0b       	add	r11,r12
8000d28e:	18 3b       	cp.w	r11,r12
8000d290:	c0 63       	brcs	8000d29c <__avr32_udiv64+0x15a>
8000d292:	10 3b       	cp.w	r11,r8
8000d294:	f7 ba 03 01 	sublo	r10,1
8000d298:	f7 dc e3 0b 	addcs	r11,r11,r12
8000d29c:	f6 08 01 01 	sub	r1,r11,r8
8000d2a0:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000d2a4:	e2 06 0d 00 	divu	r0,r1,r6
8000d2a8:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000d2ac:	00 98       	mov	r8,r0
8000d2ae:	e0 0e 02 4b 	mul	r11,r0,lr
8000d2b2:	16 33       	cp.w	r3,r11
8000d2b4:	c0 82       	brcc	8000d2c4 <__avr32_udiv64+0x182>
8000d2b6:	20 18       	sub	r8,1
8000d2b8:	18 03       	add	r3,r12
8000d2ba:	18 33       	cp.w	r3,r12
8000d2bc:	c0 43       	brcs	8000d2c4 <__avr32_udiv64+0x182>
8000d2be:	16 33       	cp.w	r3,r11
8000d2c0:	f7 b8 03 01 	sublo	r8,1
8000d2c4:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000d2c8:	c6 98       	rjmp	8000d39a <__avr32_udiv64+0x258>
8000d2ca:	16 39       	cp.w	r9,r11
8000d2cc:	e0 8b 00 65 	brhi	8000d396 <__avr32_udiv64+0x254>
8000d2d0:	f2 09 12 00 	clz	r9,r9
8000d2d4:	c0 b1       	brne	8000d2ea <__avr32_udiv64+0x1a8>
8000d2d6:	10 3a       	cp.w	r10,r8
8000d2d8:	5f 2a       	srhs	r10
8000d2da:	1c 3b       	cp.w	r11,lr
8000d2dc:	5f b8       	srhi	r8
8000d2de:	10 4a       	or	r10,r8
8000d2e0:	f2 0a 18 00 	cp.b	r10,r9
8000d2e4:	c5 90       	breq	8000d396 <__avr32_udiv64+0x254>
8000d2e6:	30 18       	mov	r8,1
8000d2e8:	c5 98       	rjmp	8000d39a <__avr32_udiv64+0x258>
8000d2ea:	f0 09 09 46 	lsl	r6,r8,r9
8000d2ee:	f2 03 11 20 	rsub	r3,r9,32
8000d2f2:	fc 09 09 4e 	lsl	lr,lr,r9
8000d2f6:	f0 03 0a 48 	lsr	r8,r8,r3
8000d2fa:	f6 09 09 4c 	lsl	r12,r11,r9
8000d2fe:	f4 03 0a 42 	lsr	r2,r10,r3
8000d302:	ef 46 ff f4 	st.w	r7[-12],r6
8000d306:	f6 03 0a 43 	lsr	r3,r11,r3
8000d30a:	18 42       	or	r2,r12
8000d30c:	f1 ee 10 0c 	or	r12,r8,lr
8000d310:	f8 01 16 10 	lsr	r1,r12,0x10
8000d314:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000d318:	e6 01 0d 04 	divu	r4,r3,r1
8000d31c:	e4 03 16 10 	lsr	r3,r2,0x10
8000d320:	08 9e       	mov	lr,r4
8000d322:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000d326:	e8 06 02 48 	mul	r8,r4,r6
8000d32a:	10 33       	cp.w	r3,r8
8000d32c:	c0 a2       	brcc	8000d340 <__avr32_udiv64+0x1fe>
8000d32e:	20 1e       	sub	lr,1
8000d330:	18 03       	add	r3,r12
8000d332:	18 33       	cp.w	r3,r12
8000d334:	c0 63       	brcs	8000d340 <__avr32_udiv64+0x1fe>
8000d336:	10 33       	cp.w	r3,r8
8000d338:	f7 be 03 01 	sublo	lr,1
8000d33c:	e7 dc e3 03 	addcs	r3,r3,r12
8000d340:	10 13       	sub	r3,r8
8000d342:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000d346:	e6 01 0d 00 	divu	r0,r3,r1
8000d34a:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d34e:	00 98       	mov	r8,r0
8000d350:	e0 06 02 46 	mul	r6,r0,r6
8000d354:	0c 3b       	cp.w	r11,r6
8000d356:	c0 a2       	brcc	8000d36a <__avr32_udiv64+0x228>
8000d358:	20 18       	sub	r8,1
8000d35a:	18 0b       	add	r11,r12
8000d35c:	18 3b       	cp.w	r11,r12
8000d35e:	c0 63       	brcs	8000d36a <__avr32_udiv64+0x228>
8000d360:	0c 3b       	cp.w	r11,r6
8000d362:	f7 dc e3 0b 	addcs	r11,r11,r12
8000d366:	f7 b8 03 01 	sublo	r8,1
8000d36a:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000d36e:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000d372:	0c 1b       	sub	r11,r6
8000d374:	f0 04 06 42 	mulu.d	r2,r8,r4
8000d378:	06 95       	mov	r5,r3
8000d37a:	16 35       	cp.w	r5,r11
8000d37c:	e0 8b 00 0a 	brhi	8000d390 <__avr32_udiv64+0x24e>
8000d380:	5f 0b       	sreq	r11
8000d382:	f4 09 09 49 	lsl	r9,r10,r9
8000d386:	12 32       	cp.w	r2,r9
8000d388:	5f b9       	srhi	r9
8000d38a:	f7 e9 00 09 	and	r9,r11,r9
8000d38e:	c0 60       	breq	8000d39a <__avr32_udiv64+0x258>
8000d390:	20 18       	sub	r8,1
8000d392:	30 09       	mov	r9,0
8000d394:	c0 38       	rjmp	8000d39a <__avr32_udiv64+0x258>
8000d396:	30 09       	mov	r9,0
8000d398:	12 98       	mov	r8,r9
8000d39a:	10 9a       	mov	r10,r8
8000d39c:	12 93       	mov	r3,r9
8000d39e:	10 92       	mov	r2,r8
8000d3a0:	12 9b       	mov	r11,r9
8000d3a2:	2f dd       	sub	sp,-12
8000d3a4:	d8 32       	popm	r0-r7,pc

8000d3a6 <__avr32_umod64>:
8000d3a6:	d4 31       	pushm	r0-r7,lr
8000d3a8:	1a 97       	mov	r7,sp
8000d3aa:	20 3d       	sub	sp,12
8000d3ac:	10 9c       	mov	r12,r8
8000d3ae:	12 95       	mov	r5,r9
8000d3b0:	14 9e       	mov	lr,r10
8000d3b2:	16 91       	mov	r1,r11
8000d3b4:	16 96       	mov	r6,r11
8000d3b6:	58 09       	cp.w	r9,0
8000d3b8:	e0 81 00 81 	brne	8000d4ba <__avr32_umod64+0x114>
8000d3bc:	16 38       	cp.w	r8,r11
8000d3be:	e0 88 00 12 	brls	8000d3e2 <__avr32_umod64+0x3c>
8000d3c2:	f0 08 12 00 	clz	r8,r8
8000d3c6:	c4 e0       	breq	8000d462 <__avr32_umod64+0xbc>
8000d3c8:	f6 08 09 46 	lsl	r6,r11,r8
8000d3cc:	f8 08 09 4c 	lsl	r12,r12,r8
8000d3d0:	f0 0b 11 20 	rsub	r11,r8,32
8000d3d4:	f4 08 09 4e 	lsl	lr,r10,r8
8000d3d8:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000d3dc:	f7 e6 10 06 	or	r6,r11,r6
8000d3e0:	c4 18       	rjmp	8000d462 <__avr32_umod64+0xbc>
8000d3e2:	58 08       	cp.w	r8,0
8000d3e4:	c0 51       	brne	8000d3ee <__avr32_umod64+0x48>
8000d3e6:	30 19       	mov	r9,1
8000d3e8:	f2 08 0d 08 	divu	r8,r9,r8
8000d3ec:	10 9c       	mov	r12,r8
8000d3ee:	f8 08 12 00 	clz	r8,r12
8000d3f2:	c0 31       	brne	8000d3f8 <__avr32_umod64+0x52>
8000d3f4:	18 16       	sub	r6,r12
8000d3f6:	c3 68       	rjmp	8000d462 <__avr32_umod64+0xbc>
8000d3f8:	f0 03 11 20 	rsub	r3,r8,32
8000d3fc:	f4 03 0a 4b 	lsr	r11,r10,r3
8000d400:	f8 08 09 4c 	lsl	r12,r12,r8
8000d404:	ec 08 09 49 	lsl	r9,r6,r8
8000d408:	ec 03 0a 43 	lsr	r3,r6,r3
8000d40c:	f7 e9 10 09 	or	r9,r11,r9
8000d410:	f8 05 16 10 	lsr	r5,r12,0x10
8000d414:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000d418:	e6 05 0d 02 	divu	r2,r3,r5
8000d41c:	f2 0e 16 10 	lsr	lr,r9,0x10
8000d420:	ec 02 02 4b 	mul	r11,r6,r2
8000d424:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000d428:	16 3e       	cp.w	lr,r11
8000d42a:	c0 72       	brcc	8000d438 <__avr32_umod64+0x92>
8000d42c:	18 0e       	add	lr,r12
8000d42e:	18 3e       	cp.w	lr,r12
8000d430:	c0 43       	brcs	8000d438 <__avr32_umod64+0x92>
8000d432:	16 3e       	cp.w	lr,r11
8000d434:	fd dc e3 0e 	addcs	lr,lr,r12
8000d438:	fc 0b 01 03 	sub	r3,lr,r11
8000d43c:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000d440:	e6 05 0d 02 	divu	r2,r3,r5
8000d444:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000d448:	a5 36       	mul	r6,r2
8000d44a:	0c 39       	cp.w	r9,r6
8000d44c:	c0 72       	brcc	8000d45a <__avr32_umod64+0xb4>
8000d44e:	18 09       	add	r9,r12
8000d450:	18 39       	cp.w	r9,r12
8000d452:	c0 43       	brcs	8000d45a <__avr32_umod64+0xb4>
8000d454:	0c 39       	cp.w	r9,r6
8000d456:	f3 dc e3 09 	addcs	r9,r9,r12
8000d45a:	f2 06 01 06 	sub	r6,r9,r6
8000d45e:	f4 08 09 4e 	lsl	lr,r10,r8
8000d462:	f8 0a 16 10 	lsr	r10,r12,0x10
8000d466:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000d46a:	ec 0a 0d 02 	divu	r2,r6,r10
8000d46e:	fc 09 16 10 	lsr	r9,lr,0x10
8000d472:	ea 02 02 4b 	mul	r11,r5,r2
8000d476:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000d47a:	16 39       	cp.w	r9,r11
8000d47c:	c0 72       	brcc	8000d48a <__avr32_umod64+0xe4>
8000d47e:	18 09       	add	r9,r12
8000d480:	18 39       	cp.w	r9,r12
8000d482:	c0 43       	brcs	8000d48a <__avr32_umod64+0xe4>
8000d484:	16 39       	cp.w	r9,r11
8000d486:	f3 dc e3 09 	addcs	r9,r9,r12
8000d48a:	f2 0b 01 0b 	sub	r11,r9,r11
8000d48e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000d492:	f6 0a 0d 0a 	divu	r10,r11,r10
8000d496:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000d49a:	ea 0a 02 4a 	mul	r10,r5,r10
8000d49e:	14 3e       	cp.w	lr,r10
8000d4a0:	c0 72       	brcc	8000d4ae <__avr32_umod64+0x108>
8000d4a2:	18 0e       	add	lr,r12
8000d4a4:	18 3e       	cp.w	lr,r12
8000d4a6:	c0 43       	brcs	8000d4ae <__avr32_umod64+0x108>
8000d4a8:	14 3e       	cp.w	lr,r10
8000d4aa:	fd dc e3 0e 	addcs	lr,lr,r12
8000d4ae:	fc 0a 01 0a 	sub	r10,lr,r10
8000d4b2:	30 0b       	mov	r11,0
8000d4b4:	f4 08 0a 4a 	lsr	r10,r10,r8
8000d4b8:	c7 b8       	rjmp	8000d5ae <__avr32_umod64+0x208>
8000d4ba:	16 39       	cp.w	r9,r11
8000d4bc:	e0 8b 00 79 	brhi	8000d5ae <__avr32_umod64+0x208>
8000d4c0:	f2 09 12 00 	clz	r9,r9
8000d4c4:	c1 21       	brne	8000d4e8 <__avr32_umod64+0x142>
8000d4c6:	10 3a       	cp.w	r10,r8
8000d4c8:	5f 2b       	srhs	r11
8000d4ca:	0a 31       	cp.w	r1,r5
8000d4cc:	5f ba       	srhi	r10
8000d4ce:	f7 ea 10 0a 	or	r10,r11,r10
8000d4d2:	f2 0a 18 00 	cp.b	r10,r9
8000d4d6:	c0 60       	breq	8000d4e2 <__avr32_umod64+0x13c>
8000d4d8:	fc 08 01 0c 	sub	r12,lr,r8
8000d4dc:	e2 05 01 46 	sbc	r6,r1,r5
8000d4e0:	18 9e       	mov	lr,r12
8000d4e2:	0c 9b       	mov	r11,r6
8000d4e4:	1c 9a       	mov	r10,lr
8000d4e6:	c6 48       	rjmp	8000d5ae <__avr32_umod64+0x208>
8000d4e8:	ea 09 09 4c 	lsl	r12,r5,r9
8000d4ec:	f2 06 11 20 	rsub	r6,r9,32
8000d4f0:	f6 09 09 4b 	lsl	r11,r11,r9
8000d4f4:	f0 09 09 42 	lsl	r2,r8,r9
8000d4f8:	ef 46 ff f4 	st.w	r7[-12],r6
8000d4fc:	f0 06 0a 48 	lsr	r8,r8,r6
8000d500:	18 48       	or	r8,r12
8000d502:	e2 06 0a 4c 	lsr	r12,r1,r6
8000d506:	f4 09 09 43 	lsl	r3,r10,r9
8000d50a:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000d50e:	f4 06 0a 4a 	lsr	r10,r10,r6
8000d512:	16 4a       	or	r10,r11
8000d514:	f0 0b 16 10 	lsr	r11,r8,0x10
8000d518:	f8 0b 0d 04 	divu	r4,r12,r11
8000d51c:	f4 0c 16 10 	lsr	r12,r10,0x10
8000d520:	08 91       	mov	r1,r4
8000d522:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000d526:	e8 0e 02 46 	mul	r6,r4,lr
8000d52a:	0c 3c       	cp.w	r12,r6
8000d52c:	c0 a2       	brcc	8000d540 <__avr32_umod64+0x19a>
8000d52e:	20 11       	sub	r1,1
8000d530:	10 0c       	add	r12,r8
8000d532:	10 3c       	cp.w	r12,r8
8000d534:	c0 63       	brcs	8000d540 <__avr32_umod64+0x19a>
8000d536:	0c 3c       	cp.w	r12,r6
8000d538:	f7 b1 03 01 	sublo	r1,1
8000d53c:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000d540:	0c 1c       	sub	r12,r6
8000d542:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000d546:	f8 0b 0d 04 	divu	r4,r12,r11
8000d54a:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000d54e:	08 96       	mov	r6,r4
8000d550:	e8 0e 02 4e 	mul	lr,r4,lr
8000d554:	1c 3b       	cp.w	r11,lr
8000d556:	c0 a2       	brcc	8000d56a <__avr32_umod64+0x1c4>
8000d558:	20 16       	sub	r6,1
8000d55a:	10 0b       	add	r11,r8
8000d55c:	10 3b       	cp.w	r11,r8
8000d55e:	c0 63       	brcs	8000d56a <__avr32_umod64+0x1c4>
8000d560:	1c 3b       	cp.w	r11,lr
8000d562:	f7 b6 03 01 	sublo	r6,1
8000d566:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000d56a:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000d56e:	1c 1b       	sub	r11,lr
8000d570:	e2 02 06 40 	mulu.d	r0,r1,r2
8000d574:	00 9e       	mov	lr,r0
8000d576:	02 9c       	mov	r12,r1
8000d578:	16 3c       	cp.w	r12,r11
8000d57a:	e0 8b 00 08 	brhi	8000d58a <__avr32_umod64+0x1e4>
8000d57e:	5f 06       	sreq	r6
8000d580:	06 30       	cp.w	r0,r3
8000d582:	5f ba       	srhi	r10
8000d584:	ed ea 00 0a 	and	r10,r6,r10
8000d588:	c0 60       	breq	8000d594 <__avr32_umod64+0x1ee>
8000d58a:	fc 02 01 04 	sub	r4,lr,r2
8000d58e:	f8 08 01 4c 	sbc	r12,r12,r8
8000d592:	08 9e       	mov	lr,r4
8000d594:	e6 0e 01 0a 	sub	r10,r3,lr
8000d598:	f6 0c 01 4c 	sbc	r12,r11,r12
8000d59c:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000d5a0:	f8 09 0a 4b 	lsr	r11,r12,r9
8000d5a4:	f4 09 0a 4a 	lsr	r10,r10,r9
8000d5a8:	f8 01 09 4c 	lsl	r12,r12,r1
8000d5ac:	18 4a       	or	r10,r12
8000d5ae:	2f dd       	sub	sp,-12
8000d5b0:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000d600 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000d600:	c0 08       	rjmp	8000d600 <_evba>
	...

8000d604 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000d604:	c0 08       	rjmp	8000d604 <_handle_TLB_Multiple_Hit>
	...

8000d608 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000d608:	c0 08       	rjmp	8000d608 <_handle_Bus_Error_Data_Fetch>
	...

8000d60c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000d60c:	c0 08       	rjmp	8000d60c <_handle_Bus_Error_Instruction_Fetch>
	...

8000d610 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000d610:	c0 08       	rjmp	8000d610 <_handle_NMI>
	...

8000d614 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000d614:	c0 08       	rjmp	8000d614 <_handle_Instruction_Address>
	...

8000d618 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000d618:	c0 08       	rjmp	8000d618 <_handle_ITLB_Protection>
	...

8000d61c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000d61c:	c0 08       	rjmp	8000d61c <_handle_Breakpoint>
	...

8000d620 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000d620:	c0 08       	rjmp	8000d620 <_handle_Illegal_Opcode>
	...

8000d624 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000d624:	c0 08       	rjmp	8000d624 <_handle_Unimplemented_Instruction>
	...

8000d628 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000d628:	c0 08       	rjmp	8000d628 <_handle_Privilege_Violation>
	...

8000d62c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000d62c:	c0 08       	rjmp	8000d62c <_handle_Floating_Point>
	...

8000d630 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000d630:	c0 08       	rjmp	8000d630 <_handle_Coprocessor_Absent>
	...

8000d634 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000d634:	c0 08       	rjmp	8000d634 <_handle_Data_Address_Read>
	...

8000d638 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000d638:	c0 08       	rjmp	8000d638 <_handle_Data_Address_Write>
	...

8000d63c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000d63c:	c0 08       	rjmp	8000d63c <_handle_DTLB_Protection_Read>
	...

8000d640 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000d640:	c0 08       	rjmp	8000d640 <_handle_DTLB_Protection_Write>
	...

8000d644 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000d644:	c0 08       	rjmp	8000d644 <_handle_DTLB_Modified>
	...

8000d650 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000d650:	c0 08       	rjmp	8000d650 <_handle_ITLB_Miss>
	...

8000d660 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000d660:	c0 08       	rjmp	8000d660 <_handle_DTLB_Miss_Read>
	...

8000d670 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000d670:	c0 08       	rjmp	8000d670 <_handle_DTLB_Miss_Write>
	...

8000d700 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000d700:	c0 08       	rjmp	8000d700 <_handle_Supervisor_Call>
8000d702:	d7 03       	nop

8000d704 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d704:	30 0c       	mov	r12,0
8000d706:	fe b0 af 51 	rcall	800035a8 <_get_interrupt_handler>
8000d70a:	58 0c       	cp.w	r12,0
8000d70c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d710:	d6 03       	rete

8000d712 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d712:	30 1c       	mov	r12,1
8000d714:	fe b0 af 4a 	rcall	800035a8 <_get_interrupt_handler>
8000d718:	58 0c       	cp.w	r12,0
8000d71a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d71e:	d6 03       	rete

8000d720 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d720:	30 2c       	mov	r12,2
8000d722:	fe b0 af 43 	rcall	800035a8 <_get_interrupt_handler>
8000d726:	58 0c       	cp.w	r12,0
8000d728:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d72c:	d6 03       	rete

8000d72e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000d72e:	30 3c       	mov	r12,3
8000d730:	fe b0 af 3c 	rcall	800035a8 <_get_interrupt_handler>
8000d734:	58 0c       	cp.w	r12,0
8000d736:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000d73a:	d6 03       	rete
8000d73c:	d7 03       	nop
8000d73e:	d7 03       	nop
8000d740:	d7 03       	nop
8000d742:	d7 03       	nop
8000d744:	d7 03       	nop
8000d746:	d7 03       	nop
8000d748:	d7 03       	nop
8000d74a:	d7 03       	nop
8000d74c:	d7 03       	nop
8000d74e:	d7 03       	nop
8000d750:	d7 03       	nop
8000d752:	d7 03       	nop
8000d754:	d7 03       	nop
8000d756:	d7 03       	nop
8000d758:	d7 03       	nop
8000d75a:	d7 03       	nop
8000d75c:	d7 03       	nop
8000d75e:	d7 03       	nop
8000d760:	d7 03       	nop
8000d762:	d7 03       	nop
8000d764:	d7 03       	nop
8000d766:	d7 03       	nop
8000d768:	d7 03       	nop
8000d76a:	d7 03       	nop
8000d76c:	d7 03       	nop
8000d76e:	d7 03       	nop
8000d770:	d7 03       	nop
8000d772:	d7 03       	nop
8000d774:	d7 03       	nop
8000d776:	d7 03       	nop
8000d778:	d7 03       	nop
8000d77a:	d7 03       	nop
8000d77c:	d7 03       	nop
8000d77e:	d7 03       	nop
8000d780:	d7 03       	nop
8000d782:	d7 03       	nop
8000d784:	d7 03       	nop
8000d786:	d7 03       	nop
8000d788:	d7 03       	nop
8000d78a:	d7 03       	nop
8000d78c:	d7 03       	nop
8000d78e:	d7 03       	nop
8000d790:	d7 03       	nop
8000d792:	d7 03       	nop
8000d794:	d7 03       	nop
8000d796:	d7 03       	nop
8000d798:	d7 03       	nop
8000d79a:	d7 03       	nop
8000d79c:	d7 03       	nop
8000d79e:	d7 03       	nop
8000d7a0:	d7 03       	nop
8000d7a2:	d7 03       	nop
8000d7a4:	d7 03       	nop
8000d7a6:	d7 03       	nop
8000d7a8:	d7 03       	nop
8000d7aa:	d7 03       	nop
8000d7ac:	d7 03       	nop
8000d7ae:	d7 03       	nop
8000d7b0:	d7 03       	nop
8000d7b2:	d7 03       	nop
8000d7b4:	d7 03       	nop
8000d7b6:	d7 03       	nop
8000d7b8:	d7 03       	nop
8000d7ba:	d7 03       	nop
8000d7bc:	d7 03       	nop
8000d7be:	d7 03       	nop
8000d7c0:	d7 03       	nop
8000d7c2:	d7 03       	nop
8000d7c4:	d7 03       	nop
8000d7c6:	d7 03       	nop
8000d7c8:	d7 03       	nop
8000d7ca:	d7 03       	nop
8000d7cc:	d7 03       	nop
8000d7ce:	d7 03       	nop
8000d7d0:	d7 03       	nop
8000d7d2:	d7 03       	nop
8000d7d4:	d7 03       	nop
8000d7d6:	d7 03       	nop
8000d7d8:	d7 03       	nop
8000d7da:	d7 03       	nop
8000d7dc:	d7 03       	nop
8000d7de:	d7 03       	nop
8000d7e0:	d7 03       	nop
8000d7e2:	d7 03       	nop
8000d7e4:	d7 03       	nop
8000d7e6:	d7 03       	nop
8000d7e8:	d7 03       	nop
8000d7ea:	d7 03       	nop
8000d7ec:	d7 03       	nop
8000d7ee:	d7 03       	nop
8000d7f0:	d7 03       	nop
8000d7f2:	d7 03       	nop
8000d7f4:	d7 03       	nop
8000d7f6:	d7 03       	nop
8000d7f8:	d7 03       	nop
8000d7fa:	d7 03       	nop
8000d7fc:	d7 03       	nop
8000d7fe:	d7 03       	nop
